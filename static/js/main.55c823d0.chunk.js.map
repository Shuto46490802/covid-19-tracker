{"version":3,"sources":["api/index.js","Components/CountryPicker.js","Components/Charts/GlobalCharts.js","Components/Charts/CountryCharts.js","Components/Charts/GlobalTodayCharts.js","Components/Maps/CamulativeMap/CamulativeMap.js","Components/Maps/ActiveMap/ActiveMap.js","Components/Maps/IncidentRate/IncidentRate.js","Components/Maps/Maps.js","Components/Cards/InfectedCard/InfectedCard.js","Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js","Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js","Components/InfoPanel.js","App.js","index.js"],"names":["fetchCountriesYearlyData","country","a","changableUrl","axios","get","data","latest_data","timeline","name","fetchGlobaldata","map","active","confirmed","date","deaths","recovered","newConfirmed","new_confirmed","newDeaths","new_deaths","newRecovered","new_recovered","lastUpdate","updated_at","fetchCountry","code","fetchCountriesData","latestData","todayData","today","fetchProvinceData","promises","countries","lat","long","countryRegion","key","combinedKey","incidentRate","getData","Promise","all","promise","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","CountryPicker","classes","toggleCountry","useState","setCountries","useEffect","fetchAPI","modifiedData","filter","sort","b","FormControl","className","id","InputLabel","shrink","NativeSelect","onChange","e","target","value","i","GlobalCharts","globalData","arrowLeft","arrowRight","option","globalChartExpand","setGlobalChartExpand","expandIcon","shrinkIcon","isChart","setIsChart","setIsLoad","setTimeout","infectedStyle","deathsStyle","recoveredStyle","reverse","infectedLineChart","length","labels","datasets","fill","lineTension","borderColor","backgroundColor","pointRadius","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","options","deathsLineChart","recoveredLineChart","onStyle","borderBottom","style","fontSize","height","onClick","CountryCharts","countriesYearlyData","globalDailyChartExpand","isLoad","loader","type","color","width","timeout","modifiedTimeLine","label","barChart","maintainAspectRatio","legend","display","title","scales","xAxes","gridLines","zeroLineColor","ticks","maxTicksLimit","fontColor","yAxes","callback","num","toFixed","GlobalTodayCharts","isInfectedActiveChart","setIsInfectedActiveChart","isDeathsRecoveredChart","setIsDeathsRecoveredChart","activeStyle","toggleInfectedActiveChart","toggleDeathsRecoveredChart","infectedBarChart","activeBarChart","recoveredBarChart","deathsBarChart","CamulativeMap","noProvince","formatNumber","usProvinces","provinces","toggleIconSize","mapExpand","iconSize","L","Icon","iconUrl","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Popup","ActiveMap","props","IncidentRate","Math","floor","Maps","provincesData","setMapExpand","isMap","setIsMap","isHover","setIsHover","calmulativeStyle","incidentRateStyle","inputNumber","formetedNumber","Number","replace","splitArray","split","onMouseEnter","onMouseLeave","InfectedCard","countriesData","infectedCardExpand","setInfectedCardExpand","isCard","setIsCard","admin0Style","admin2Style","todayStyle","modifiedGlobalCasesData","modifiedProvincesData","flat","modifiedTodayData","DeathsRecoveredCard","deathsdCardExpand","setDeathsCardExpand","modifiedGlobalDeathsData","modifiedGlobalRecoveredData","ActiveIncidentRateCard","activeCardExpand","setActiveCardExpand","modifiedActiveData","activeDataSum","reduce","modifiedIncidentRateData","numberOfProvinces","incidentRateAvarage","toggleActiveIncidentRateCard","padding","InfoPanel","dataPanelExpand","filteredCountries","filteredProvinces","getFormattedDate","String","Date","month","slice","day","year","hour","ampm","colspan","github","faGithubSquare","twitter","faTwitterSquare","tumblr","faTumblrSquare","faCaretLeft","faCaretRight","faExpandArrowsAlt","faCompressArrowsAlt","App","setGlobaldata","setCountry","setCountriesData","setProvincesData","setCountriesYearlyData","setDataPanelExpand","setGlobalDailyChartExpand","countryChartExpand","isPanelHover","setIsPanelHover","isTodayChartHover","setIsTodayChartHover","isGlobalChartHover","setIsGlobalChartHover","tooltips","xPadding","yPadding","yAlign","callbacks","items","item","src","alt","top","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qaAKaA,EAAwB,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,yDACpB,qBAAZD,EADgC,yCAEzB,cAFyB,cAIhCE,EAJgC,2CAIoBF,GAJpB,kBAMkCG,IAAMC,IAAIF,GAN5C,2BAMxBG,KAAQA,KAAQC,EANQ,EAMRA,YAAaC,EANL,EAMKA,SAAUC,EANf,EAMeA,KANf,kBAOzB,CAAEF,cAAaC,WAAUC,SAPA,4FAAH,sDAaxBC,EAAe,uCAAG,8BAAAR,EAAA,4DACjB,kCADiB,kBAGUE,IAAMC,IAFjC,mCADiB,uBAGPC,EAHO,EAGfA,KAAQA,KAHO,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBM,OAAQN,EAAKM,OACbC,UAAWP,EAAKO,UAChBC,KAAMR,EAAKQ,KACXC,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBC,aAAcX,EAAKY,cACnBC,UAAWb,EAAKc,WAChBC,aAAcf,EAAKgB,cACnBC,WAAYjB,EAAKkB,gBAbE,yFAAH,qDAoBfC,EAAY,uCAAG,8BAAAvB,EAAA,4DACd,mCADc,kBAGaE,IAAMC,IAFjC,oCADc,uBAGJC,EAHI,EAGZA,KAAQA,KAHI,kBAKbA,EAAKK,KAAI,kBAAkC,CAC9CF,KADY,EAAGA,KAEfiB,KAFY,EAASA,KAGrBpB,KAHY,EAAeC,iBALX,yFAAH,qDAiBZoB,EAAkB,uCAAG,8BAAAzB,EAAA,4DACpB,mCADoB,kBAIOE,IAAMC,IAHjC,oCADoB,uBAIVC,EAJU,EAIlBA,KAAQA,KAJU,kBAKnBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBL,QAASK,EAAKG,KACdmB,WAAYtB,EAAKC,YACjBsB,UAAWvB,EAAKwB,WARM,yFAAH,qDAgBlBC,EAAiB,uCAAG,8BAAA7B,EAAA,6DAEvB8B,EAAWC,EAAUtB,IAAV,uCAAc,WAAOV,GAAP,iBAAAC,EAAA,+EAEAE,IAAMC,IAAN,UAzEvB,iCAyEuB,sBAA8BJ,EAA9B,eAFA,uBAEfK,EAFe,EAEfA,KAFe,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBO,UAAWP,EAAKO,UAChBE,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBJ,OAAQN,EAAKM,OACbsB,IAAK5B,EAAK4B,IACVC,KAAM7B,EAAK6B,KACXlC,QAASK,EAAK8B,cACdC,IAAK/B,EAAKgC,YACVC,aAAcjC,EAAKiC,kBAbA,yFAAd,uDAmBXC,EArBuB,+BAAAtC,EAAA,MAqBb,sBAAAA,EAAA,sEACCuC,QAAQC,IAAIV,EAASrB,IAAT,uCAAa,WAAOgC,GAAP,SAAAzC,EAAA,+EAC3ByC,GAD2B,2CAAb,wDADb,mFArBa,8DA0BhBH,IA1BgB,mFAAH,qDA6BxBP,EACF,CAAC,cACG,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,QACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,sBACA,mBACA,aACA,UACA,OACA,SACA,UACA,UACA,mBACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,kBACA,SACA,OACA,WACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,SACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,cACA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","file":"static/js/main.55c823d0.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\n//for countries charts\nexport const fetchCountriesYearlyData = async (country) => {\n    if (country === \"select a country\") {\n        return \"Loading...\"\n    }\n    var changableUrl = (`https://corona-api.com/countries/${country}`)\n    try {\n        const { data: { data: { latest_data, timeline, name } } } = await axios.get(changableUrl);\n        return { latest_data, timeline, name }\n    } catch (error) {\n    }\n}\n\n//fetch global datas\nexport const fetchGlobaldata = async () => {\n    let url = \"https://corona-api.com/timeline\"\n    try {\n        const { data: { data } } = await axios.get(url);\n        return data.map((data) => ({\n            active: data.active,\n            confirmed: data.confirmed,\n            date: data.date,\n            deaths: data.deaths,\n            recovered: data.recovered,\n            newConfirmed: data.new_confirmed,\n            newDeaths: data.new_deaths,\n            newRecovered: data.new_recovered,\n            lastUpdate: data.updated_at\n        }));\n    } catch (error) {\n    }\n}\n\n//for country picker\nexport const fetchCountry = async () => {\n    let url = \"https://corona-api.com/countries\"\n    try {\n        const { data: { data } } = await axios.get(url);\n\n        return data.map(({ name, code, latest_data }) => ({\n            name: name,\n            code: code,\n            data: latest_data\n        }))\n\n    } catch (error) {\n\n    }\n};\n\n//for country infected, deaths and recovered list \nexport const fetchCountriesData = async () => {\n    let url = \"https://corona-api.com/countries\"\n\n    try {\n        const { data: { data } } = await axios.get(url)\n        return data.map((data) => ({\n            country: data.name,\n            latestData: data.latest_data,\n            todayData: data.today\n        }))\n\n    } catch (error) {\n    }\n};\n\n//for Map\nexport const fetchProvinceData = async () => {\n\n    const promises = countries.map(async (country) => {\n        try {\n            const { data } = await axios.get(`${url}/countries/${country}/confirmed`);\n\n            return data.map((data) => ({\n                confirmed: data.confirmed,\n                deaths: data.deaths,\n                recovered: data.recovered,\n                active: data.active,\n                lat: data.lat,\n                long: data.long,\n                country: data.countryRegion,\n                key: data.combinedKey,\n                incidentRate: data.incidentRate\n            }));\n        } catch (error) {\n        }\n    });\n\n    const getData = async () => {\n        return await Promise.all(promises.map(async (promise) => {\n            return promise\n        }))\n    }\n    return await getData();\n};\n\nconst countries =\n    [\"Afghanistan\",\n        \"Albania\",\n        \"Algeria\",\n        \"Andorra\",\n        \"Angola\",\n        \"Antigua and Barbuda\",\n        \"Argentina\",\n        \"Armenia\",\n        \"Australia\",\n        \"Austria\",\n        \"Azerbaijan\",\n        \"Bahamas\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Barbados\",\n        \"Belarus\",\n        \"Belgium\",\n        \"Belize\",\n        \"Benin\",\n        \"Bhutan\",\n        \"Bolivia\",\n        \"Bosnia and Herzegovina\",\n        \"Botswana\",\n        \"Brazil\",\n        \"Brunei\",\n        \"Bulgaria\",\n        \"Burkina Faso\",\n        \"Burma\",\n        \"Burundi\",\n        \"Cabo Verde\",\n        \"Cambodia\",\n        \"Cameroon\",\n        \"Canada\",\n        \"Central African Republic\",\n        \"Chad\",\n        \"Chile\",\n        \"China\",\n        \"Colombia\",\n        \"Comoros\",\n        \"Congo (Brazzaville)\",\n        \"Congo (Kinshasa)\",\n        \"Costa Rica\",\n        \"Croatia\",\n        \"Cuba\",\n        \"Cyprus\",\n        \"Czechia\",\n        \"Denmark\",\n        \"Diamond Princess\",\n        \"Djibouti\",\n        \"Dominica\",\n        \"Dominican Republic\",\n        \"Ecuador\",\n        \"Egypt\",\n        \"El Salvador\",\n        \"Equatorial Guinea\",\n        \"Eritrea\",\n        \"Estonia\",\n        \"Eswatini\",\n        \"Ethiopia\",\n        \"Fiji\",\n        \"Finland\",\n        \"France\",\n        \"Gabon\",\n        \"Gambia\",\n        \"Georgia\",\n        \"Germany\",\n        \"Ghana\",\n        \"Greece\",\n        \"Grenada\",\n        \"Guatemala\",\n        \"Guinea\",\n        \"Guinea-Bissau\",\n        \"Guyana\",\n        \"Haiti\",\n        \"Holy See\",\n        \"Honduras\",\n        \"Hungary\",\n        \"Iceland\",\n        \"India\",\n        \"Indonesia\",\n        \"Iran\",\n        \"Iraq\",\n        \"Ireland\",\n        \"Israel\",\n        \"Italy\",\n        \"Jamaica\",\n        \"Japan\",\n        \"Jordan\",\n        \"Kazakhstan\",\n        \"Kenya\",\n        \"South Korea\",\n        \"Kosovo\",\n        \"Kuwait\",\n        \"Kyrgyzstan\",\n        \"Laos\",\n        \"Latvia\",\n        \"Lebanon\",\n        \"Lesotho\",\n        \"Liberia\",\n        \"Libya\",\n        \"Liechtenstein\",\n        \"Lithuania\",\n        \"Luxembourg\",\n        \"MS Zaandam\",\n        \"Madagascar\",\n        \"Malawi\",\n        \"Malaysia\",\n        \"Maldives\",\n        \"Mali\",\n        \"Malta\",\n        \"Marshall Islands\",\n        \"Mauritania\",\n        \"Mauritius\",\n        \"Mexico\",\n        \"Moldova\",\n        \"Monaco\",\n        \"Mongolia\",\n        \"Montenegro\",\n        \"Morocco\",\n        \"Mozambique\",\n        \"Namibia\",\n        \"Nepal\",\n        \"Netherlands\",\n        \"New Zealand\",\n        \"Nicaragua\",\n        \"Niger\",\n        \"Nigeria\",\n        \"North Macedonia\",\n        \"Norway\",\n        \"Oman\",\n        \"Pakistan\",\n        \"Panama\",\n        \"Papua New Guinea\",\n        \"Paraguay\",\n        \"Peru\",\n        \"Philippines\",\n        \"Poland\",\n        \"Portugal\",\n        \"Qatar\",\n        \"Romania\",\n        \"Russia\",\n        \"Rwanda\",\n        \"Saint Kitts and Nevis\",\n        \"Saint Lucia\",\n        \"Saint Vincent and the Grenadines\",\n        \"Samoa\",\n        \"San Marino\",\n        \"Sao Tome and Principe\",\n        \"Saudi Arabia\",\n        \"Senegal\",\n        \"Serbia\",\n        \"Seychelles\",\n        \"Sierra Leone\",\n        \"Singapore\",\n        \"Slovakia\",\n        \"Slovenia\",\n        \"Solomon Islands\",\n        \"Somalia\",\n        \"South Africa\",\n        \"South Sudan\",\n        \"Spain\",\n        \"Sri Lanka\",\n        \"Sudan\",\n        \"Suriname\",\n        \"Sweden\",\n        \"Switzerland\",\n        \"Syria\",\n        \"Taiwan\",\n        \"Tajikistan\",\n        \"Tanzania\",\n        \"Thailand\",\n        \"Timor-Leste\",\n        \"Togo\",\n        \"Trinidad and Tobago\",\n        \"Tunisia\",\n        \"Turkey\",\n        \"US\",\n        \"Uganda\",\n        \"Ukraine\",\n        \"United Arab Emirates\",\n        \"United Kingdom\",\n        \"Uruguay\",\n        \"Uzbekistan\",\n        \"Vanuatu\",\n        \"Venezuela\",\n        \"Vietnam\",\n        \"West Bank and Gaza\",\n        \"Yemen\",\n        \"Zambia\",\n        \"Zimbabwe\"]\n","import React, { useState, useEffect } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchCountry } from \"../api\";\n\nimport \"../css/CountryPicker.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(.5),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        //   marginTop: theme.spacing(2),\n    }\n}));\n\nconst CountryPicker = ({ classes, toggleCountry }) => {\n\n    const [countries, setCountries] = useState([]);\n    const classStyle = useStyles();\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    return (\n        <FormControl className=\"form\"  id=\"form\">\n            <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n            <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                <option value={\"select a country\"} className={\"option\"}>Global</option>\n                {\n                    modifiedData.map((country, i) =>\n                        <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                }\n            </NativeSelect>\n        </FormControl>\n    )\n};\n\nexport default CountryPicker;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.scss\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon }) => {\n\n  const [isChart, setIsChart] = useState(\"infected\");\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  if (!globalData[0]) {\n    return \"Loading...\"\n  }\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { infectedStyle, deathsStyle, recoveredStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n  infectedStyle = isChart === \"infected\" ?\n    onStyle :\n    {}\n  deathsStyle = isChart === \"deaths\" ?\n    onStyle :\n    {}\n  recoveredStyle = isChart === \"recovered\" ?\n    onStyle :\n    {}\n\n  return (\n    <Fragment>\n      <div className={\"global-chart-container\"}>\n        <div className={\"chart-wrapper\"}>\n          <p\n            className={\"chart-header\"}\n            style={globalChartExpand ? { fontSize: \"1em\" } : {}}\n          >\n            Daily Infected/Deaths/Recovered by Country\n            </p>\n          <div\n            className={\"chart\"}\n            style={globalChartExpand ? { height: \"85%\" } : {}}\n          >\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n          {\n            !globalChartExpand\n              ? <div className={\"arrow-toggler\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                  {\n                    isChart === \"infected\"\n                      ? \"Infected\"\n                      : isChart === \"deaths\"\n                        ? \"Deaths\"\n                        : isChart === \"recovered\"\n                          ? \"Recovered\"\n                          : null\n                  }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n              </div>\n              : null\n          }\n        </div>\n      </div>\n      <div className={\"chart-button-toggler-wrapper-tablet\"}>\n        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n      </div>\n      {\n        globalChartExpand\n          ? <div className={\"chart-button-toggler-wrapper\"}>\n            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n          </div>\n          : null\n      }\n    </Fragment>\n  )\n};\n\nexport default GlobalCharts;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.scss\"\n\nconst CountryCharts = ({ countriesYearlyData: { latest_data, timeline }, arrowLeft, arrowRight, option, classes, globalDailyChartExpand }) => {\n\n    const [isChart, setIsChart] = useState(\"infected\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    if (!latest_data) {\n        return \"Loadning\"\n    }\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !timeline || !latest_data) {\n        return (\n            <div className={\"loader-country-chart-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedTimeLine = timeline.map((data) => data).reverse();\n    //infected chart\n    const infectedLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ confirmed }) => confirmed),\n                            label: \"Infected\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(222, 53, 76, 1)\",\n                            backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(222, 53, 76, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n                            pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ deaths }) => deaths),\n                            label: \"Deaths\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(92, 95, 88, 1)\",\n                            backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(92, 95, 88, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n                            pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ recovered }) => recovered),\n                            label: \"Recovered\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(0, 255, 0, 1)\",\n                            backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(0, 255, 0, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n                            pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const barChart = (\n        latest_data.length !== 0\n            ? <Bar\n                data={{\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                    datasets: [{\n                        data: [latest_data.confirmed, latest_data.recovered, latest_data.deaths],\n                        backgroundColor: [\"rgba(222, 53, 76, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(92, 95, 88, 0.5)\"]\n                    }]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: { display: false },\n                    title: { display: false },\n                    scales: {\n                        xAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                maxTicksLimit: 12,\n                                fontColor: \"white\"\n                            }\n                        }],\n                        yAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                fontColor: \"white\",\n                                maxTicksLimit: 8,\n                                callback: function numFormatter(num) {\n                                    if (num > 999 && num < 1000000) {\n                                        return (num / 1000).toFixed(1) + 'K';\n                                    } else if (num >= 1000000) {\n                                        return (num / 1000000).toFixed(1) + 'M';\n                                    } else if (num < 900) {\n                                        return num;\n                                    }\n\n                                }\n                            }\n                        }\n                        ]\n                    }\n                }}\n            />\n            : null\n    );\n\n    const toggleToRight = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"infected\")\n        }\n    };\n    const toggleToLeft = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"infected\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { infectedStyle, deathsStyle, recoveredStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    infectedStyle = isChart === \"infected\" ?\n        onStyle :\n        {}\n    deathsStyle = isChart === \"deaths\" ?\n        onStyle :\n        {}\n    recoveredStyle = isChart === \"recovered\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div className={\"chart-container\"}>\n                <div className={\"chart-wrapper\"}>\n                    <p\n                        className={\"chart-header\"}\n                        style={globalDailyChartExpand ? { fontSize: \"1em\" } : {}}\n                    >\n                        Daily Infected/Deaths/Recovered by Country\n                        </p>\n                    <div\n                        className={\"chart\"}\n                        style={globalDailyChartExpand ? { height: \"85%\" } : {}}\n                    >\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n                                <span className={\"card-toggler-text\"}>\n                                    {\n                                        isChart === \"infected\"\n                                            ? \"Infected\"\n                                            : isChart === \"deaths\"\n                                                ? \"Deaths\"\n                                                : isChart === \"recovered\"\n                                                    ? \"Recovered\"\n                                                    : null\n                                    }\n                                </span>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div\n                    className={\"border\"}\n                    style={globalDailyChartExpand ? { height: \"90%\" } : {}}\n                />\n                <div className={\"chart-wrapper bar-chart-wrapper\"}>\n                    <p\n                        className={\"chart-header\"}\n                        style={globalDailyChartExpand ? { fontSize: \"1em\" } : {}}\n                    >\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div\n                        className={\"chart bar-chart\"}\n                        style={globalDailyChartExpand ? { height: \"85%\" } : {}}\n                    >\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n            <div className={\"chart-button-toggler-wrapper-tablet infected-buttons\"}>\n                <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n                <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n                <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={\"chart-button-toggler-wrapper infected-buttons\"}>\n                        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n                        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n                        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n                    </div>\n                    : null\n            }\n        </Fragment>\n    )\n}\n\nexport default CountryCharts","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.scss\"\n\nconst GlobalTodayCharts = ({ globalData, arrowRight, arrowLeft, option, classes, globalDailyChartExpand }) => {\n\n    const [isInfectedActiveChart, setIsInfectedActiveChart] = useState(\"infected\");\n    const [isDeathsRecoveredChart, setIsDeathsRecoveredChart] = useState(\"deaths\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    if (!globalData[0]) {\n        return \"Loading...\"\n    }\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad) {\n        return (\n            <div className={\"loader-country-chart-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedData = globalData.map((data) => data).reverse().filter(({ newConfirmed }) => newConfirmed < 3000000);\n\n    const toggleInfectedActiveChart = () => {\n        if (isInfectedActiveChart === \"infected\") {\n            setIsInfectedActiveChart(\"active\")\n        } else {\n            setIsInfectedActiveChart(\"infected\")\n        }\n    };\n\n    const toggleDeathsRecoveredChart = () => {\n        if (isDeathsRecoveredChart === \"deaths\") {\n            setIsDeathsRecoveredChart(\"recovered\")\n        } else {\n            setIsDeathsRecoveredChart(\"deaths\")\n        }\n    };\n\n    const infectedBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newConfirmed }) => newConfirmed),\n                        backgroundColor: \"red\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const activeBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ active }) => active),\n                        backgroundColor: \"rgba(241, 178, 74, 1)\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newRecovered }) => newRecovered),\n                        backgroundColor: \"#4D774E\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newDeaths }) => newDeaths),\n                        backgroundColor: \"#999\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    //toggle map togglers border bottom\n    let { infectedStyle, activeStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    infectedStyle = isInfectedActiveChart === \"infected\" ?\n        onStyle :\n        {}\n    activeStyle = isInfectedActiveChart === \"active\" ?\n        onStyle :\n        {}\n\n    let { deathsStyle, recoveredStyle } = {};\n    deathsStyle = isDeathsRecoveredChart === \"deaths\" ?\n        onStyle :\n        {}\n    recoveredStyle = isDeathsRecoveredChart === \"recovered\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div className={\"chart-container\"}>\n                <div className={\"chart-wrapper\"}>\n                    <p\n                        className={\"chart-header\"}\n                        style={globalDailyChartExpand ? { fontSize: \"1em\" } : {}}\n                    >\n                        Global Daily Infected/Active Cases\n                        </p>\n                    <div\n                        className={\"chart\"}\n                        style={globalDailyChartExpand ? { height: \"85%\" } : {}}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <span className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowLeft}</span>\n                                <span className={\"card-toggler-text\"}>\n                                    {\n                                        isInfectedActiveChart === \"infected\"\n                                            ? \"Daily Infected Cases\"\n                                            : \"Daily Active Cases\"\n\n                                    }\n                                </span>\n                                <span className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowRight}</span>\n                            </div>\n                            : null\n                    }\n                </div>\n\n                <div className={\"border\"} />\n\n                <div className={\"chart-wrapper\"}>\n                    <p\n                        className={\"chart-header\"}\n                        style={globalDailyChartExpand ? { fontSize: \"1em\" } : {}}\n                    >\n                        Global Daily Deaths/Recovered\n                        </p>\n                    <div\n                        className={\"chart\"}\n                        style={globalDailyChartExpand ? { height: \"85%\" } : {}}\n                    >\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowLeft}</span>\n                                <span className={\"card-toggler-text\"}>\n                                    {\n                                        isDeathsRecoveredChart === \"deaths\"\n                                            ? \"Daily Deaths\"\n                                            : \"Daily Recovered\"\n                                    }\n                                </span>\n                                <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowRight}</span>\n                            </div>\n                            : null\n                    }\n\n                </div>\n\n            </div>\n\n            <div className={\"chart-button-toggler-container-tablet\"}>\n                <div className={\"chart-button-toggler-wrapper infected-buttons\"}>\n                    <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                    <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                </div>\n                <div className={\"chart-button-toggler-wrapper deaths-buttons\"}>\n                    <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                    <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                </div>\n            </div>\n            \n            {\n                globalDailyChartExpand\n                    ? <div className={\"chart-button-toggler-container\"}>\n                        <div className={\"chart-button-toggler-wrapper infected-buttons\"}>\n                            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                            <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                        </div>\n                        <div className={\"chart-button-toggler-wrapper deaths-buttons\"}>\n                            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                        </div>\n                    </div>\n                    : null\n            }\n        </Fragment>\n    )\n};\n\nexport default GlobalTodayCharts;","import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces, mapExpand }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer  center={[23.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst ActiveMap = (props) => {\n\n    const toggleIconSize = (active) => {\n        let iconSize = [];\n\n        if (active > 500000) {\n            iconSize = [20, 20]\n        } else if (active > 300000) {\n            iconSize = [15, 15]\n        } else if (active > 100000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Location_dot_orange.svg/1024px-Location_dot_orange.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.confirmed)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                            <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                            <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                            <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default ActiveMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst IncidentRate = (props) => {\n\n    const toggleIconSize = (incidentRate) => {\n        let iconSize = [];\n\n        if (incidentRate > 10000) {\n            iconSize = [20, 20]\n        } else if (incidentRate > 8000) {\n            iconSize = [15, 15]\n        } else if (incidentRate > 5000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/Yellow_icon.svg/1200px-Yellow_icon.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.incidentRate)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000 people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default IncidentRate;","import React, { Fragment, useEffect, useState } from \"react\";\n\n//components\nimport CamulativeMap from \"./CamulativeMap/CamulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.scss\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon }) => {\n\n    const [isMap, setIsMap] = useState(\"calmulative\");\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData) {\n        return \"Loading...\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { calmulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    calmulativeStyle = isMap === \"calmulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                id=\"map-container\"\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"calmulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"calmulative\"\n                        ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={\"button-toggler-wrapper\"}>\n                <div style={calmulativeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"calmulative\")}>Calmulative Cases</div>\n                <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n\n            <div id=\"map-container-tablet\">\n                {\n                    isMap === \"calmulative\"\n                        ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={\"map-button-toggler-wrapper-tablet\"}>\n                <div style={calmulativeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"calmulative\")}>Calmulative Cases</div>\n                <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n        </Fragment>\n    )\n}\n\n\n\nexport default Maps;","import React, { Fragment, useState } from \"react\";\n\nimport \"./InfectedCard.scss\";\n\nconst InfectedCard = ({ countriesData, globalData, provincesData, arrowLeft, arrowRight, infectedCardExpand, expandIcon, shrinkIcon, setInfectedCardExpand, formatNumber }) => {\n\n    const [isCard, setIsCard] = useState(\"admin0\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading...\"\n    }\n\n    //modify global datas\n    const modifiedGlobalCasesData = countriesData\n        .map(({ country, latestData }) => [country, latestData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    //modify provinces data\n    const modifiedProvincesData = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .map(({ confirmed, key }) => [confirmed, key])\n            .filter((data) => data[0] > 30000))\n        .filter((data) => data.length > 0)\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    //modify today's data \n    const modifiedTodayData = countriesData\n        .map(({ country, todayData }) => [country, todayData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    const toggleAdminInfectedRight = () => {\n        if (isCard === \"admin0\") {\n            setIsCard(\"admin2\")\n        } else if (isCard === \"admin2\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"admin0\")\n        }\n    };\n    const toggleAdminInfectedLeft = () => {\n        if (isCard === \"admin0\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"admin2\")\n        } else if (isCard === \"admin2\") {\n            setIsCard(\"admin0\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isCard === \"admin0\"\n        ? onStyle\n        : {}\n    admin2Style = isCard === \"admin2\"\n        ? onStyle\n        : {}\n    todayStyle = isCard === \"today\"\n        ? onStyle\n        : {}\n\n    return (\n        <Fragment>\n            <div\n                className={\"infected-card-container\"}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={infectedCardExpand ? { width: \"95%\", height: \"93%\" } : {}}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? \"Global Cases\"\n                                : \"Global Today's Cases\"\n                        }\n                    </span>\n                    <h1 className={\"card-header-num infected-num\"} >\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? formatNumber(globalData[0].confirmed)\n                                : formatNumber(globalData[0].newConfirmed)\n                        }\n                    </h1>\n                </div>\n                {\n                    isCard === \"admin0\" || isCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <span>Cases by Country</span>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <span>Cases by</span>\n                            <span>Province/State/Dpendency</span>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <span className={\"list-num infected-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                        <span className={\"province-list-place\"}>{data[1]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            {\n                !infectedCardExpand\n                    ? <div className={\"arrow-toggler\"}>\n                        <span className={\"arrow-icon\"} onClick={() => toggleAdminInfectedLeft()}>{arrowLeft}</span>\n                        <span className={\"card-toggler-text\"}>\n                            {\n                                isCard === \"admin0\"\n                                    ? \"Admin0\"\n                                    : isCard === \"admin2\"\n                                        ? \"Admin2\"\n                                        : isCard === \"today\"\n                                            ? \"Global Today's Cases\"\n                                            : null\n                            }\n                        </span>\n                        <span className={\"arrow-icon\"} onClick={() => toggleAdminInfectedRight()}>{arrowRight}</span>\n                    </div>\n                    : <div className={\"card-button-toggler-wrapper\"}>\n                        <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin0\")}>Admin0</div>\n                        <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin2\")}>Admin2</div>\n                        <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Cases</div>\n                    </div>\n            }\n\n\n            <div\n                className={\"infected-card-container-tablet\"}>\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? \"Global Cases\"\n                                : \"Global Today's Cases\"\n                        }\n                    </span>\n                    <h1 className={\"card-header-num infected-num\"} >\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? formatNumber(globalData[0].confirmed)\n                                : formatNumber(globalData[0].newConfirmed)\n                        }\n                    </h1>\n                </div>\n                {\n                    isCard === \"admin0\" || isCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <span>Cases by Country</span>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <span>Cases by</span>\n                            <span>Province/State/Dpendency</span>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <span className={\"list-num infected-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                        <span className={\"province-list-place\"}>{data[1]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            <div className={\"card-button-toggler-wrapper-tablet\"}>\n                <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin0\")}>Admin0</div>\n                <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin2\")}>Admin2</div>\n                <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Cases</div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default InfectedCard;","import React, { useState, Fragment } from \"react\";\nimport \"./DeathsRecoveredCard.scss\"\n\nconst DeathsRecoveredCard = ({ countriesData, globalData, classes, arrowLeft, arrowRight, deathsdCardExpand, setDeathsCardExpand, expandIcon, shrinkIcon, formatNumber }) => {\n\n    const [isCard, setIsCard] = useState(\"deaths\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading ...\"\n    }\n\n    //modify deaths datas\n    const modifiedGlobalDeathsData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].deaths - a[1].deaths);\n\n    //modify recovered datas\n    const modifiedGlobalRecoveredData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].recovered - a[1].recovered);\n\n    //modify today's deaths data \n    const modifiedTodayData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].deaths - a[2].deaths);\n\n    //toggle cards\n    const toggleDeathsRecoveredRight = () => {\n        if (isCard === \"deaths\") {\n            setIsCard(\"recovered\")\n        } else if (isCard === \"recovered\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"deaths\")\n        }\n    };\n    const toggleDeathsRecoveredLeft = () => {\n        if (isCard === \"deaths\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"recovered\")\n        } else if (isCard === \"recovered\") {\n            setIsCard(\"deaths\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isCard === \"deaths\" ?\n        onStyle :\n        {}\n    admin2Style = isCard === \"recovered\" ?\n        onStyle :\n        {}\n    todayStyle = isCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={\"deaths-card-container\"}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={deathsdCardExpand ? { width: \"95%\", height: \"93%\" } : {}}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"deaths\"\n                                ? \"Global Deaths\"\n                                : isCard === \"recovered\"\n                                    ? \"Global Recovered\"\n                                    : isCard === \"today\"\n                                        ? \"Global Todays's Deaths\"\n                                        : null\n                        }\n                    </span>\n\n                    {\n                        isCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <span className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</span>\n                                        <span>{data[0]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            {\n                !deathsdCardExpand\n                    ? <div className={\"arrow-toggler\"}>\n                        <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredLeft()}>{arrowLeft}</span>\n                        <span className={\"card-toggler-text\"}>\n                            {\n                                isCard === \"deaths\"\n                                    ? \"Deaths\"\n                                    : isCard === \"recovered\"\n                                        ? \"Recovered\"\n                                        : isCard === \"today\"\n                                            ? \"Global Today's Deaths\"\n                                            : null\n                            }\n                        </span>\n                        <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredRight()}>{arrowRight}</span>\n                    </div>\n                    : <div className={\"card-button-toggler-wrapper\"}>\n                        <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"deaths\")}>Deaths</div>\n                        <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"recovered\")}>Recovered</div>\n                        <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Deaths</div>\n                    </div>\n            }\n\n\n\n            <div className={\"deaths-card-container-tablet\"}>\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"deaths\"\n                                ? \"Global Deaths\"\n                                : isCard === \"recovered\"\n                                    ? \"Global Recovered\"\n                                    : isCard === \"today\"\n                                        ? \"Global Todays's Deaths\"\n                                        : null\n                        }\n                    </span>\n\n                    {\n                        isCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <span className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</span>\n                                        <span>{data[0]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            <div className={\"card-button-toggler-wrapper-tablet\"}>\n                <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"deaths\")}>Deaths</div>\n                <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"recovered\")}>Recovered</div>\n                <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Deaths</div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default DeathsRecoveredCard;","import React, { useState, Fragment } from \"react\";\nimport \"./ActiveIncidentRateCard.scss\";\n\nconst ActiveIncidentRateCard = ({ provincesData, classes, arrowLeft, arrowRight, activeCardExpand, setActiveCardExpand, expandIcon, shrinkIcon, formatNumber }) => {\n\n    const [isCard, setIsCard] = useState(\"active\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!provincesData) {\n        return \"Loading...\"\n    };\n\n    const modifiedActiveData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active, key }) => [active, key])\n            .filter((data) => data[0] > 30000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const activeDataSum = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b);\n\n    const modifiedIncidentRateData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ incidentRate, key }) => [incidentRate, key])\n            .filter((data) => data[0] > 12000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const numberOfProvinces = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat().length;\n\n    const incidentRateAvarage = Math.floor((provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b)) / numberOfProvinces);\n\n    const toggleActiveIncidentRateCard = () => {\n        if (isCard === \"active\") {\n            setIsCard(\"incidentRate\")\n        } else {\n            setIsCard(\"active\")\n        }\n    }\n\n    let { admin0Style, admin2Style } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isCard === \"active\" ?\n        onStyle :\n        {}\n    admin2Style = isCard === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={\"active-card-container\"}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={activeCardExpand ? { width: \"95%\", height: \"93%\" } : {}}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} style={isCard === \"incidentRate\" ? { padding: \"0.85em 0 0 0\" } : {}} >\n                    {\n                        isCard === \"active\"\n                            ? <span className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                    </span>\n                            : isCard === \"incidentRate\"\n                                ? <span className={\"card-header-text\"}>Global Incident Rate<span id=\"percentage\">(per 100,000 people)</span></span>\n                                : null\n                    }\n\n\n                    {\n                        isCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num active-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                    }\n                </div>\n            </div>\n            {\n                !activeCardExpand\n                    ? <div className={\"arrow-toggler\"}>\n                        <span className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowLeft}</span>\n                        <span className={\"card-toggler-text\"}>\n                            {\n                                isCard === \"active\"\n                                    ? \"Active Cases\"\n                                    : isCard === \"incidentRate\"\n                                        ? \"Incident Rate\"\n                                        : null\n                            }\n                        </span>\n                        <span className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowRight}</span>\n                    </div>\n                    : <div className={\"card-button-toggler-wrapper\"}>\n                        <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"active\")}>Active Cases</div>\n                        <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"incidentRate\")}>Incident Rate</div>\n                    </div>\n            }\n\n\n            <div className={\"active-card-container-tablet\"}>\n                <div className={\"card-header\"} style={isCard === \"incidentRate\" ? { padding: \"0.85em 0 0 0\" } : {}} >\n                    {\n                        isCard === \"active\"\n                            ? <span className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                    </span>\n                            : isCard === \"incidentRate\"\n                                ? <span className={\"card-header-text\"}>Global Incident Rate<span id=\"percentage\">(per 100,000 people)</span></span>\n                                : null\n                    }\n\n\n                    {\n                        isCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num active-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                    }\n                </div>\n            </div>\n            <div className={\"card-button-toggler-wrapper-tablet\"}>\n                <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"active\")}>Active Cases</div>\n                <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"incidentRate\")}>Incident Rate</div>\n            </div>\n        </Fragment>\n    )\n}\nexport default ActiveIncidentRateCard;","import React, { Fragment } from \"react\";\n\nimport \"../css/InfoPanel.scss\";\n\nconst InfoPanel = ({ globalData, countriesData, provincesData, formatNumber, classes, dataPanelExpand }) => {\n\n    if (!globalData[0]) {\n        return \"Loading...\"\n    }\n\n    const filteredCountries = countriesData.filter(({ latestData }) => latestData.confirmed > 0);\n    const filteredProvinces = provincesData.flat().filter(({ confirmed }) => confirmed > 0);\n\n    // get formatted time for lastUpdate\n    const getFormattedDate = () => {\n        let lastUpdate = String(new Date(globalData[0].lastUpdate));\n        let month = String(lastUpdate.slice(4, 7));\n        switch (month) {\n            case \"Jan\":\n                month = \"1\"\n                break;\n            case \"Feb\":\n                month = \"2\";\n                break;\n            case \"Mar\":\n                month = \"3\";\n                break;\n            case \"Apr\":\n                month = \"4\";\n                break;\n            case \"May\":\n                month = \"5\";\n                break;\n            case \"Jun\":\n                month = \"6\";\n                break;\n            case \"Jul\":\n                month = \"7\";\n                break;\n            case \"Aug\":\n                month = \"8\";\n                break;\n            case \"Sep\":\n                month = \"9\";\n                break;\n            case \"Oct\":\n                month = \"10\";\n                break;\n            case \"Nov\":\n                month = \"11\";\n                break;\n            case \"Dec\":\n                month = \"12\";\n                break;\n            default:\n                month = \"\";\n        };\n\n        let day = String(lastUpdate.slice(8, 10));\n\n        let year = String(lastUpdate.slice(11, 15));\n\n        let hour = lastUpdate.slice(16, 18);\n        let ampm = \"\"\n        if (hour > 12) {\n            hour -= 12\n            ampm = \"PM\"\n        } else {\n            ampm = \"AM\"\n        }\n        let minute = String(lastUpdate.slice(19, 21))\n        return month + \"/\" + day + \"/\" + year + \",\" + hour + \":\" + minute + \" \" + ampm\n    };\n\n    return (\n        <Fragment>\n            {\n                !dataPanelExpand\n                    ? <Fragment>\n                        <table id=\"table-laptop\">\n                            <tr>\n                                <td colspan=\"2\">\n                                    <span className={\"infected-panel-header\"}>Today's Global Cases</span>\n                                    <h2 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h2>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Deaths</span>\n                                    <h3 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h3>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Recovered</span>\n                                    <h3 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h3>\n                                </td>\n                            </tr>\n                        </table>\n                        <div id=\"country-panel\">\n                            <span className={\"panel-header\"}>Countries/Provinces</span>\n                            <h3 className={\"panel-number\"}>\n                                {filteredCountries.length}/{filteredProvinces.length}\n                            </h3>\n                        </div>\n                        <div id=\"last-update-panel\">\n                            <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                            <h3 className={\"panel-number\"}>\n                                {getFormattedDate(globalData[0].lastUpdate)}\n                            </h3>\n                        </div>\n                    </Fragment>\n                    : <Fragment>\n                        <table id=\"table-expand\">\n                            <tr>\n                                <td colspan=\"2\">\n                                    <span className={\"infected-panel-header\"}>Today's Global Cases</span>\n                                    <h1 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h1>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Deaths</span>\n                                    <h2 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Recovered</span>\n                                    <h2 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h2>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Countries/Provinces</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {filteredCountries.length}/{filteredProvinces.length}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {getFormattedDate(globalData[0].lastUpdate)}\n                                    </h2>\n                                </td>\n                            </tr>\n                        </table>\n                    </Fragment>\n            }\n\n            <table id=\"table-tablet\">\n                <tr>\n                    <td colspan=\"2\">\n                        <span className={\"infected-panel-header\"}>Today's Global Cases</span>\n                        <h1 className={\"infected-panel-number\"}>\n                            {formatNumber(globalData[0].newConfirmed)}\n                        </h1>\n                    </td>\n\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Deaths</span>\n                        <h2 className={\"panel-number deaths-number\"}>\n                            {formatNumber(globalData[0].newDeaths)}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Recovered</span>\n                        <h2 className={\"panel-number recovered-number\"}>\n                            {formatNumber(globalData[0].newRecovered)}\n                        </h2>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Countries/Provinces</span>\n                        <h2 className={\"panel-number country-number\"}>\n                            {filteredCountries.length}/{filteredProvinces.length}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                        <h2 className={\"panel-number\"}>\n                            {getFormattedDate(globalData[0].lastUpdate)}\n                        </h2>\n                    </td>\n                </tr>\n            </table>\n        </Fragment>\n    )\n};\n\nexport default InfoPanel;","import React, { useState, useEffect } from \"react\";\n\n//Components \nimport CountryPicker from \"./Components/CountryPicker\";\nimport GlobalCharts from \"./Components/Charts/GlobalCharts\";\nimport CountryCharts from \"./Components/Charts/CountryCharts\";\nimport GlobalTodayCharts from \"./Components/Charts/GlobalTodayCharts\";\nimport Maps from \"./Components/Maps/Maps\";\nimport InfectedCard from \"./Components/Cards/InfectedCard/InfectedCard\";\nimport DeathsRecoveredCard from \"./Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard\";\nimport ActiveIncidentRateCard from \"./Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard\";\nimport InfoPanel from \"./Components/InfoPanel\"\n\nimport \"./css/App.scss\";\n\nimport { fetchProvinceData, fetchCountriesData, fetchGlobaldata, fetchCountriesYearlyData } from \"./api\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithubSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faTumblrSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst github = < FontAwesomeIcon icon={faGithubSquare} />\nconst twitter = < FontAwesomeIcon icon={faTwitterSquare} />\nconst tumblr = < FontAwesomeIcon icon={faTumblrSquare} />\nconst arrowLeft = < FontAwesomeIcon icon={faCaretLeft} />\nconst arrowRight = < FontAwesomeIcon icon={faCaretRight} />\nconst expandIcon = < FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst shrinkIcon = < FontAwesomeIcon icon={faCompressArrowsAlt} />\n\nconst App = () => {\n\n    const [globalData, setGlobaldata] = useState({})\n    const [country, setCountry] = useState(\"select a country\");\n    const [countriesData, setCountriesData] = useState({});\n    const [provincesData, setProvincesData] = useState();\n    const [countriesYearlyData, setCountriesYearlyData] = useState({});\n\n    const [infectedCardExpand, setInfectedCardExpand] = useState(false);\n    const [deathsdCardExpand, setDeathsCardExpand] = useState(false);\n    const [activeCardExpand, setActiveCardExpand] = useState(false);\n    const [mapExpand, setMapExpand] = useState(false);\n    const [dataPanelExpand, setDataPanelExpand] = useState(false);\n    const [globalDailyChartExpand, setGlobalDailyChartExpand] = useState(false);\n    const [globalChartExpand, setGlobalChartExpand] = useState(false);\n    const [countryChartExpand, setCountryChartExpand] = useState(false);\n\n    const [isPanelHover, setIsPanelHover] = useState(false);\n    const [isTodayChartHover, setIsTodayChartHover] = useState(false);\n    const [isGlobalChartHover, setIsGlobalChartHover] = useState(false);\n\n    const [isLoad, setIsLoad] = useState(true)\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setProvincesData(await fetchProvinceData());\n            setCountriesData(await fetchCountriesData());\n            setGlobaldata(await fetchGlobaldata());\n        }\n        fetchAPI();\n    }, [setCountriesData]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 2000)\n    })\n\n    const loader = <Loader\n        type=\"Bars\"\n        color=\"#3500D3\"\n        height={100}\n        width={100}\n        timeout={2000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={\"loader-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    }\n\n    //country picker\n    const toggleCountry = async (country) => {\n        setCountry(country);\n        setCountriesYearlyData(await fetchCountriesYearlyData(country));\n    };\n\n    // separate number with separator\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //format for chart d\n    const option = {\n        maintainAspectRatio: false,\n        legend: { display: false },\n        tooltips: {\n            xPadding: 15,\n            yPadding: 15,\n            yAlign: \"bottom\",\n            callbacks: {\n                title: (items, data) => data['labels'][items[0]['index']],\n                label: (item, data) => formatNumber(data['datasets'][0]['data'][item['index']])\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                },\n                ticks: {\n                    maxTicksLimit: 6,\n                    fontColor: \"#f5f5f5\",\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    maxTicksLimit: 8,\n                    callback: function numFormatter(num) {\n                        if (num > 999 && num < 1000000) {\n                            return (num / 1000).toFixed(1) + 'K';\n                        } else if (num >= 1000000) {\n                            return (num / 1000000).toFixed(1) + 'M';\n                        } else if (num < 900) {\n                            return num;\n                        }\n                    },\n                    fontColor: \"#f5f5f5\",\n                },\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                }\n            }]\n        }\n    };\n\n    //toggle expand and hide\n    const classes =\n        infectedCardExpand\n            ? [\"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n            : deathsdCardExpand\n                ? [\"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                : activeCardExpand\n                    ? [\"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                    : mapExpand\n                        ? [\"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                        : dataPanelExpand\n                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\"]\n                            : globalDailyChartExpand\n                                ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\"]\n                                : globalChartExpand\n                                    ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\"]\n                                    : countryChartExpand\n                                        ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\"]\n                                        : [];\n\n    return (\n        <div id=\"app\">\n            <header>\n                <img src=\"https://www.tiabc.ca/wp-content/uploads/home/COVID%E2%80%9419.png\" alt=\"covid-19 logo\" />\n                <div id=\"header-title\">\n                    <h1>World COVID-19 Dashboard</h1>\n                    <span id=\"header-border\"></span>\n                    <div id=\"header-footer\">\n                        <span>Desinged and Coded</span>\n                        <span>by Shuto.S</span>\n                    </div>\n                </div>\n                <div id=\"nav\">\n                    <div>\n                        <a src=\"https://github.com/Shuto46490802\" target=\"_blank\">{github}</a>\n                    </div>\n                    <div>\n                        <a src=\"https://twitter.com/\" target=\"_blank\" >{twitter}</a>\n                    </div>\n                    <div>\n                        <a src=\"https://www.tumblr.com/\" target=\"_blank\" >{tumblr}</a>\n                    </div>\n                </div>\n            </header>\n            <main id=\"laptop\">\n                <div className={\"row\"}>\n                    <div\n                        id={\"infected-card\"}\n                        className={classes[0]}\n                        style={infectedCardExpand ? { width: \"100%\", height: \"93vh\" } : {}}\n                    >\n                        <InfectedCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            infectedCardExpand={infectedCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            formatNumber={formatNumber}\n                        />\n                    </div>\n                    <div\n                        id=\"map\"\n                        className={classes[3]}\n                        style={mapExpand ? { width: \"98%\", height: \"89vh\" } : { width: \"770px\",  }}\n                    >\n                        <Maps\n                            classes={classes}\n                            provincesData={provincesData}\n                            setMapExpand={setMapExpand}\n                            mapExpand={mapExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                    <div\n                        className={`deaths-active-card ${classes[1]}`}\n                        style={deathsdCardExpand ? { width: \"100%\", height: \"93vh\" } : {}}\n                    >\n                        <DeathsRecoveredCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            classes={classes}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            deathsdCardExpand={deathsdCardExpand}\n                            setDeathsCardExpand={setDeathsCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                        />\n                    </div>\n                    <div\n                        className={`deaths-active-card ${classes[2]}`}\n                        style={activeCardExpand ? { width: \"100%\", height: \"93vh\" } : {}}\n                    >\n                        <ActiveIncidentRateCard\n                            provincesData={provincesData}\n                            classes={classes}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            activeCardExpand={activeCardExpand}\n                            setActiveCardExpand={setActiveCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                        />\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div\n                        id=\"info-panel\"\n                        className={classes[4]}\n                        onMouseEnter={() => setIsPanelHover(true)}\n                        onMouseLeave={() => setIsPanelHover(false)}\n                        style={dataPanelExpand ? { width: \"95%\", height: \"91vh\" } : {}}\n                    >\n                        {\n                            isPanelHover\n                                ? !dataPanelExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setDataPanelExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setDataPanelExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <InfoPanel\n                            globalData={globalData}\n                            countriesData={countriesData}\n                            provincesData={provincesData}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            dataPanelExpand={dataPanelExpand}\n                        />\n                    </div>\n                    <div\n                        id=\"country-picker-chart\"\n                        className={classes[5]}\n                        onMouseEnter={() => setIsTodayChartHover(true)}\n                        onMouseLeave={() => setIsTodayChartHover(false)}\n                        style={globalDailyChartExpand ? { width: \"95%\", height: \"87vh\", top: \"30px\" } : { }}\n                    >\n                        {\n                            isTodayChartHover\n                                ? !globalDailyChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalDailyChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalDailyChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <CountryPicker\n                            classes={classes}\n                            toggleCountry={toggleCountry}\n                        />\n                        {\n                            country === \"select a country\"\n                                ? <GlobalTodayCharts\n                                    globalData={globalData}\n                                    arrowRight={arrowRight}\n                                    arrowLeft={arrowLeft}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                />\n                                : <CountryCharts\n                                    countriesYearlyData={countriesYearlyData}\n                                    arrowLeft={arrowLeft}\n                                    arrowRight={arrowRight}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                />\n                        }\n                    </div>\n                    <div\n                        id=\"global-chart\"\n                        className={classes[6]}\n                        onMouseEnter={() => setIsGlobalChartHover(true)}\n                        onMouseLeave={() => setIsGlobalChartHover(false)}\n                        style={globalChartExpand ? { width: \"95%\", height: \"87vh\", top: \"30px\" } : {}}\n                    >\n                        {\n                            isGlobalChartHover\n                                ? !globalChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <GlobalCharts\n                            globalData={globalData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            option={option}\n                            classes={classes}\n                            globalChartExpand={globalChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                </div>\n            </main>\n\n            <main id=\"tablet\">\n                <div id=\"map-tablet\">\n                    <Maps\n                        classes={classes}\n                        provincesData={provincesData}\n                        setMapExpand={setMapExpand}\n                        mapExpand={mapExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                    />\n                </div>\n                <div id={\"infected-card-tablet\"}>\n                    <InfectedCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        provincesData={provincesData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        infectedCardExpand={infectedCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        setInfectedCardExpand={setInfectedCardExpand}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n                <div className={\"deaths-active-card-tablet\"}>\n                    <DeathsRecoveredCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        deathsdCardExpand={deathsdCardExpand}\n                        setDeathsCardExpand={setDeathsCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n                <div className={\"deaths-active-card-tablet\"}>\n                    <ActiveIncidentRateCard\n                        provincesData={provincesData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        activeCardExpand={activeCardExpand}\n                        setActiveCardExpand={setActiveCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n                <div id=\"country-picker-chart-tablet\">\n                    <CountryPicker\n                        classes={classes}\n                        toggleCountry={toggleCountry}\n                    />\n                    {\n                        country === \"select a country\"\n                            ? <GlobalTodayCharts\n                                globalData={globalData}\n                                arrowRight={arrowRight}\n                                arrowLeft={arrowLeft}\n                                option={option}\n                                classes={classes}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                            />\n                            : <CountryCharts\n                                countriesYearlyData={countriesYearlyData}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                option={option}\n                                classes={classes}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                            />\n                    }\n                </div>\n                <div id=\"global-chart-tablet\">\n                    <GlobalCharts\n                        globalData={globalData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        option={option}\n                        classes={classes}\n                        globalChartExpand={globalChartExpand}\n                        setGlobalChartExpand={setGlobalChartExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                    />\n                </div>\n                <div id=\"info-panel-tablet\">\n                    <InfoPanel\n                        globalData={globalData}\n                        countriesData={countriesData}\n                        provincesData={provincesData}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n            </main>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
{"version":3,"sources":["Components/Card.js","api/index.js","Components/CountryPicker.js","Components/Charts.js","Components/Maps/CamulativeMap/CamulativeMap.js","Components/Maps/ActiveMap/ActiveMap.js","Components/Maps/Maps.js","App.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","id","Grid","container","spacing","justify","item","component","Card","xs","md","className","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","toggleURL","axios","get","fetchDailyData","map","totalConfirmed","date","reportDate","total","fetchCountry","countries","name","fetchProvinceData","promises","active","province","provinceState","lat","long","countryRegion","getData","Promise","all","promise","CountryPicker","props","useState","setCountries","useEffect","fetchAPI","FormControl","NativeSelect","onChange","e","toggleCountry","target","i","Charts","dailyData","setDailyData","globalLineChart","length","labels","datasets","label","fill","lineTension","borderColor","backgroundColor","pointRadius","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","barChart","options","legend","display","title","text","CamulativeMap","toggleIconSize","iconSize","L","Icon","iconUrl","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","noProvince","Marker","position","icon","Popup","formatNumber","provinces","usProvinces","ActiveMap","Maps","setcountries","filter","console","log","inputNumber","formetedNumber","Number","toFixed","replace","splitArray","split","isMap","src","App","setData","setCountry","setIsMap","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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EAAA,sEACCsB,QAAQC,IAAIT,EAAST,IAAT,uCAAa,WAAOmB,GAAP,SAAAxB,EAAA,+EAC3BwB,GAD2B,2CAAb,wDADb,mFApBa,8DAyBhBH,IAzBgB,mFAAH,qDA4BxBV,EACF,CAAC,cACG,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,QACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,sBACA,mBACA,aAEA,UACA,OACA,SACA,UACA,UACA,mBACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,kBACA,SACA,OACA,WACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,SACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,SACA,cACA,QACA,UACA,aACA,WACA,WACA,cACA,OACA,sBACA,UACA,SACA,KACA,SACA,UACA,uBACA,iBACA,UACA,aACA,UACA,YACA,UACA,qBACA,QACA,SACA,YCzOOc,EA5BO,SAACC,GAAW,IAAD,EAEGC,mBAAS,IAFZ,mBAExBhB,EAFwB,KAEbiB,EAFa,KAY/B,OARAC,qBAAU,YA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","file":"static/js/main.20c04937.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\n\nimport \"../css/Card.css\";\n\nconst Cards = ( {data : {confirmed, recovered, deaths, lastUpdate}} ) => {\n\n    if(!confirmed){\n        return \"Loading ...\"\n    };\n\n  return(\n    <div id=\"card-wrapper\">\n      <Grid container spacing={3} justify=\"center\" >\n          <Grid item component={Card} xs={10} md={3} className={\"card\"}>\n              <CardContent className=\"card-content\">\n                  <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                  <Typography variant=\"h5\">\n                    <CountUp start={0} end={confirmed.value} duration={2.75} separator={\",\"} />\n                  </Typography>\n                  <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                  <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n              </CardContent>\n          </Grid>\n          <Grid item component={Card} xs={10} md={3} className={\"card\"}>\n              <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                  <Typography variant=\"h5\">\n                    <CountUp start={0} end={recovered.value} duration={2.75} separator={\",\"} />\n                  </Typography>\n                  <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                  <Typography variant=\"body2\">Number of  recoveries from COVID-19</Typography>\n              </CardContent>\n          </Grid>\n          <Grid item component={Card} xs={10} md={3} className={\"card\"}>\n              <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                  <Typography variant=\"h5\">\n                    <CountUp start={0} end={deaths.value} duration={2.75} separator={\",\"} />\n                  </Typography>\n                  <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                  <Typography variant=\"body2\">Number of deths caused by COVID-19</Typography>\n              </CardContent>\n          </Grid>\n      </Grid>\n    </div>\n  )\n};\n\nexport default Cards;","import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n\n    let toggleURL = url\n    if (country === \"Global\") {\n        toggleURL = url;\n    }\n    if (country && country !== \"Global\") {\n        toggleURL = (`${url}/countries/${country}`);\n    };\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(toggleURL);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n    }\n};\n\nexport const fetchDailyData = async () => {\n\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        return data.map((data) => ({\n            confirmed: data.totalConfirmed,\n            date: data.reportDate,\n            deaths: data.deaths.total\n        }))\n    } catch (error) {\n    }\n};\n\nexport const fetchCountry = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n\n    } catch (error) {\n\n    }\n};\n\n\n\nexport const fetchProvinceData = async () => {\n\n    const promises = countries.map(async (country) => {\n        try {\n            const { data } = await axios.get(`${url}/countries/${country}/confirmed`);\n\n            return data.map((data) => ({\n                confirmed: data.confirmed,\n                deaths: data.deaths,\n                recovered: data.recovered,\n                active: data.active,\n                province: data.provinceState,\n                lat: data.lat,\n                long: data.long,\n                country: data.countryRegion\n            }));\n        } catch (error) {\n        }\n    });\n\n    const getData = async () => {\n        return await Promise.all(promises.map(async (promise) => {\n            return promise\n        }))\n    }\n    return await getData();\n};\n\nconst countries =\n    [\"Afghanistan\",\n        \"Albania\",\n        \"Algeria\",\n        \"Andorra\",\n        \"Angola\",\n        \"Antigua and Barbuda\",\n        \"Argentina\",\n        \"Armenia\",\n        \"Australia\",\n        \"Austria\",\n        \"Azerbaijan\",\n        \"Bahamas\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Barbados\",\n        \"Belarus\",\n        \"Belgium\",\n        \"Belize\",\n        \"Benin\",\n        \"Bhutan\",\n        \"Bolivia\",\n        \"Bosnia and Herzegovina\",\n        \"Botswana\",\n        \"Brazil\",\n        \"Brunei\",\n        \"Bulgaria\",\n        \"Burkina Faso\",\n        \"Burma\",\n        \"Burundi\",\n        \"Cabo Verde\",\n        \"Cambodia\",\n        \"Cameroon\",\n        \"Canada\",\n        \"Central African Republic\",\n        \"Chad\",\n        \"Chile\",\n        \"China\",\n        \"Colombia\",\n        \"Comoros\",\n        \"Congo (Brazzaville)\",\n        \"Congo (Kinshasa)\",\n        \"Costa Rica\",\n        // \"Cote d'Ivoire\",\n        \"Croatia\",\n        \"Cuba\",\n        \"Cyprus\",\n        \"Czechia\",\n        \"Denmark\",\n        \"Diamond Princess\",\n        \"Djibouti\",\n        \"Dominica\",\n        \"Dominican Republic\",\n        \"Ecuador\",\n        \"Egypt\",\n        \"El Salvador\",\n        \"Equatorial Guinea\",\n        \"Eritrea\",\n        \"Estonia\",\n        \"Eswatini\",\n        \"Ethiopia\",\n        \"Fiji\",\n        \"Finland\",\n        \"France\",\n        \"Gabon\", \n        \"Gambia\",\n        \"Georgia\",\n        \"Germany\",\n        \"Ghana\",\n        \"Greece\",\n        \"Grenada\",\n        \"Guatemala\",\n        \"Guinea\",\n        \"Guinea-Bissau\",\n        \"Guyana\",\n        \"Haiti\",\n        \"Holy See\",\n        \"Honduras\",\n        \"Hungary\",\n        \"Iceland\",\n        \"India\",\n        \"Indonesia\",\n        \"Iran\",\n        \"Iraq\",\n        \"Ireland\",\n        \"Israel\",\n        \"Italy\",\n        \"Jamaica\",\n        \"Japan\",\n        \"Jordan\",\n        \"Kazakhstan\",\n        \"Kenya\",\n        \"South Korea\",\n        \"Kosovo\",\n        \"Kuwait\",\n        \"Kyrgyzstan\",\n        \"Laos\",\n        \"Latvia\",\n        \"Lebanon\",\n        \"Lesotho\",\n        \"Liberia\",\n        \"Libya\",\n        \"Liechtenstein\",\n        \"Lithuania\",\n        \"Luxembourg\",\n        \"MS Zaandam\",\n        \"Madagascar\",\n        \"Malawi\",\n        \"Malaysia\",\n        \"Maldives\",\n        \"Mali\",\n        \"Malta\",\n        \"Marshall Islands\",\n        \"Mauritania\",\n        \"Mauritius\",\n        \"Mexico\",\n        \"Moldova\",\n        \"Monaco\",\n        \"Mongolia\",\n        \"Montenegro\",\n        \"Morocco\",\n        \"Mozambique\",\n        \"Namibia\",\n        \"Nepal\",\n        \"Netherlands\",\n        \"New Zealand\",\n        \"Nicaragua\",\n        \"Niger\",\n        \"Nigeria\",\n        \"North Macedonia\",\n        \"Norway\",\n        \"Oman\",\n        \"Pakistan\",\n        \"Panama\",\n        \"Papua New Guinea\",\n        \"Paraguay\",\n        \"Peru\",\n        \"Philippines\",\n        \"Poland\",\n        \"Portugal\",\n        \"Qatar\",\n        \"Romania\",\n        \"Russia\",\n        \"Rwanda\",\n        \"Saint Kitts and Nevis\",\n        \"Saint Lucia\",\n        \"Saint Vincent and the Grenadines\",\n        \"Samoa\",\n        \"San Marino\",\n        \"Sao Tome and Principe\",\n        \"Saudi Arabia\",\n        \"Senegal\",\n        \"Serbia\",\n        \"Seychelles\",\n        \"Sierra Leone\",\n        \"Singapore\",\n        \"Slovakia\",\n        \"Slovenia\",\n        \"Solomon Islands\",\n        \"Somalia\",\n        \"South Africa\",\n        \"South Sudan\",\n        \"Spain\",\n        \"Sri Lanka\",\n        \"Sudan\",\n        \"Suriname\",\n        \"Sweden\",\n        \"Switzerland\",\n        \"Syria\",\n        \"Taiwan*\",\n        \"Tajikistan\",\n        \"Tanzania\",\n        \"Thailand\",\n        \"Timor-Leste\",\n        \"Togo\",\n        \"Trinidad and Tobago\",\n        \"Tunisia\",\n        \"Turkey\",\n        \"US\",\n        \"Uganda\",\n        \"Ukraine\",\n        \"United Arab Emirates\",\n        \"United Kingdom\",\n        \"Uruguay\",\n        \"Uzbekistan\",\n        \"Vanuatu\",\n        \"Venezuela\",\n        \"Vietnam\",\n        \"West Bank and Gaza\",\n        \"Yemen\",\n        \"Zambia\",\n        \"Zimbabwe\"]\n","import React, { useState, useEffect } from \"react\";\n\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport { fetchCountry, fetchProvinceData } from \"../api\";\n\nconst CountryPicker = (props) => {\n\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountry());\n    }\n    fetchAPI();\n\n  }, [setCountries]);\n\n  return (\n    <div>\n      <FormControl className=\"form\">\n        <NativeSelect onChange={(e) => { props.toggleCountry(e.target.value) }}>\n          <option value=\"Global\">Global</option>\n          {\n            countries.map((country, i) =>\n              <option key={i} value={country}>{country}</option>\n            )\n          }\n        </NativeSelect>\n      </FormControl>\n    </div>\n  )\n};\n\nexport default CountryPicker;","import React, { useState, useEffect } from \"react\";\n\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from \"../api\";\n\nimport \"../css/Charts.css\"\n\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }\n    fetchAPI();\n  }, []);\n\n  if (!confirmed) {\n    return \"Loading...\"\n  };\n\n  const globalLineChart = (\n    dailyData.length !== 0\n      ? <Line\n        data={{\n          labels: dailyData.map(({ date }) => date),\n          datasets: [\n            {\n              data: dailyData.map(({ confirmed }) => confirmed),\n              label: \"Infected\",\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(0, 0, 255, 1)\",\n              backgroundColor: \"rgba(154, 154, 228, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 0, 255, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 0, 255, 1)\",\n              pointHoverBorderColor: \"rgba(0, 0, 255, 1)\"\n            },\n            {\n              data: dailyData.map(({ deaths }) => deaths),\n              label: \"Deaths\",\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(255, 0, 0, 1)\",\n              backgroundColor: \"rgba(228, 154, 154, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(255, 0, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n              pointHoverBorderColor: \"rgba(255, 0, 0, 1)\"\n            }]\n        }}\n      />\n      : null\n  );\n\n  const barChart = (\n    confirmed.length !== 0\n      ? <Bar\n        data={{\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n          datasets: [{\n            data: [confirmed.value, recovered.value, deaths.value],\n            backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"]\n          }]\n        }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `Current state in ${country}` }\n        }}\n      />\n      : null\n  );\n\n  return (\n    <div className=\"chart\">\n      {\n        country && country !== \"Global\"\n          ? barChart\n          : globalLineChart\n      }\n    </div>\n  )\n};\n\nexport default Charts;","import React, { useState, useEffect } from \"react\";\nimport \"./CamulativeMap.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = (props) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <div id=\"camulative-map-wrapper\">\n      <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {\n          props.noProvince.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup>\n                <h3>{data.country}</h3>\n                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        }\n        {\n          props.provinces.map((data) =>\n            data.map((data, i) =>\n              <Marker\n                key={i}\n                position={[data.lat, data.long]}\n                icon={toggleIconSize(data.confirmed)}\n              >\n                <Popup position={[data.lat, data.long]}>\n                  <h2>{data.province}, {data.country}</h2>\n                  <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                  <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                  <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                </Popup>\n              </Marker>\n            )\n          )\n        }\n        {\n          props.usProvinces.map((data) =>\n            data.map((data, i) =>\n              <Marker\n                key={i}\n                position={[data.lat, data.long]}\n                icon={toggleIconSize(data.confirmed)}\n              >\n                <Popup position={[data.lat, data.long]}>\n                  <h2>{data.province}, {data.country}</h2>\n                  <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                  <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                  <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                </Popup>\n              </Marker>\n            )\n          )\n        }\n      </MapContainer>\n    </div>\n  )\n};\n\nexport default CamulativeMap;","import React from \"react\";\nimport \"./ActiveMap.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst ActiveMap = (props) => {\n\n    const toggleIconSize = (active) => {\n        let iconSize = [];\n    \n        if (active > 700000) {\n          iconSize = [20, 20]\n        } else if (active > 500000) {\n          iconSize = [15, 15]\n        } else if (active > 300000) {\n          iconSize = [10, 10]\n        } else {\n          iconSize = [5, 5]\n        }\n        return new L.Icon({\n          iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Location_dot_orange.svg/1024px-Location_dot_orange.svg.png\",\n          iconSize: iconSize\n        });\n      };\n\n    return (\n        <div id=\"active-map-wrapper\">\n            <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    props.noProvince.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.active)}\n                        >\n                            <Popup>\n                                <h3>{data.country}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active : <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                }\n                {\n                    props.provinces.map((data) =>\n                        data.map((data, i) =>\n                            <Marker\n                                key={i}\n                                position={[data.lat, data.long]}\n                                icon={toggleIconSize(data.active)}\n                            >\n                                <Popup position={[data.lat, data.long]}>\n                                    <h2>{data.province}, {data.country}</h2>\n                                    <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                    <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                    <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                    <p>Active : <strong>{props.formatNumber(data.active)}</strong></p>\n                                </Popup>\n                            </Marker>\n                        )\n                    )\n                }\n                {\n                    props.usProvinces.map((data) =>\n                        data.map((data, i) =>\n                            <Marker\n                                key={i}\n                                position={[data.lat, data.long]}\n                                icon={toggleIconSize(data.active)}\n                            >\n                                <Popup position={[data.lat, data.long]}>\n                                    <h2>{data.province}, {data.country}</h2>\n                                    <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                    <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                    <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                    <p>Active : <strong>{props.formatNumber(data.active)}</strong></p>\n                                </Popup>\n                            </Marker>\n                        )\n                    )\n                }\n            </MapContainer>\n        </div>\n    )\n}\n\nexport default ActiveMap;","import React, { useEffect, useState } from \"react\";\n\n//components\nimport CamulativeMap from \"./CamulativeMap/CamulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\n\nimport { fetchProvinceData } from \"../../api\"\n\nconst Maps = (props) => {\n\n    const [countries, setcountries] = useState();\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setcountries(await fetchProvinceData());\n        }\n        fetchAPI();\n    }, [setcountries]);\n\n    //check if data has been asinged to countries\n    if (!countries) {\n        return \"Loading\"\n    };\n\n    //data from country without province\n    const noProvince = countries\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    console.log(noProvince)\n\n    //data from countries with provinces\n    const provinces = countries\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n\n    //data from US    \n    const usProvinces = countries\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    return (\n        <div>\n            {\n                props.isMap === \"calmulative\"\n                    ? <CamulativeMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                    : <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n            }\n        </div>\n    )\n}\n\n\n\nexport default Maps;","import React, { useState, useEffect } from \"react\";\n\n//Components \nimport Cards from \"./Components/Card\";\nimport CountryPicker from \"./Components/CountryPicker\";\nimport Charts from \"./Components/Charts\";\nimport Maps from \"./Components/Maps/Maps\";\n\nimport \"./css/App.css\";\n\nimport { fetchData } from \"./api\";\n\nconst icon = <img src=\"https://img.icons8.com/dusk/100/000000/coronavirus.png\" />;\n\nconst App = () => {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState(\"\");\n  const [isMap, setIsMap] = useState(\"calmulative\");\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setData(await fetchData());\n    }\n    fetchAPI();\n  }, []);\n\n  const toggleCountry = async (country) => {\n    setData(await fetchData(country));\n    setCountry(country);\n  };\n\n  return (\n    <div id=\"app-wrapper\" >\n      <div id=\"header\">\n        <h1>C</h1>\n        <span id=\"icon\">\n          {icon}\n        </span>\n        <h1>VID-19</h1>\n      </div>\n      <div id=\"maps-wrapper\">\n        <Maps isMap={isMap} />\n        <div id=\"map-toggler\">\n          <div className={\"toggler\"} onClick={() => { setIsMap(\"calmulative\")}}>Calmulative Cases</div>\n          <div className={\"toggler\"} onClick={() => {setIsMap(\"active\")}}>Active Cases</div>\n        </div>\n      </div>\n      <Cards data={data} />\n      <CountryPicker toggleCountry={toggleCountry} />\n      <Charts data={data} country={country} />\n    </div>\n  )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
{"version":3,"sources":["api/index.js","Components/CountryPicker/CountryPicker.js","Components/Charts/GlobalCharts.js","Components/Charts/CountryCharts.js","Components/Charts/GlobalTodayCharts.js","Components/Maps/CumulativeMap/CumulativeMap.js","Components/Maps/ActiveMap/ActiveMap.js","Components/Maps/IncidentRate/IncidentRate.js","Components/Maps/Maps.js","Components/Cards/InfectedCard/InfectedCard.js","Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js","Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js","Components/InfoPanel/InfoPanel.js","Components/PopupNavBars/PopupNavBars.js","Components/MobileButtonToggler/MobileButtonToggler.js","App.js","index.js"],"names":["fetchCountriesYearlyData","country","a","changableUrl","axios","get","data","latest_data","timeline","name","fetchGlobaldata","map","active","confirmed","date","deaths","recovered","newConfirmed","new_confirmed","newDeaths","new_deaths","newRecovered","new_recovered","lastUpdate","updated_at","fetchCountry","code","fetchCountriesData","latestData","todayData","today","fetchProvinceData","promises","countries","lat","long","countryRegion","key","combinedKey","incidentRate","getData","Promise","all","promise","CountryPicker","classes","toggleCountry","globalDailyChartExpand","isTablet","isMobile","useState","setCountries","useEffect","fetchAPI","modifiedData","filter","sort","b","console","log","className","FormControl","id","InputLabel","shrink","NativeSelect","onChange","e","target","value","selectEmpty","i","GlobalCharts","globalData","arrowLeft","arrowRight","option","globalChartExpand","setGlobalChartExpand","expandIcon","shrinkIcon","isGlobalChart","setIsGlobalChart","isHover","setIsHover","setIsLoad","setTimeout","infectedStyle","deathsStyle","recoveredStyle","reverse","infectedLineChart","length","labels","datasets","fill","lineTension","borderColor","backgroundColor","pointRadius","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","options","deathsLineChart","recoveredLineChart","onStyle","borderBottom","offStyle","onMouseEnter","onMouseLeave","onClick","style","CountryCharts","countriesYearlyData","isCountryChart","setIsCountryChart","isLoad","loader","type","color","height","width","timeout","modifiedTimeLine","label","barChart","maintainAspectRatio","legend","display","title","scales","xAxes","gridLines","zeroLineColor","ticks","maxTicksLimit","fontColor","yAxes","callback","num","toFixed","GlobalTodayCharts","isGlobalTodayChart","isInfectedActiveChart","setIsInfectedActiveChart","isDeathsRecoveredChart","setIsDeathsRecoveredChart","activeStyle","toggleInfectedActiveChart","toggleDeathsRecoveredChart","infectedBarChart","activeBarChart","recoveredBarChart","deathsBarChart","CamulativeMap","noProvince","formatNumber","usProvinces","provinces","toggleIconSize","mapExpand","iconSize","L","Icon","iconUrl","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Popup","ActiveMap","props","IncidentRate","Math","floor","Maps","provincesData","setMapExpand","isMap","setIsMap","cumulativeStyle","incidentRateStyle","inputNumber","formetedNumber","Number","replace","splitArray","split","CumulativeMap","InfectedCard","countriesData","infectedCardExpand","setInfectedCardExpand","isInfectedCard","setIsInfectedCard","admin0Style","admin2Style","todayStyle","modifiedGlobalCasesData","modifiedProvincesData","flat","modifiedTodayData","DeathsRecoveredCard","deathsdCardExpand","setDeathsCardExpand","isDeathsRecoveredCard","setIsDeathsRecoveredCard","modifiedGlobalDeathsData","modifiedGlobalRecoveredData","ActiveIncidentRateCard","activeCardExpand","setActiveCardExpand","isActiveIncidentCard","setIsActiveIncidentCard","modifiedActiveData","activeDataSum","reduce","modifiedIncidentRateData","numberOfProvinces","incidentRateAvarage","toggleActiveIncidentRateCard","InfoPanel","dataPanelExpand","filteredCountries","filteredProvinces","getFormattedDate","String","Date","month","slice","day","year","hour","ampm","colspan","navBars","faBars","dropdown","faSortDown","PopupNavBars","setIsTablet","setIsMobile","setGlobalDailyChartExpand","setDataPanelExpand","popup","setPopup","popupDataSource","setPopupDataSource","href","MobileButtonToggler","totalsStyle","mapStyle","countriesStyle","globalStyle","chartsStyle","setMobileItem","mobileItem","setIsGlobal","setIsChart","setGlobalTodayChart","mapPopup","setMapPopup","globalPopup","setGlobalPopup","chartsPopup","setChartsPopup","infectedPopup","setInfectedPopup","deathsRecoveredPopup","setDeathsRecoveredPopup","activeIncidentPopup","setActiveIncidentPopup","globalChartsPopup","setGlobalChartsPopup","dailyChartsPopup","setDailyChartsPopup","countryChartsPopup","setCountryChartsPopup","deathsRecoveredStyle","activeIncidentStyle","gloalChartsStyle","dailyChartsStyle","faCaretLeft","faCaretRight","faExpandArrowsAlt","faCompressArrowsAlt","App","setGlobaldata","setCountry","setCountriesData","setProvincesData","setCountriesYearlyData","isPanelHover","setIsPanelHover","isTodayChartHover","setIsTodayChartHover","isGlobal","isChart","tooltips","xPadding","yPadding","yAlign","callbacks","items","item","fontSize","columnClasses","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8dAKaA,EAAwB,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,yDACpB,qBAAZD,EADgC,yCAEzB,cAFyB,cAIhCE,EAJgC,2CAIoBF,GAJpB,kBAMkCG,IAAMC,IAAIF,GAN5C,2BAMxBG,KAAQA,KAAQC,EANQ,EAMRA,YAAaC,EANL,EAMKA,SAAUC,EANf,EAMeA,KANf,kBAOzB,CAAEF,cAAaC,WAAUC,SAPA,4FAAH,sDAaxBC,EAAe,uCAAG,8BAAAR,EAAA,4DACjB,kCADiB,kBAGUE,IAAMC,IAFjC,mCADiB,uBAGPC,EAHO,EAGfA,KAAQA,KAHO,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBM,OAAQN,EAAKM,OACbC,UAAWP,EAAKO,UAChBC,KAAMR,EAAKQ,KACXC,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBC,aAAcX,EAAKY,cACnBC,UAAWb,EAAKc,WAChBC,aAAcf,EAAKgB,cACnBC,WAAYjB,EAAKkB,gBAbE,yFAAH,qDAoBfC,EAAY,uCAAG,8BAAAvB,EAAA,4DACd,mCADc,kBAGaE,IAAMC,IAFjC,oCADc,uBAGJC,EAHI,EAGZA,KAAQA,KAHI,kBAKbA,EAAKK,KAAI,kBAAkC,CAC9CF,KADY,EAAGA,KAEfiB,KAFY,EAASA,KAGrBpB,KAHY,EAAeC,iBALX,yFAAH,qDAiBZoB,EAAkB,uCAAG,8BAAAzB,EAAA,4DACpB,mCADoB,kBAIOE,IAAMC,IAHjC,oCADoB,uBAIVC,EAJU,EAIlBA,KAAQA,KAJU,kBAKnBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBL,QAASK,EAAKG,KACdmB,WAAYtB,EAAKC,YACjBsB,UAAWvB,EAAKwB,WARM,yFAAH,qDAgBlBC,EAAiB,uCAAG,8BAAA7B,EAAA,6DAEvB8B,EAAWC,EAAUtB,IAAV,uCAAc,WAAOV,GAAP,iBAAAC,EAAA,+EAEAE,IAAMC,IAAN,UAzEvB,iCAyEuB,sBAA8BJ,EAA9B,eAFA,uBAEfK,EAFe,EAEfA,KAFe,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBO,UAAWP,EAAKO,UAChBE,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBJ,OAAQN,EAAKM,OACbsB,IAAK5B,EAAK4B,IACVC,KAAM7B,EAAK6B,KACXlC,QAASK,EAAK8B,cACdC,IAAK/B,EAAKgC,YACVC,aAAcjC,EAAKiC,kBAbA,yFAAd,uDAmBXC,EArBuB,+BAAAtC,EAAA,MAqBb,sBAAAA,EAAA,sEACCuC,QAAQC,IAAIV,EAASrB,IAAT,uCAAa,WAAOgC,GAAP,SAAAzC,EAAA,+EAC3ByC,GAD2B,2CAAb,wDADb,mFArBa,8DA0BhBH,IA1BgB,mFAAH,qDA6BxBP,EACF,CAAC,cACG,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,QACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,sBACA,mBACA,aACA,UACA,OACA,SACA,UACA,UACA,mBACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,kBACA,SACA,OACA,WACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,SACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,cACA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","file":"static/js/main.668c60ce.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\n//for countries charts\nexport const fetchCountriesYearlyData = async (country) => {\n    if (country === \"select a country\") {\n        return \"Loading...\"\n    }\n    var changableUrl = (`https://corona-api.com/countries/${country}`)\n    try {\n        const { data: { data: { latest_data, timeline, name } } } = await axios.get(changableUrl);\n        return { latest_data, timeline, name }\n    } catch (error) {\n    }\n}\n\n//fetch global datas\nexport const fetchGlobaldata = async () => {\n    let url = \"https://corona-api.com/timeline\"\n    try {\n        const { data: { data } } = await axios.get(url);\n        return data.map((data) => ({\n            active: data.active,\n            confirmed: data.confirmed,\n            date: data.date,\n            deaths: data.deaths,\n            recovered: data.recovered,\n            newConfirmed: data.new_confirmed,\n            newDeaths: data.new_deaths,\n            newRecovered: data.new_recovered,\n            lastUpdate: data.updated_at\n        }));\n    } catch (error) {\n    }\n}\n\n//for country picker\nexport const fetchCountry = async () => {\n    let url = \"https://corona-api.com/countries\"\n    try {\n        const { data: { data } } = await axios.get(url);\n\n        return data.map(({ name, code, latest_data }) => ({\n            name: name,\n            code: code,\n            data: latest_data\n        }))\n\n    } catch (error) {\n\n    }\n};\n\n//for country infected, deaths and recovered list \nexport const fetchCountriesData = async () => {\n    let url = \"https://corona-api.com/countries\"\n\n    try {\n        const { data: { data } } = await axios.get(url)\n        return data.map((data) => ({\n            country: data.name,\n            latestData: data.latest_data,\n            todayData: data.today\n        }))\n\n    } catch (error) {\n    }\n};\n\n//for Map\nexport const fetchProvinceData = async () => {\n\n    const promises = countries.map(async (country) => {\n        try {\n            const { data } = await axios.get(`${url}/countries/${country}/confirmed`);\n\n            return data.map((data) => ({\n                confirmed: data.confirmed,\n                deaths: data.deaths,\n                recovered: data.recovered,\n                active: data.active,\n                lat: data.lat,\n                long: data.long,\n                country: data.countryRegion,\n                key: data.combinedKey,\n                incidentRate: data.incidentRate\n            }));\n        } catch (error) {\n        }\n    });\n\n    const getData = async () => {\n        return await Promise.all(promises.map(async (promise) => {\n            return promise\n        }))\n    }\n    return await getData();\n};\n\nconst countries =\n    [\"Afghanistan\",\n        \"Albania\",\n        \"Algeria\",\n        \"Andorra\",\n        \"Angola\",\n        \"Antigua and Barbuda\",\n        \"Argentina\",\n        \"Armenia\",\n        \"Australia\",\n        \"Austria\",\n        \"Azerbaijan\",\n        \"Bahamas\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Barbados\",\n        \"Belarus\",\n        \"Belgium\",\n        \"Belize\",\n        \"Benin\",\n        \"Bhutan\",\n        \"Bolivia\",\n        \"Bosnia and Herzegovina\",\n        \"Botswana\",\n        \"Brazil\",\n        \"Brunei\",\n        \"Bulgaria\",\n        \"Burkina Faso\",\n        \"Burma\",\n        \"Burundi\",\n        \"Cabo Verde\",\n        \"Cambodia\",\n        \"Cameroon\",\n        \"Canada\",\n        \"Central African Republic\",\n        \"Chad\",\n        \"Chile\",\n        \"China\",\n        \"Colombia\",\n        \"Comoros\",\n        \"Congo (Brazzaville)\",\n        \"Congo (Kinshasa)\",\n        \"Costa Rica\",\n        \"Croatia\",\n        \"Cuba\",\n        \"Cyprus\",\n        \"Czechia\",\n        \"Denmark\",\n        \"Diamond Princess\",\n        \"Djibouti\",\n        \"Dominica\",\n        \"Dominican Republic\",\n        \"Ecuador\",\n        \"Egypt\",\n        \"El Salvador\",\n        \"Equatorial Guinea\",\n        \"Eritrea\",\n        \"Estonia\",\n        \"Eswatini\",\n        \"Ethiopia\",\n        \"Fiji\",\n        \"Finland\",\n        \"France\",\n        \"Gabon\",\n        \"Gambia\",\n        \"Georgia\",\n        \"Germany\",\n        \"Ghana\",\n        \"Greece\",\n        \"Grenada\",\n        \"Guatemala\",\n        \"Guinea\",\n        \"Guinea-Bissau\",\n        \"Guyana\",\n        \"Haiti\",\n        \"Holy See\",\n        \"Honduras\",\n        \"Hungary\",\n        \"Iceland\",\n        \"India\",\n        \"Indonesia\",\n        \"Iran\",\n        \"Iraq\",\n        \"Ireland\",\n        \"Israel\",\n        \"Italy\",\n        \"Jamaica\",\n        \"Japan\",\n        \"Jordan\",\n        \"Kazakhstan\",\n        \"Kenya\",\n        \"South Korea\",\n        \"Kosovo\",\n        \"Kuwait\",\n        \"Kyrgyzstan\",\n        \"Laos\",\n        \"Latvia\",\n        \"Lebanon\",\n        \"Lesotho\",\n        \"Liberia\",\n        \"Libya\",\n        \"Liechtenstein\",\n        \"Lithuania\",\n        \"Luxembourg\",\n        \"MS Zaandam\",\n        \"Madagascar\",\n        \"Malawi\",\n        \"Malaysia\",\n        \"Maldives\",\n        \"Mali\",\n        \"Malta\",\n        \"Marshall Islands\",\n        \"Mauritania\",\n        \"Mauritius\",\n        \"Mexico\",\n        \"Moldova\",\n        \"Monaco\",\n        \"Mongolia\",\n        \"Montenegro\",\n        \"Morocco\",\n        \"Mozambique\",\n        \"Namibia\",\n        \"Nepal\",\n        \"Netherlands\",\n        \"New Zealand\",\n        \"Nicaragua\",\n        \"Niger\",\n        \"Nigeria\",\n        \"North Macedonia\",\n        \"Norway\",\n        \"Oman\",\n        \"Pakistan\",\n        \"Panama\",\n        \"Papua New Guinea\",\n        \"Paraguay\",\n        \"Peru\",\n        \"Philippines\",\n        \"Poland\",\n        \"Portugal\",\n        \"Qatar\",\n        \"Romania\",\n        \"Russia\",\n        \"Rwanda\",\n        \"Saint Kitts and Nevis\",\n        \"Saint Lucia\",\n        \"Saint Vincent and the Grenadines\",\n        \"Samoa\",\n        \"San Marino\",\n        \"Sao Tome and Principe\",\n        \"Saudi Arabia\",\n        \"Senegal\",\n        \"Serbia\",\n        \"Seychelles\",\n        \"Sierra Leone\",\n        \"Singapore\",\n        \"Slovakia\",\n        \"Slovenia\",\n        \"Solomon Islands\",\n        \"Somalia\",\n        \"South Africa\",\n        \"South Sudan\",\n        \"Spain\",\n        \"Sri Lanka\",\n        \"Sudan\",\n        \"Suriname\",\n        \"Sweden\",\n        \"Switzerland\",\n        \"Syria\",\n        \"Taiwan\",\n        \"Tajikistan\",\n        \"Tanzania\",\n        \"Thailand\",\n        \"Timor-Leste\",\n        \"Togo\",\n        \"Trinidad and Tobago\",\n        \"Tunisia\",\n        \"Turkey\",\n        \"US\",\n        \"Uganda\",\n        \"Ukraine\",\n        \"United Arab Emirates\",\n        \"United Kingdom\",\n        \"Uruguay\",\n        \"Uzbekistan\",\n        \"Vanuatu\",\n        \"Venezuela\",\n        \"Vietnam\",\n        \"West Bank and Gaza\",\n        \"Yemen\",\n        \"Zambia\",\n        \"Zimbabwe\"]\n","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\n\nimport { fetchCountry } from \"../../api\";\n\nimport \"./CountryPicker.scss\";\n\n\nconst CountryPicker = ({ classes, toggleCountry, globalDailyChartExpand, isTablet, isMobile, country }) => {\n\n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n        console.log(country)\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div className={`country-picker-container${globalDailyChartExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n\n            {/* Tablet */}\n            <div className={`country-picker-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\" }`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n\n            {/* Mobile */}\n            <div className={`country-picker-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\" }`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option className={\"option\"}>Select A Country</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default CountryPicker;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalCharts.scss\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon, isTablet, isMobile, isGlobalChart, setIsGlobalChart }) => {\n\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  if (!globalData[0]) {\n    return \"Loading...\"\n  }\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isGlobalChart === \"infected\") {\n      setIsGlobalChart(\"deaths\")\n    } else if (isGlobalChart === \"deaths\") {\n      setIsGlobalChart(\"recovered\")\n    } else if (isGlobalChart === \"recovered\") {\n      setIsGlobalChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isGlobalChart === \"infected\") {\n      setIsGlobalChart(\"recovered\")\n    } else if (isGlobalChart === \"recovered\") {\n      setIsGlobalChart(\"deaths\")\n    } else if (isGlobalChart === \"deaths\") {\n      setIsGlobalChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { infectedStyle, deathsStyle, recoveredStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n  const offStyle = { backgroundColor: \"#777\" }\n  infectedStyle = isGlobalChart === \"infected\" ?\n    onStyle :\n    offStyle\n  deathsStyle = isGlobalChart === \"deaths\" ?\n    onStyle :\n    offStyle\n  recoveredStyle = isGlobalChart === \"recovered\" ?\n    onStyle :\n    offStyle\n\n  return (\n    <Fragment>\n      {/* Desktop */}\n      <div\n        className={`global-chart-container${globalChartExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        {\n          isHover\n            ? !globalChartExpand\n              ? <div className={\"expand-icon\"} onClick={() => setGlobalChartExpand(true)}>{expandIcon}</div>\n              : <div className={\"shrink-icon\"} onClick={() => setGlobalChartExpand(false)}>{shrinkIcon}</div>\n            : null\n        }\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Infected/Deaths/Recovered\n            </p>\n          <div className={`chart`}>\n            {\n              isGlobalChart === \"infected\"\n                ? infectedLineChart\n                : isGlobalChart === \"deaths\"\n                  ? deathsLineChart\n                  : isGlobalChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n          {\n            !globalChartExpand\n              ? <div className={\"arrow-toggler\"}>\n                <div className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</div>\n                <div className={\"toggler-text\"}>\n                  {\n                    isGlobalChart === \"infected\"\n                      ? \"Infected\"\n                      : isGlobalChart === \"deaths\"\n                        ? \"Deaths\"\n                        : isGlobalChart === \"recovered\"\n                          ? \"Recovered\"\n                          : null\n                  }\n                </div>\n                <div className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</div>\n              </div>\n              : null\n          }\n        </div>\n      </div>\n      {\n        globalChartExpand\n          ? <div className={`button-toggler-wrapper-expand`}>\n            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsGlobalChart(\"infected\")}>Infected</div>\n            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsGlobalChart(\"deaths\")}>Deaths</div>\n            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsGlobalChart(\"recovered\")}>Recovered</div>\n          </div>\n          : null\n      }\n\n      {/* Tablet */}\n      <div\n        className={`global-chart-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Daily Infected/Deaths/Recovered\n          </p>\n          <div className={`chart`}>\n            {\n              isGlobalChart === \"infected\"\n                ? infectedLineChart\n                : isGlobalChart === \"deaths\"\n                  ? deathsLineChart\n                  : isGlobalChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n        </div>\n      </div>\n      <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsGlobalChart(\"infected\")}>Infected</div>\n        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsGlobalChart(\"deaths\")}>Deaths</div>\n        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsGlobalChart(\"recovered\")}>Recovered</div>\n      </div>\n\n      {/* Mobile */}\n      <div\n        className={`global-chart-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Daily Infected/Deaths/Recovered\n            </p>\n          <div className={`chart`}>\n            {\n              isGlobalChart === \"infected\"\n                ? infectedLineChart\n                : isGlobalChart === \"deaths\"\n                  ? deathsLineChart\n                  : isGlobalChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n};\n\nexport default GlobalCharts;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalTodayCharts.scss\"\n\nconst CountryCharts = ({ countriesYearlyData: { latest_data, timeline }, arrowLeft, arrowRight, option, classes, globalDailyChartExpand, isTablet, isMobile, isCountryChart, setIsCountryChart }) => {\n\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !timeline || !latest_data) {\n        return (\n            <div className={`loader-country-chart-wrapper${classes[3]}`}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedTimeLine = timeline.map((data) => data).reverse();\n    //infected chart\n    const infectedLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ confirmed }) => confirmed),\n                            label: \"Infected\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(222, 53, 76, 1)\",\n                            backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(222, 53, 76, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n                            pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ deaths }) => deaths),\n                            label: \"Deaths\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(92, 95, 88, 1)\",\n                            backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(92, 95, 88, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n                            pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ recovered }) => recovered),\n                            label: \"Recovered\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(0, 255, 0, 1)\",\n                            backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(0, 255, 0, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n                            pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const barChart = (\n        latest_data.length !== 0\n            ? <Bar\n                data={{\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                    datasets: [{\n                        data: [latest_data.confirmed, latest_data.recovered, latest_data.deaths],\n                        backgroundColor: [\"rgba(222, 53, 76, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(92, 95, 88, 0.5)\"]\n                    }]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: { display: false },\n                    title: { display: false },\n                    scales: {\n                        xAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                maxTicksLimit: 12,\n                                fontColor: \"white\"\n                            }\n                        }],\n                        yAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                fontColor: \"white\",\n                                maxTicksLimit: 8,\n                                callback: function numFormatter(num) {\n                                    if (num > 999 && num < 1000000) {\n                                        return (num / 1000).toFixed(1) + 'K';\n                                    } else if (num >= 1000000) {\n                                        return (num / 1000000).toFixed(1) + 'M';\n                                    } else if (num < 900) {\n                                        return num;\n                                    }\n\n                                }\n                            }\n                        }\n                        ]\n                    }\n                }}\n            />\n            : null\n    );\n\n    const toggleToRight = () => {\n        if (isCountryChart === \"infected\") {\n            setIsCountryChart(\"deaths\")\n        } else if (isCountryChart === \"deaths\") {\n            setIsCountryChart(\"recovered\")\n        } else if (isCountryChart === \"recovered\") {\n            setIsCountryChart(\"infected\")\n        }\n    };\n    const toggleToLeft = () => {\n        if (isCountryChart === \"infected\") {\n            setIsCountryChart(\"recovered\")\n        } else if (isCountryChart === \"recovered\") {\n            setIsCountryChart(\"deaths\")\n        } else if (isCountryChart === \"deaths\") {\n            setIsCountryChart(\"infected\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { infectedStyle, deathsStyle, recoveredStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    const offStyle = { backgroundColor: \"#777\" };;\n    infectedStyle = isCountryChart === \"infected\" ?\n        onStyle :\n        offStyle\n    deathsStyle = isCountryChart === \"deaths\" ?\n        onStyle :\n        offStyle\n    recoveredStyle = isCountryChart === \"recovered\" ?\n        onStyle :\n        offStyle\n\n        console.log(isCountryChart)\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div className={`chart-container${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isCountryChart === \"infected\"\n                                ? infectedLineChart\n                                : isCountryChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isCountryChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n                                <span className={\"toggler-text\"}>\n                                    {\n                                        isCountryChart === \"infected\"\n                                            ? \"Infected\"\n                                            : isCountryChart === \"deaths\"\n                                                ? \"Deaths\"\n                                                : isCountryChart === \"recovered\"\n                                                    ? \"Recovered\"\n                                                    : null\n                                    }\n                                </span>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div className={`chart`} >\n                        {barChart}\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"} />\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={`button-toggler-wrapper-expand`}>\n                        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsCountryChart(\"infected\")}>Infected</div>\n                        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsCountryChart(\"deaths\")}>Deaths</div>\n                        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsCountryChart(\"recovered\")}>Recovered</div>\n                    </div>\n                    : null\n            }\n\n            {/* Tablet */}\n            <div className={`chart-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isCountryChart === \"infected\"\n                                ? infectedLineChart\n                                : isCountryChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isCountryChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`} >\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n            <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsCountryChart(\"infected\")}>Infected</div>\n                <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsCountryChart(\"deaths\")}>Deaths</div>\n                <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsCountryChart(\"recovered\")}>Recovered</div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`chart-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isCountryChart === \"infected\"\n                                ? infectedLineChart\n                                : isCountryChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isCountryChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div className={`chart bar-chart`} >\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CountryCharts","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalTodayCharts.scss\"\n\nconst GlobalTodayCharts = ({ globalData, arrowRight, arrowLeft, option, classes, globalDailyChartExpand, isTablet, isMobile, isGlobalTodayChart }) => {\n\n    const [isInfectedActiveChart, setIsInfectedActiveChart] = useState(\"infected\");\n    const [isDeathsRecoveredChart, setIsDeathsRecoveredChart] = useState(\"deaths\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={`loader-country-chart-wrapper${classes[3]}`}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedData = globalData.map((data) => data).reverse().filter(({ newConfirmed }) => newConfirmed < 3000000);\n\n    const toggleInfectedActiveChart = () => {\n        if (isInfectedActiveChart === \"infected\") {\n            setIsInfectedActiveChart(\"active\")\n        } else {\n            setIsInfectedActiveChart(\"infected\")\n        }\n    };\n\n    const toggleDeathsRecoveredChart = () => {\n        if (isDeathsRecoveredChart === \"deaths\") {\n            setIsDeathsRecoveredChart(\"recovered\")\n        } else {\n            setIsDeathsRecoveredChart(\"deaths\")\n        }\n    };\n\n    const infectedBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newConfirmed }) => newConfirmed),\n                        backgroundColor: \"red\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const activeBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ active }) => active),\n                        backgroundColor: \"rgba(241, 178, 74, 1)\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newRecovered }) => newRecovered),\n                        backgroundColor: \"#4D774E\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newDeaths }) => newDeaths),\n                        backgroundColor: \"#999\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    //toggle map togglers border bottom\n    let { infectedStyle, activeStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    const offStyle = { backgroundColor: \"#777\" };\n    infectedStyle = isInfectedActiveChart === \"infected\" ?\n        onStyle :\n        offStyle\n    activeStyle = isInfectedActiveChart === \"active\" ?\n        onStyle :\n        offStyle\n\n    let { deathsStyle, recoveredStyle } = {};\n    deathsStyle = isDeathsRecoveredChart === \"deaths\" ?\n        onStyle :\n        offStyle\n    recoveredStyle = isDeathsRecoveredChart === \"recovered\" ?\n        onStyle :\n        offStyle\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div className={`chart-container${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div\n                        className={`chart`}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <div className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowLeft}</div>\n                                <div className={\"toggler-text\"}>\n                                    {\n                                        isInfectedActiveChart === \"infected\"\n                                            ? \"Daily Infected Cases\"\n                                            : \"Daily Active Cases\"\n\n                                    }\n                                </div>\n                                <div className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowRight}</div>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Global Daily Deaths/Recovered\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowLeft}</div>\n                                <div className={\"toggler-text\"}>\n                                    {\n                                        isDeathsRecoveredChart === \"deaths\"\n                                            ? \"Daily Deaths\"\n                                            : \"Daily Recovered\"\n                                    }\n                                </div>\n                                <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowRight}</div>\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={`button-toggler-container-expand`}>\n                        <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                            <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                        </div>\n                        <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                        </div>\n                    </div>\n                    : null\n            }\n\n            {/* Tablet */}\n            <div className={`chart-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Deaths/Recovered\n                        </p>\n                    <div className={`chart`}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                </div>\n            </div>\n            <div className={`button-toggler-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                    <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                    <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                </div>\n                <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                    <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                    <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                </div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`global-chart-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isGlobalTodayChart === \"infected\"\n                            ? infectedBarChart\n                            : isGlobalTodayChart === \"active\"\n                            ? activeBarChart\n                            : isGlobalTodayChart === \"deaths\"\n                            ? deathsBarChart\n                            : isGlobalTodayChart === \"recovered\"\n                            ? recoveredBarChart\n                            : null\n                        }\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default GlobalTodayCharts;","import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces, mapExpand }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer  center={[23.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst ActiveMap = (props) => {\n\n    const toggleIconSize = (active) => {\n        let iconSize = [];\n\n        if (active > 500000) {\n            iconSize = [20, 20]\n        } else if (active > 300000) {\n            iconSize = [15, 15]\n        } else if (active > 100000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Location_dot_orange.svg/1024px-Location_dot_orange.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.confirmed)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                            <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                            <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                            <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default ActiveMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst IncidentRate = (props) => {\n\n    const toggleIconSize = (incidentRate) => {\n        let iconSize = [];\n\n        if (incidentRate > 10000) {\n            iconSize = [20, 20]\n        } else if (incidentRate > 8000) {\n            iconSize = [15, 15]\n        } else if (incidentRate > 5000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/Yellow_icon.svg/1200px-Yellow_icon.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.incidentRate)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000 people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default IncidentRate;","import React, { Fragment, useEffect, useState } from \"react\";\n\n//components\nimport CumulativeMap from \"./CumulativeMap/CumulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.scss\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon, isTablet, isMobile, isMap, setIsMap }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { cumulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    cumulativeStyle = isMap === \"cumulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div\n                className={`map-container${isTablet || isMobile ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper${mapExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <div style={cumulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"cumulative\")}>Cumulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n            {/* Tablet */}\n            <div className={`map-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <div style={cumulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"cumulative\")}>Cumulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`map-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\"}`}>\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n        </Fragment>\n    )\n}\n\n\n\nexport default Maps;","import React, { Fragment, useState } from \"react\";\n\nimport \"./InfectedCard.scss\";\n\nconst InfectedCard = ({ countriesData, globalData, provincesData, arrowLeft, arrowRight, infectedCardExpand, expandIcon, shrinkIcon, setInfectedCardExpand, formatNumber, isTablet, isMobile, isInfectedCard, setIsInfectedCard }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0] || !provincesData[0]) {\n        return \"Loading...\"\n    }\n\n    //modify global datas\n    const modifiedGlobalCasesData = countriesData\n        .map(({ country, latestData }) => [country, latestData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    //modify provinces data\n    const modifiedProvincesData = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .map(({ confirmed, key }) => [confirmed, key])\n            .filter((data) => data[0] > 30000))\n        .filter((data) => data.length > 0)\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    //modify today's data \n    const modifiedTodayData = countriesData\n        .map(({ country, todayData }) => [country, todayData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    const toggleAdminInfectedRight = () => {\n        if (isInfectedCard === \"admin0\") {\n            setIsInfectedCard(\"admin2\")\n        } else if (isInfectedCard === \"admin2\") {\n            setIsInfectedCard(\"today\")\n        } else if (isInfectedCard === \"today\") {\n            setIsInfectedCard(\"admin0\")\n        }\n    };\n    const toggleAdminInfectedLeft = () => {\n        if (isInfectedCard === \"admin0\") {\n            setIsInfectedCard(\"today\")\n        } else if (isInfectedCard === \"today\") {\n            setIsInfectedCard(\"admin2\")\n        } else if (isInfectedCard === \"admin2\") {\n            setIsInfectedCard(\"admin0\")\n        }\n    };\n\n    //toggle button togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isInfectedCard === \"admin0\"\n        ? onStyle\n        : {}\n    admin2Style = isInfectedCard === \"admin2\"\n        ? onStyle\n        : {}\n    todayStyle = isInfectedCard === \"today\"\n        ? onStyle\n        : {}\n\n\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div\n                className={`card-container${infectedCardExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isInfectedCard === \"admin0\" || isInfectedCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isInfectedCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isInfectedCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isInfectedCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                {\n                    !infectedCardExpand\n                        ? <div className={`arrow-toggler${isTablet ? \"-hide\" : \"\"}`}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleAdminInfectedLeft()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isInfectedCard === \"admin0\"\n                                        ? \"Admin0\"\n                                        : isInfectedCard === \"admin2\"\n                                            ? \"Admin2\"\n                                            : isInfectedCard === \"today\"\n                                                ? \"Global Today's Cases\"\n                                                : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleAdminInfectedRight()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin0\")}>Admin0</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin2\")}>Admin2</div>\n                            <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"today\")}>Global Today's Cases</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div className={`card-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\" }`}>\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isInfectedCard === \"admin0\" || isInfectedCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isInfectedCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isInfectedCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isInfectedCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin0\")}>Admin0</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin2\")}>Admin2</div>\n                    <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"today\")}>Global Today's Cases</div>\n                </div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`card-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\" }`}>\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isInfectedCard === \"admin0\" || isInfectedCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isInfectedCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isInfectedCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isInfectedCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default InfectedCard;","import React, { useState, Fragment } from \"react\";\nimport \"./DeathsRecoveredCard.scss\"\n\nconst DeathsRecoveredCard = ({ countriesData, globalData, classes, arrowLeft, arrowRight, deathsdCardExpand, setDeathsCardExpand, expandIcon, shrinkIcon, formatNumber, isTablet, isMobile, isDeathsRecoveredCard, setIsDeathsRecoveredCard }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading ...\"\n    }\n\n    //modify deaths datas\n    const modifiedGlobalDeathsData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].deaths - a[1].deaths);\n\n    //modify recovered datas\n    const modifiedGlobalRecoveredData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].recovered - a[1].recovered);\n\n    //modify today's deaths data \n    const modifiedTodayData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].deaths - a[2].deaths);\n\n    //toggle cards\n    const toggleDeathsRecoveredRight = () => {\n        if (isDeathsRecoveredCard === \"deaths\") {\n            setIsDeathsRecoveredCard(\"recovered\")\n        } else if (isDeathsRecoveredCard === \"recovered\") {\n            setIsDeathsRecoveredCard(\"today\")\n        } else if (isDeathsRecoveredCard === \"today\") {\n            setIsDeathsRecoveredCard(\"deaths\")\n        }\n    };\n    const toggleDeathsRecoveredLeft = () => {\n        if (isDeathsRecoveredCard === \"deaths\") {\n            setIsDeathsRecoveredCard(\"today\")\n        } else if (isDeathsRecoveredCard === \"today\") {\n            setIsDeathsRecoveredCard(\"recovered\")\n        } else if (isDeathsRecoveredCard === \"recovered\") {\n            setIsDeathsRecoveredCard(\"deaths\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isDeathsRecoveredCard === \"deaths\" ?\n        onStyle :\n        {}\n    admin2Style = isDeathsRecoveredCard === \"recovered\" ?\n        onStyle :\n        {}\n    todayStyle = isDeathsRecoveredCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div\n                className={`card-container${deathsdCardExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                {\n                    !deathsdCardExpand\n                        ? <div className={\"arrow-toggler\"}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredLeft()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isDeathsRecoveredCard === \"deaths\"\n                                        ? \"Deaths\"\n                                        : isDeathsRecoveredCard === \"recovered\"\n                                            ? \"Recovered\"\n                                            : isDeathsRecoveredCard === \"today\"\n                                                ? \"Global Today's Deaths\"\n                                                : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredRight()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"deaths\")}>Deaths</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"recovered\")}>Recovered</div>\n                            <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"today\")}>Global Today's Deaths</div>\n                        </div>\n                }\n            </div>\n\n            {/* Tablet */}\n            <div className={`card-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\"}`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"deaths\")}>Deaths</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"recovered\")}>Recovered</div>\n                    <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"today\")}>Global Today's Deaths</div>\n                </div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`card-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\"}`}>\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default DeathsRecoveredCard;","import React, { useState, Fragment } from \"react\";\nimport \"./ActiveIncidentRateCard.scss\";\n\nconst ActiveIncidentRateCard = ({ provincesData, classes, arrowLeft, arrowRight, activeCardExpand, setActiveCardExpand, expandIcon, shrinkIcon, formatNumber, isTablet, isMobile, isActiveIncidentCard, setIsActiveIncidentCard}) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    const modifiedActiveData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active, key }) => [active, key])\n            .filter((data) => data[0] > 30000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const activeDataSum = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b);\n\n    const modifiedIncidentRateData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ incidentRate, key }) => [incidentRate, key])\n            .filter((data) => data[0] > 12000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const numberOfProvinces = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat().length;\n\n    const incidentRateAvarage = Math.floor((provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b)) / numberOfProvinces);\n\n    const toggleActiveIncidentRateCard = () => {\n        if (isActiveIncidentCard === \"active\") {\n            setIsActiveIncidentCard(\"incidentRate\")\n        } else {\n            setIsActiveIncidentCard(\"active\")\n        }\n    }\n\n    let { admin0Style, admin2Style } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isActiveIncidentCard === \"active\" ?\n        onStyle :\n        {}\n    admin2Style = isActiveIncidentCard === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            <div\n                className={`card-container${activeCardExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isActiveIncidentCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n                {\n                    !activeCardExpand\n                        ? <div className={\"arrow-toggler\"}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isActiveIncidentCard === \"active\"\n                                        ? \"Active Cases\"\n                                        : isActiveIncidentCard === \"incidentRate\"\n                                            ? \"Incident Rate\"\n                                            : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"active\")}>Active Cases</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"incidentRate\")}>Incident Rate</div>\n                        </div>\n                }\n            </div>\n\n            {/* Tablet */}\n            <div className={`card-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\" }`}>\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isActiveIncidentCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"active\")}>Active Cases</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"incidentRate\")}>Incident Rate</div>\n                </div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`card-container${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\" }`}>\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isActiveIncidentCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\nexport default ActiveIncidentRateCard;","import React, { Fragment } from \"react\";\n\nimport \"./InfoPanel.scss\";\n\nconst InfoPanel = ({ globalData, countriesData, provincesData, formatNumber, classes, dataPanelExpand, isTablet, isMobile }) => {\n\n    if (!globalData[0] || !provincesData[0]) {\n        return \"Loading...\"\n    }\n\n    const filteredCountries = countriesData.filter(({ latestData }) => latestData.confirmed > 0);\n    const filteredProvinces = provincesData.flat().filter(({ confirmed }) => confirmed > 0);\n\n    // get formatted time for lastUpdate\n    const getFormattedDate = () => {\n        let lastUpdate = String(new Date(globalData[0].lastUpdate));\n        let month = String(lastUpdate.slice(4, 7));\n        switch (month) {\n            case \"Jan\":\n                month = \"1\"\n                break;\n            case \"Feb\":\n                month = \"2\";\n                break;\n            case \"Mar\":\n                month = \"3\";\n                break;\n            case \"Apr\":\n                month = \"4\";\n                break;\n            case \"May\":\n                month = \"5\";\n                break;\n            case \"Jun\":\n                month = \"6\";\n                break;\n            case \"Jul\":\n                month = \"7\";\n                break;\n            case \"Aug\":\n                month = \"8\";\n                break;\n            case \"Sep\":\n                month = \"9\";\n                break;\n            case \"Oct\":\n                month = \"10\";\n                break;\n            case \"Nov\":\n                month = \"11\";\n                break;\n            case \"Dec\":\n                month = \"12\";\n                break;\n            default:\n                month = \"\";\n        };\n\n        let day = String(lastUpdate.slice(8, 10));\n\n        let year = String(lastUpdate.slice(11, 15));\n\n        let hour = lastUpdate.slice(16, 18);\n        let ampm = \"\"\n        if (hour > 12) {\n            hour -= 12\n            ampm = \"PM\"\n        } else {\n            ampm = \"AM\"\n        }\n        let minute = String(lastUpdate.slice(19, 21))\n        return month + \"/\" + day + \"/\" + year + \",\" + hour + \":\" + minute + \" \" + ampm\n    };\n\n    return (\n        <Fragment>\n            {/* Desktop */}\n            {\n                !dataPanelExpand\n                    ? <Fragment>\n                        <table className={`table${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                            <tr>\n                                <td colspan=\"2\">\n                                    <div className={\"infected-panel-header\"}>Today's Global Cases</div>\n                                    <h2 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h2>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div className={\"panel-header\"}>Today's Global Deaths</div>\n                                    <h3 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h3>\n                                </td>\n                                <td>\n                                    <div className={\"panel-header\"}>Today's Global Recovered</div>\n                                    <h3 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h3>\n                                </td>\n                            </tr>\n                        </table>\n                        <div className={`country-panel${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                            <div className={\"panel-header\"}>Countries/Provinces</div>\n                            <h3 className={\"panel-number\"}>\n                                {filteredCountries.length}/{filteredProvinces.length}\n                            </h3>\n                        </div>\n                        <div className={`last-update-panel${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                            <div className={\"panel-header\"}>Last Updated at (M/D/YYYY)</div>\n                            <h3 className={\"panel-number\"}>\n                                {getFormattedDate(globalData[0].lastUpdate)}\n                            </h3>\n                        </div>\n                    </Fragment>\n                    : <Fragment>\n                        <table className={\"table-expand\"}>\n                            <tr>\n                                <td colspan=\"2\">\n                                    <span className={\"panel-header\"}>Today's Global Cases</span>\n                                    <h1 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h1>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Deaths</span>\n                                    <h2 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Recovered</span>\n                                    <h2 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h2>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Countries/Provinces</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {filteredCountries.length}/{filteredProvinces.length}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {getFormattedDate(globalData[0].lastUpdate)}\n                                    </h2>\n                                </td>\n                            </tr>\n                        </table>\n                    </Fragment>\n            }\n\n            {/* Tablet */}\n            <table className={`table${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <tr>\n                    <td colspan=\"2\">\n                        <span className={\"panel-header\"}>Today's Global Cases</span>\n                        <h1 className={\"infected-panel-number\"}>\n                            {formatNumber(globalData[0].newConfirmed)}\n                        </h1>\n                    </td>\n\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Deaths</span>\n                        <h2 className={\"panel-number deaths-number\"}>\n                            {formatNumber(globalData[0].newDeaths)}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Recovered</span>\n                        <h2 className={\"panel-number recovered-number\"}>\n                            {formatNumber(globalData[0].newRecovered)}\n                        </h2>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Countries/Provinces</span>\n                        <h2 className={\"panel-number country-number\"}>\n                            {filteredCountries.length}/{filteredProvinces.length}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                        <h2 className={\"panel-number lastUpdate-number\"}>\n                            {getFormattedDate(globalData[0].lastUpdate)}\n                        </h2>\n                    </td>\n                </tr>\n            </table>\n\n            {/* Mobile */}\n            <table className={`table${isMobile ? \"-mobile-version\" : isTablet ? \"-hide\" : \"-mobile\" }`}>\n                <tr>\n                    <td colspan=\"2\">\n                        <span className={\"panel-header\"}>Today's Global Cases</span>\n                        <h1 className={\"infected-panel-number\"}>\n                            {formatNumber(globalData[0].newConfirmed)}\n                        </h1>\n                    </td>\n\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Deaths</span>\n                        <h2 className={\"panel-number deaths-number\"}>\n                            {formatNumber(globalData[0].newDeaths)}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Recovered</span>\n                        <h2 className={\"panel-number recovered-number\"}>\n                            {formatNumber(globalData[0].newRecovered)}\n                        </h2>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Countries/Provinces</span>\n                        <h2 className={\"panel-number country-number\"}>\n                            {filteredCountries.length}/{filteredProvinces.length}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                        <h2 className={\"panel-number lastUpdate-number\"}>\n                            {getFormattedDate(globalData[0].lastUpdate)}\n                        </h2>\n                    </td>\n                </tr>\n            </table>\n        </Fragment>\n    )\n};\n\nexport default InfoPanel;","import React, { useState, useEffect, Fragment } from \"react\";\n\n//scss\nimport \"./PopupNavBars.scss\"\n\n//Fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons';\n\nconst navBars = < FontAwesomeIcon icon={faBars} />\nconst dropdown = < FontAwesomeIcon icon={faSortDown} />\n\nconst PopupNavBars = ({ isTablet, setIsTablet, isMobile, setIsMobile, setIsMap, setGlobalChartExpand, setGlobalDailyChartExpand, setInfectedCardExpand, setDeathsCardExpand, setActiveCardExpand, setMapExpand, setDataPanelExpand }) => {\n\n    const [popup, setPopup] = useState(false);\n    const [popupDataSource, setPopupDataSource] = useState(false);\n\n    return (\n        <div id=\"popup-nav-container\">\n            <div id=\"nav-icon\" onClick={() => { setPopup(!popup) }}>\n                {navBars}\n            </div>\n            {\n                popup\n                    ? <div id=\"popup-container\">\n                        <div className={\"popup-item\"}\n                            style={popupDataSource ? { backgroundColor: \"#555\" } : { backgroundColor: \"#333\" }}\n                            onClick={() => {\n                                setPopupDataSource(!popupDataSource)\n                            }}>\n                            <div>Data Source</div>\n                            <div className={`dropdown-icon${popupDataSource ? \"-up\" : \"\"}`}>{dropdown}</div>\n                        </div>\n                        {\n                            popupDataSource\n                                ? <div id=\"dropdown-items\">\n                                    <div onClick={() => setPopup(!popup)} className={\"dropdown-item\"}>\n                                        <a href=\"https://about-corona.net/documentation\" target=\"_blank\">ABOUT-CORONA.NET</a>\n                                    </div>\n                                    <div onClick={() => setPopup(!popup)} className={\"dropdown-item\"}>\n                                        <a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\">Mathdroid Covid-19 REST API v1.0</a>\n                                    </div>\n                                </div>\n                                : null\n                        }\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsTablet(!isTablet)\n                                setIsMobile(false)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"cumulative\"))\n                                setPopup(!popup)\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                                setPopupDataSource(false)\n                            }}\n                        >\n                            {\n                                !isTablet\n                                    ? \"Tablet Version\"\n                                    : \"Desktop Version\"\n                            }\n\n                        </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsMobile(!isMobile)\n                                setIsTablet(false)\n                                setPopup(!popup)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"cumulative\"))\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                                setPopupDataSource(false)\n                            }}\n                        >\n                            {\n                                !isMobile\n                                    ? \"Mobile Version\"\n                                    : \"Desktop Version\"\n                            }\n                        </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => { \n                                setPopup(!popup) \n                                setPopupDataSource(false)\n                            }}\n                        >\n                            <a href=\"https://github.com/Shuto46490802\" target=\"_blank\">About</a>\n                        </div>\n                    </div>\n                    : null\n            }\n        </div >\n    )\n};\n\nexport default PopupNavBars;","import React, { useState, Fragment } from \"react\";\n\nimport \"./MobileButtonToggler.scss\"\n\nconst MobileButtonToggler = ({ setMobileItem, setIsMap, mobileItem, dropdown, setIsGlobal, setIsChart, arrowLeft, setIsInfectedCard, setIsDeathsRecoveredCard, setIsActiveIncidentCard, setIsGlobalChart, setGlobalTodayChart, setIsCountryChart }) => {\n\n    //Toggle popup\n    const [mapPopup, setMapPopup] = useState(false);\n    const [globalPopup, setGlobalPopup] = useState(false);\n    const [chartsPopup, setChartsPopup] = useState(false);\n\n    //Toggle popup sub-items\n\n    //Cards\n    const [infectedPopup, setInfectedPopup] = useState(false);\n    const [deathsRecoveredPopup, setDeathsRecoveredPopup] = useState(false);\n    const [activeIncidentPopup, setActiveIncidentPopup] = useState(false);\n\n    // Global Chart\n    const [globalChartsPopup, setGlobalChartsPopup] = useState(false);\n\n    //Daily Chart\n    const [dailyChartsPopup, setDailyChartsPopup] = useState(false);\n\n    //Country Chart\n    const [countryChartsPopup, setCountryChartsPopup] = useState(false);\n\n    //toggle mobile items\n    let {\n        totalsStyle,\n        mapStyle,\n        countriesStyle,\n        globalStyle,\n        chartsStyle,\n    } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    totalsStyle = mobileItem === \"totals\"\n        ? onStyle\n        : {}\n    mapStyle = mobileItem === \"map\"\n        ? onStyle\n        : {}\n    countriesStyle = mobileItem === \"countries\"\n        ? onStyle\n        : {}\n    globalStyle = mobileItem === \"global\"\n        ? onStyle\n        : {}\n    chartsStyle = mobileItem === \"charts\"\n        ? onStyle\n        : {}\n\n    //Popup items style\n    let { infectedStyle, deathsRecoveredStyle, activeIncidentStyle, gloalChartsStyle, dailyChartsStyle } = {};\n    const activeStyle = { backgroundColor: \"#555\" };\n    infectedStyle = infectedPopup ? activeStyle : {} ;\n    deathsRecoveredStyle = deathsRecoveredPopup ? activeStyle : {} ;\n    activeIncidentStyle = activeIncidentPopup ? activeStyle : {} ;\n    gloalChartsStyle = globalChartsPopup ? activeStyle : {} ;\n    dailyChartsStyle = dailyChartsPopup ? activeStyle : {} ;\n\n\n    return (\n        //totals\n        <div className={\"button-toggler-wrapper-mobile\"}>\n            <div className={\"button-popup-container\"}>\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"totals\")\n                        setMapPopup(false)\n                        setGlobalPopup(false)\n                        setChartsPopup(false)\n                        setCountryChartsPopup(false)\n                    }}\n                    style={totalsStyle}\n                >\n                    Totals\n                    </div>\n            </div>\n\n            {/* Map */}\n            <div className={\"button-popup-container\"}>\n                {\n                    mapPopup\n                        ? <div className={\"popup-container\"}>\n                            <div className={\"popup-items\"}>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setIsMap(\"cumulative\")\n                                        setMapPopup(!mapPopup)\n                                    }}>\n                                    Cumulative Cases\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setIsMap(\"active\")\n                                        setMapPopup(!mapPopup)\n                                    }}>\n                                    Active Cases\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setIsMap(\"incidentRate\")\n                                        setMapPopup(!mapPopup)\n                                    }}>\n                                    Incident Rate\n                                </div>\n                            </div>\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"map\")\n                        setGlobalPopup(false)\n                        setChartsPopup(false)\n                        setCountryChartsPopup(false)\n                        if (mobileItem === \"map\") {\n                            setMapPopup(!mapPopup)\n                        }\n                    }}\n                    style={mapStyle}\n                >\n                    Map\n                        {\n                        mobileItem === \"map\"\n                            ? <div className={`mobile-button-icon${mapPopup ? \"-active\" : \"\"}`}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n\n            {/* Global */}\n            <div className={\"button-popup-container\"}>\n                {\n                    globalPopup\n                        ? <div className={\"popup-container\"}>\n                            <div className={\"popup-items\"}>\n                                <div\n                                    className={\"popup-item\"}\n                                    style={infectedStyle}\n                                    onClick={() => {\n                                        setIsGlobal(\"infected\")\n                                        setInfectedPopup(!infectedPopup)\n                                        setDeathsRecoveredPopup(false)\n                                        setActiveIncidentPopup(false)\n                                    }}>\n                                    <div>Infected Cases</div>\n                                    <div className={`arrow-icon${infectedPopup ? \"-active\" : \"\"}`}>{arrowLeft}</div>\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    style={deathsRecoveredStyle}\n                                    onClick={() => {\n                                        setIsGlobal(\"deathsRecovered\")\n                                        setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                        setInfectedPopup(false)\n                                        setActiveIncidentPopup(false)\n                                    }}>\n                                    <div>Deaths/Recovered</div>\n                                    <div className={`arrow-icon${deathsRecoveredPopup ? \"-active\" : \"\"}`}>{arrowLeft}</div>\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    style={activeIncidentStyle}\n                                    onClick={() => {\n                                        setIsGlobal(\"activeIncidentRate\")\n                                        setActiveIncidentPopup(!activeIncidentPopup)\n                                        setInfectedPopup(false)\n                                        setDeathsRecoveredPopup(false)\n                                    }}>\n                                    <div>Active Cases/Incident Rate</div>\n                                    <div className={`arrow-icon${activeIncidentPopup ? \"-active\" : \"\"}`}>{arrowLeft}</div>\n                                </div>\n                            </div>\n                            {\n                                infectedPopup\n                                    ? <div className={\"popup-sub-items\"}>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setIsInfectedCard(\"admin0\")\n                                                setGlobalPopup(!globalPopup)\n                                                setInfectedPopup(!infectedPopup)\n                                            }}>\n                                            Admin 0\n                                        </div>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setIsInfectedCard(\"admin2\")\n                                                setGlobalPopup(!globalPopup)\n                                                setInfectedPopup(!infectedPopup)\n                                            }}>\n                                            Admin 2\n                                        </div>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setIsInfectedCard(\"today\")\n                                                setGlobalPopup(!globalPopup)\n                                                setInfectedPopup(!infectedPopup)\n                                            }}>\n                                            Global Today's Cases\n                                        </div>\n                                    </div>\n                                    : deathsRecoveredPopup\n                                        ? <div className={\"popup-sub-items\"}>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setIsDeathsRecoveredCard(\"deaths\")\n                                                    setGlobalPopup(!globalPopup)\n                                                    setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                                }}>\n                                                Deaths\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setIsDeathsRecoveredCard(\"recovered\")\n                                                    setGlobalPopup(!globalPopup)\n                                                    setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                                }}>\n                                                Recovered\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setIsDeathsRecoveredCard(\"today\")\n                                                    setGlobalPopup(!globalPopup)\n                                                    setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                                }}>\n                                                Global Today's Deaths\n                                            </div>\n                                        </div>\n                                        : activeIncidentPopup\n                                            ? <div className={\"popup-sub-items\"}>\n                                                <div\n                                                    className={\"popup-sub-item\"}\n                                                    onClick={() => {\n                                                        setIsActiveIncidentCard(\"active\")\n                                                        setGlobalPopup(!globalPopup)\n                                                        setActiveIncidentPopup(!activeIncidentPopup)\n                                                    }}>\n                                                    Active Cases\n                                                </div>\n                                                <div\n                                                    className={\"popup-sub-item\"}\n                                                    onClick={() => {\n                                                        setIsActiveIncidentCard(\"incidentRate\")\n                                                        setGlobalPopup(!globalPopup)\n                                                        setActiveIncidentPopup(!activeIncidentPopup)\n                                                    }}>\n                                                    Incident Rate\n                                                </div>\n                                            </div>\n                                            : null\n                            }\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"global\")\n                        setMapPopup(false)\n                        setChartsPopup(false)\n                        setCountryChartsPopup(false)\n                        if (mobileItem === \"global\") {\n                            setGlobalPopup(!globalPopup)\n                        }\n                    }}\n                    style={globalStyle}\n                >\n                    <div>Global</div>\n                    {\n                        mobileItem === \"global\"\n                            ? <div className={`mobile-button-icon${globalPopup ? \"-active\" : \"\"}`}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n\n            {/* Countries */}\n            <div className={\"button-popup-container\"}>\n                {\n                    countryChartsPopup\n                        ? <div className={\"popup-container\"}>\n                            <div className={\"popup-items\"}>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setCountryChartsPopup(!countryChartsPopup)\n                                        setIsCountryChart(\"infected\")\n                                    }}>\n                                    Infected\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setCountryChartsPopup(!countryChartsPopup)\n                                        setIsCountryChart(\"deaths\")\n                                    }}>\n                                    Deaths\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setCountryChartsPopup(!countryChartsPopup)\n                                        setIsCountryChart(\"recovered\")\n                                    }}>\n                                    Recovered\n                                </div>\n                            </div>\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"countries\")\n                        setMapPopup(false)\n                        setGlobalPopup(false)\n                        setChartsPopup(false)\n                        if (mobileItem === \"countries\") {\n                            setCountryChartsPopup(!countryChartsPopup)\n                        }\n                    }}\n                    style={countriesStyle}\n                >\n                    Countries\n                    {\n                        mobileItem === \"countries\"\n                            ? <div className={`mobile-button-icon${countryChartsPopup ? \"-active\" : \"\"}`}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n\n            {/* Charts */}\n            <div className={\"button-popup-container\"}>\n                {\n                    chartsPopup\n                        ? <div className={\"popup-container\"}>\n                            <div className={\"popup-items\"}>\n                                <div\n                                    className={\"popup-item\"}\n                                    style={gloalChartsStyle}\n                                    onClick={() => {\n                                        setIsChart(\"globalChart\")\n                                        setGlobalChartsPopup(!globalChartsPopup)\n                                        setDailyChartsPopup(false)\n                                    }}>\n                                    <div>Global Charts</div>\n                                    <div className={`arrow-icon${globalChartsPopup ? \"-active\" : \"\"}`}>{arrowLeft}</div>\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    style={dailyChartsStyle}\n                                    onClick={() => {\n                                        setIsChart(\"dailyChart\")\n                                        setDailyChartsPopup(!dailyChartsPopup)\n                                        setGlobalChartsPopup(false)\n                                    }}>\n                                    <div>Daily Charts</div>\n                                    <div className={`arrow-icon${dailyChartsPopup ? \"-active\" : \"\"}`}>{arrowLeft}</div>\n                                </div>\n                            </div>\n                            {\n                                globalChartsPopup\n                                    ? <div className={\"popup-sub-items\"}>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setChartsPopup(!chartsPopup)\n                                                setGlobalChartsPopup(!globalChartsPopup)\n                                                setIsGlobalChart(\"infected\")\n                                            }}>\n                                            Infected Cases\n                                        </div>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setChartsPopup(!chartsPopup)\n                                                setGlobalChartsPopup(!globalChartsPopup)\n                                                setIsGlobalChart(\"deaths\")\n                                            }}>\n                                            Deaths\n                                        </div>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setChartsPopup(!chartsPopup)\n                                                setGlobalChartsPopup(!globalChartsPopup)\n                                                setIsGlobalChart(\"recovered\")\n                                            }}>\n                                            Recovered\n                                        </div>\n                                    </div>\n                                    : dailyChartsPopup\n                                        ? <div className={\"popup-sub-items\"}>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setChartsPopup(!chartsPopup)\n                                                    setDailyChartsPopup(!dailyChartsPopup)\n                                                    setGlobalTodayChart(\"infected\")\n                                                }}>\n                                                Infected Cases\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setChartsPopup(!chartsPopup)\n                                                    setDailyChartsPopup(!dailyChartsPopup)\n                                                    setGlobalTodayChart(\"active\")\n                                                }}>\n                                                Active Cases\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setChartsPopup(!chartsPopup)\n                                                    setDailyChartsPopup(!dailyChartsPopup)\n                                                    setGlobalTodayChart(\"deaths\")\n                                                }}>\n                                                Deaths\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setChartsPopup(!chartsPopup)\n                                                    setDailyChartsPopup(!dailyChartsPopup)\n                                                    setGlobalTodayChart(\"recovered\")\n                                                }}>\n                                                Recovered\n                                            </div>\n                                        </div>\n                                        : null\n                            }\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"charts\")\n                        setMapPopup(false)\n                        setGlobalPopup(false)\n                        setCountryChartsPopup(false)\n                        if (mobileItem === \"charts\") {\n                            setChartsPopup(!chartsPopup)\n                        }\n                    }}\n                    style={chartsStyle}\n                >\n                    Charts\n                    {\n                        mobileItem === \"charts\"\n                            ? <div className={`mobile-button-icon${chartsPopup ? \"-active\" : \"\"}`}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default MobileButtonToggler;","import React, { useState, useEffect, Fragment } from \"react\";\n\n//Components \nimport CountryPicker from \"./Components/CountryPicker/CountryPicker\";\nimport GlobalCharts from \"./Components/Charts/GlobalCharts\";\nimport CountryCharts from \"./Components/Charts/CountryCharts\";\nimport GlobalTodayCharts from \"./Components/Charts/GlobalTodayCharts\";\nimport Maps from \"./Components/Maps/Maps\";\nimport InfectedCard from \"./Components/Cards/InfectedCard/InfectedCard\";\nimport DeathsRecoveredCard from \"./Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard\";\nimport ActiveIncidentRateCard from \"./Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard\";\nimport InfoPanel from \"./Components/InfoPanel/InfoPanel\";\nimport PopupNavBars from \"./Components/PopupNavBars/PopupNavBars\";\nimport MobileButtonToggler from \"./Components/MobileButtonToggler/MobileButtonToggler\";\n\nimport \"./css/App.scss\";\n\nimport { fetchProvinceData, fetchCountriesData, fetchGlobaldata, fetchCountriesYearlyData } from \"./api\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons';\n\n\n\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst arrowLeft = < FontAwesomeIcon icon={faCaretLeft} />\nconst arrowRight = < FontAwesomeIcon icon={faCaretRight} />\nconst expandIcon = < FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst shrinkIcon = < FontAwesomeIcon icon={faCompressArrowsAlt} />\nconst dropdown = < FontAwesomeIcon icon={faSortDown} />\n\n\nconst App = () => {\n\n    //Fetch API Datas\n    const [globalData, setGlobaldata] = useState({})\n    const [country, setCountry] = useState(\"select a country\");\n    const [countriesData, setCountriesData] = useState({});\n    const [provincesData, setProvincesData] = useState();\n    const [countriesYearlyData, setCountriesYearlyData] = useState({});\n\n    //Expand or Hide\n    const [infectedCardExpand, setInfectedCardExpand] = useState(false);\n    const [deathsdCardExpand, setDeathsCardExpand] = useState(false);\n    const [activeCardExpand, setActiveCardExpand] = useState(false);\n    const [mapExpand, setMapExpand] = useState(false);\n    const [dataPanelExpand, setDataPanelExpand] = useState(false);\n    const [globalDailyChartExpand, setGlobalDailyChartExpand] = useState(false);\n    const [globalChartExpand, setGlobalChartExpand] = useState(false);\n\n    //Hover Expand and Shrink Icons\n    const [isPanelHover, setIsPanelHover] = useState(false);\n    const [isTodayChartHover, setIsTodayChartHover] = useState(false);\n\n    //Toggle Map \n    const [isMap, setIsMap] = useState(\"cumulative\");\n\n    //Toggle Cards\n    const [isInfectedCard, setIsInfectedCard] = useState(\"admin0\");\n    const [isDeathsRecoveredCard, setIsDeathsRecoveredCard] = useState(\"deaths\");\n    const [isActiveIncidentCard, setIsActiveIncidentCard] = useState(\"active\");\n\n    //Toggle Charts\n    const [isGlobalChart, setIsGlobalChart] = useState(\"infected\");\n    const [isGlobalTodayChart, setGlobalTodayChart] = useState(\"infected\");\n    const [isCountryChart, setIsCountryChart] = useState(\"infected\");\n\n    //Tablet or Mobile Version\n    const [isTablet, setIsTablet] = useState(false);\n    const [isMobile, setIsMobile] = useState(false);\n\n    //Toggle Mobile Items\n    const [mobileItem, setMobileItem] = useState(\"totals\")\n\n    //Toggle Item within Mobile Items\n    const [isGlobal, setIsGlobal] = useState(\"infected\");\n    const [isChart, setIsChart] = useState(\"globalChart\");\n\n    //Loader\n    const [isLoad, setIsLoad] = useState(true)\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setProvincesData(await fetchProvinceData());\n            setCountriesData(await fetchCountriesData());\n            setGlobaldata(await fetchGlobaldata());\n        }\n        fetchAPI();\n    }, [setCountriesData]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 2000)\n    })\n\n    const loader = <Loader\n        type=\"Bars\"\n        color=\"#3500D3\"\n        height={100}\n        width={100}\n        timeout={2000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={\"loader-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    }\n\n    //country picker\n    const toggleCountry = async (country) => {\n        setCountry(country);\n        setCountriesYearlyData(await fetchCountriesYearlyData(country));\n    };\n\n    // separate number with separator\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //format for chart d\n    const option = {\n        maintainAspectRatio: false,\n        legend: { display: false },\n        tooltips: {\n            xPadding: 15,\n            yPadding: 15,\n            yAlign: \"bottom\",\n            callbacks: {\n                title: (items, data) => data['labels'][items[0]['index']],\n                label: (item, data) => formatNumber(data['datasets'][0]['data'][item['index']])\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                },\n                ticks: {\n                    maxTicksLimit: 6,\n                    fontColor: \"#f5f5f5\",\n                    fontSize: 10\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    maxTicksLimit: 8,\n                    callback: function numFormatter(num) {\n                        if (num > 999 && num < 1000000) {\n                            return Math.floor((num / 1000).toFixed(1)) + 'K';\n                        } else if (num >= 10000000) {\n                            return Math.floor((num / 1000000).toFixed(1)) + 'M';\n                        } else if (num >= 1000000) {\n                            return (num / 1000000).toFixed(1) + 'M';\n                        } else if (num < 900) {\n                            return num;\n                        }\n                    },\n                    fontColor: \"#f5f5f5\",\n                },\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                }\n            }]\n        }\n    };\n\n    //toggle expand and hide  \n    const classes =\n        infectedCardExpand\n            ? [\"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n            : dataPanelExpand\n                ? [\"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                : mapExpand\n                    ? [\"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                    : globalDailyChartExpand\n                        ? [\"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\"]\n                        : deathsdCardExpand\n                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\"]\n                            : activeCardExpand\n                                ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\"]\n                                : globalChartExpand\n                                    ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\"]\n                                    : [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n    const columnClasses =\n        infectedCardExpand || dataPanelExpand\n            ? [\"expand\", \"hide\", \"hide\"]\n            : mapExpand || globalDailyChartExpand\n                ? [\"hide\", \"expand\", \"hide\"]\n                : deathsdCardExpand || activeCardExpand || globalChartExpand\n                    ? [\"hide\", \"hide\", \"expand\"]\n                    : [\"\", \"\", \"\"];\n\n    return (\n        <div className={`app${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"\"}`} >\n            <header>\n                <img src=\"https://www.tiabc.ca/wp-content/uploads/home/COVID%E2%80%9419.png\" alt=\"covid-19 logo\" />\n                <div id=\"header-title\">\n                    <h1>World COVID-19 Dashboard</h1>\n                    <span id=\"header-border\"></span>\n                    <div id=\"header-footer\">\n                        <span>Desinged and Coded</span>\n                        <span>by Shuto.S</span>\n                    </div>\n                </div>\n                <div id=\"nav\">\n                    <p className={\"nav-text\"}>Global Map</p>\n                    <p className={\"nav-text\"}>Country Map</p>\n                    <div id=\"popup-nav-bars\">\n                        <PopupNavBars\n                            isTablet={isTablet}\n                            setIsTablet={setIsTablet}\n                            isMobile={isMobile}\n                            setIsMobile={setIsMobile}\n                            setIsMap={setIsMap}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            setDeathsCardExpand={setDeathsCardExpand}\n                            setActiveCardExpand={setActiveCardExpand}\n                            setMapExpand={setMapExpand}\n                            setDataPanelExpand={setDataPanelExpand}\n                            setGlobalDailyChartExpand={setGlobalDailyChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            dropdown={dropdown}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <div className={`desktop${isTablet || isMobile ? \"-hide\" : \"\"}`} >\n                <div\n                    className={`column${columnClasses[0]} column1`}\n                >\n                    <div\n                        id={\"infected-card\"}\n                        className={classes[0]}\n                    >\n                        <InfectedCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            infectedCardExpand={infectedCardExpand}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            isInfectedCard={isInfectedCard}\n                            setIsInfectedCard={setIsInfectedCard}\n                        />\n                    </div>\n                    <div\n                        id=\"info-panel\"\n                        className={classes[1]}\n                        onMouseEnter={() => setIsPanelHover(true)}\n                        onMouseLeave={() => setIsPanelHover(false)}\n                    >\n                        {\n                            isPanelHover\n                                ? !dataPanelExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => { setDataPanelExpand(true) }}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setDataPanelExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <InfoPanel\n                            globalData={globalData}\n                            countriesData={countriesData}\n                            provincesData={provincesData}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            dataPanelExpand={dataPanelExpand}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                </div>\n                <div className={`column${columnClasses[1]} column2`}>\n                    <div\n                        id=\"map\"\n                        className={classes[2]}\n                    >\n                        <Maps\n                            classes={classes}\n                            provincesData={provincesData}\n                            setMapExpand={setMapExpand}\n                            mapExpand={mapExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            isMap={isMap}\n                            setIsMap={setIsMap}\n                        />\n                    </div>\n                    <div\n                        id=\"country-picker-chart\"\n                        className={classes[3]}\n                        onMouseEnter={() => setIsTodayChartHover(true)}\n                        onMouseLeave={() => setIsTodayChartHover(false)}\n                    >\n                        {\n                            isTodayChartHover\n                                ? !globalDailyChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalDailyChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalDailyChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <div id=\"country-picker\">\n                            <CountryPicker\n                                classes={classes}\n                                toggleCountry={toggleCountry}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                                country={country}\n                            />\n                        </div>\n                        <div id=\"country-chart\">\n                            {\n                                country === \"select a country\"\n                                    ? <GlobalTodayCharts\n                                        globalData={globalData}\n                                        arrowRight={arrowRight}\n                                        arrowLeft={arrowLeft}\n                                        option={option}\n                                        classes={classes}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        isTablet={isTablet}\n                                        isMobile={isMobile}\n                                    />\n                                    : <CountryCharts\n                                        countriesYearlyData={countriesYearlyData}\n                                        arrowLeft={arrowLeft}\n                                        arrowRight={arrowRight}\n                                        option={option}\n                                        classes={classes}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        isTablet={isTablet}\n                                        isMobile={isMobile}\n                                        isCountryChart={isCountryChart}\n                                        setIsCountryChart={setIsCountryChart}\n                                    />\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className={`column${columnClasses[2]} column3`}>\n                    <div className={`row${globalChartExpand ? \"-hide\" : \"\"}`} >\n                        <div\n                            id=\"deaths-recovered-card\"\n                            className={classes[4]}\n                        >\n                            <DeathsRecoveredCard\n                                countriesData={countriesData}\n                                globalData={globalData}\n                                classes={classes}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                deathsdCardExpand={deathsdCardExpand}\n                                setDeathsCardExpand={setDeathsCardExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                                isDeathsRecoveredCard={isDeathsRecoveredCard}\n                                setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                            />\n                        </div>\n                        <div\n                            id=\"active-incident-card\"\n                            className={classes[5]}\n                        >\n                            <ActiveIncidentRateCard\n                                provincesData={provincesData}\n                                classes={classes}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                activeCardExpand={activeCardExpand}\n                                setActiveCardExpand={setActiveCardExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                                isActiveIncidentCard={isActiveIncidentCard}\n                                setIsActiveIncidentCard={setIsActiveIncidentCard}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        id=\"global-chart\"\n                        className={classes[6]}\n                    >\n                        <GlobalCharts\n                            globalData={globalData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            option={option}\n                            classes={classes}\n                            globalChartExpand={globalChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            isGlobalChart={isGlobalChart}\n                            setIsGlobalChart={setIsGlobalChart}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            {/* Tablet */}\n            <div className={`tablet${isTablet ? \"-version\" : isMobile ? \"-hide\" : \"-responsive\"}`}>\n                <div className={\"tablet-item\"} id=\"map-tablet\">\n                    <Maps\n                        classes={classes}\n                        provincesData={provincesData}\n                        setMapExpand={setMapExpand}\n                        mapExpand={mapExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        isMap={isMap}\n                        setIsMap={setIsMap}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div className={\"tablet-item\"} id={\"infected-card-tablet\"}>\n                    <InfectedCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        provincesData={provincesData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        infectedCardExpand={infectedCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        setInfectedCardExpand={setInfectedCardExpand}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isInfectedCard={isInfectedCard}\n                        setIsInfectedCard={setIsInfectedCard}\n                    />\n                </div>\n                <div className={\"deaths-active-card tablet-item\"}>\n                    <DeathsRecoveredCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        deathsdCardExpand={deathsdCardExpand}\n                        setDeathsCardExpand={setDeathsCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isDeathsRecoveredCard={isDeathsRecoveredCard}\n                        setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                    />\n                </div>\n                <div className={\"deaths-active-card tablet-item\"}>\n                    <ActiveIncidentRateCard\n                        provincesData={provincesData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        activeCardExpand={activeCardExpand}\n                        setActiveCardExpand={setActiveCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isActiveIncidentCard={isActiveIncidentCard}\n                        setIsActiveIncidentCard={setIsActiveIncidentCard}\n                    />\n                </div>\n                <div id=\"country-picker-chart\" className={\"tablet-item\"}>\n                    <div id=\"country-picker\">\n                        <CountryPicker\n                            classes={classes}\n                            toggleCountry={toggleCountry}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            country={country}\n                        />\n                    </div>\n                    <div id=\"country-chart\">\n                        {\n                            country === \"select a country\"\n                                ? <GlobalTodayCharts\n                                    globalData={globalData}\n                                    arrowRight={arrowRight}\n                                    arrowLeft={arrowLeft}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                    isCountryChart={isCountryChart}\n                                    setIsCountryChart={setIsCountryChart}\n                                />\n                                : <CountryCharts\n                                    countriesYearlyData={countriesYearlyData}\n                                    arrowLeft={arrowLeft}\n                                    arrowRight={arrowRight}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                    isCountryChart={isCountryChart}\n                                    setIsCountryChart={setIsCountryChart}\n                                />\n                        }\n                    </div>\n                </div>\n                <div id=\"global-chart\" className={\"tablet-item\"}>\n                    <GlobalCharts\n                        globalData={globalData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        option={option}\n                        classes={classes}\n                        globalChartExpand={globalChartExpand}\n                        setGlobalChartExpand={setGlobalChartExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isGlobalChart={isGlobalChart}\n                        setIsGlobalChart={setIsGlobalChart}\n                    />\n                </div>\n                <div id=\"info-panel\" className={\"tablet-item\"}>\n                    <InfoPanel\n                        globalData={globalData}\n                        countriesData={countriesData}\n                        provincesData={provincesData}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`mobile${isMobile ? \"-version\" : isTablet ? \"-hide\" : \"-responsive\"}`}>\n                <div className={\"mobile-item\"}>\n                    {\n                        mobileItem === \"totals\"\n                            ? <InfoPanel\n                                globalData={globalData}\n                                countriesData={countriesData}\n                                provincesData={provincesData}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                            />\n                            : mobileItem === \"map\"\n                                ? <Maps\n                                    classes={classes}\n                                    provincesData={provincesData}\n                                    setMapExpand={setMapExpand}\n                                    mapExpand={mapExpand}\n                                    expandIcon={expandIcon}\n                                    shrinkIcon={shrinkIcon}\n                                    isMap={isMap}\n                                    setIsMap={setIsMap}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                />\n                                : mobileItem === \"global\"\n                                    ? isGlobal === \"infected\"\n                                        ? <InfectedCard\n                                            countriesData={countriesData}\n                                            globalData={globalData}\n                                            provincesData={provincesData}\n                                            arrowLeft={arrowLeft}\n                                            arrowRight={arrowRight}\n                                            infectedCardExpand={infectedCardExpand}\n                                            expandIcon={expandIcon}\n                                            shrinkIcon={shrinkIcon}\n                                            setInfectedCardExpand={setInfectedCardExpand}\n                                            formatNumber={formatNumber}\n                                            isTablet={isTablet}\n                                            isMobile={isMobile}\n                                            isInfectedCard={isInfectedCard}\n                                            setIsInfectedCard={setIsInfectedCard}\n                                        />\n                                        : isGlobal === \"deathsRecovered\"\n                                            ? <DeathsRecoveredCard\n                                                countriesData={countriesData}\n                                                globalData={globalData}\n                                                classes={classes}\n                                                arrowLeft={arrowLeft}\n                                                arrowRight={arrowRight}\n                                                deathsdCardExpand={deathsdCardExpand}\n                                                setDeathsCardExpand={setDeathsCardExpand}\n                                                expandIcon={expandIcon}\n                                                shrinkIcon={shrinkIcon}\n                                                formatNumber={formatNumber}\n                                                isTablet={isTablet}\n                                                isMobile={isMobile}\n                                                isDeathsRecoveredCard={isDeathsRecoveredCard}\n                                                setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                                            />\n                                            : isGlobal === \"activeIncidentRate\"\n                                                ? <ActiveIncidentRateCard\n                                                    provincesData={provincesData}\n                                                    classes={classes}\n                                                    arrowLeft={arrowLeft}\n                                                    arrowRight={arrowRight}\n                                                    activeCardExpand={activeCardExpand}\n                                                    setActiveCardExpand={setActiveCardExpand}\n                                                    expandIcon={expandIcon}\n                                                    shrinkIcon={shrinkIcon}\n                                                    formatNumber={formatNumber}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                    isActiveIncidentCard={isActiveIncidentCard}\n                                                    setIsActiveIncidentCard={setIsActiveIncidentCard}\n                                                />\n                                                : null\n                                    : mobileItem === \"countries\"\n                                        ? <Fragment>\n                                            <div className={\"country-picker\"}>\n                                                <CountryPicker\n                                                    classes={classes}\n                                                    toggleCountry={toggleCountry}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                />\n                                            </div>\n                                            <div className={\"country-charts\"}>\n                                                <CountryCharts\n                                                    countriesYearlyData={countriesYearlyData}\n                                                    arrowLeft={arrowLeft}\n                                                    arrowRight={arrowRight}\n                                                    option={option}\n                                                    classes={classes}\n                                                    globalDailyChartExpand={globalDailyChartExpand}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                    isCountryChart={isCountryChart}\n                                                    setIsCountryChart={setIsCountryChart}\n                                                />\n                                            </div>\n                                        </Fragment>\n                                        : mobileItem === \"charts\"\n                                            ? isChart === \"globalChart\"\n                                                ? <GlobalCharts\n                                                    globalData={globalData}\n                                                    arrowLeft={arrowLeft}\n                                                    arrowRight={arrowRight}\n                                                    option={option}\n                                                    classes={classes}\n                                                    globalChartExpand={globalChartExpand}\n                                                    setGlobalChartExpand={setGlobalChartExpand}\n                                                    expandIcon={expandIcon}\n                                                    shrinkIcon={shrinkIcon}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                    isGlobalChart={isGlobalChart}\n                                                    setIsGlobalChart={setIsGlobalChart}\n                                                />\n                                                : isChart === \"dailyChart\"\n                                                    ? <GlobalTodayCharts\n                                                        globalData={globalData}\n                                                        arrowRight={arrowRight}\n                                                        arrowLeft={arrowLeft}\n                                                        option={option}\n                                                        classes={classes}\n                                                        globalDailyChartExpand={globalDailyChartExpand}\n                                                        isTablet={isTablet}\n                                                        isMobile={isMobile}\n                                                        isGlobalTodayChart={isGlobalTodayChart}\n                                                    />\n                                                    : null\n                                            : null\n                    }\n                </div>\n                <MobileButtonToggler\n                    setMobileItem={setMobileItem}\n                    setIsMap={setIsMap}\n                    mobileItem={mobileItem}\n                    dropdown={dropdown}\n                    setIsGlobal={setIsGlobal}\n                    setIsChart={setIsChart}\n                    arrowLeft={arrowLeft}\n                    setIsInfectedCard={setIsInfectedCard}\n                    setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                    setIsActiveIncidentCard={setIsActiveIncidentCard}\n                    setIsGlobalChart={setIsGlobalChart}\n                    setGlobalTodayChart={setGlobalTodayChart}\n                    setIsCountryChart={setIsCountryChart}\n                />\n            </div>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
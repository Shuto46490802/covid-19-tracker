{"version":3,"sources":["api/index.js","Components/CountryPicker/CountryPicker.js","Components/Charts/GlobalCharts.js","Components/Charts/CountryCharts.js","Components/Charts/GlobalTodayCharts.js","Components/Maps/CumulativeMap/CumulativeMap.js","Components/Maps/ActiveMap/ActiveMap.js","Components/Maps/IncidentRate/IncidentRate.js","Components/Maps/Maps.js","Components/Cards/InfectedCard/InfectedCard.js","Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js","Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js","Components/InfoPanel/InfoPanel.js","Components/PopupNavBars/PopupNavBars.js","Components/MobileButtonToggler/MobileButtonToggler.js","App.js","index.js"],"names":["fetchCountriesYearlyData","country","a","changableUrl","axios","get","data","latest_data","timeline","name","fetchGlobaldata","map","active","confirmed","date","deaths","recovered","newConfirmed","new_confirmed","newDeaths","new_deaths","newRecovered","new_recovered","lastUpdate","updated_at","fetchCountry","code","fetchCountriesData","latestData","todayData","today","fetchProvinceData","promises","countries","lat","long","countryRegion","key","combinedKey","incidentRate","getData","Promise","all","promise","CountryPicker","classes","toggleCountry","globalDailyChartExpand","isTablet","isMobile","useState","setCountries","useEffect","fetchAPI","modifiedData","filter","sort","b","className","FormControl","id","InputLabel","shrink","NativeSelect","onChange","e","target","value","selectEmpty","i","GlobalCharts","globalData","arrowLeft","arrowRight","option","globalChartExpand","setGlobalChartExpand","expandIcon","shrinkIcon","isChart","setIsChart","isHover","setIsHover","setIsLoad","setTimeout","infectedStyle","deathsStyle","recoveredStyle","reverse","infectedLineChart","length","labels","datasets","fill","lineTension","borderColor","backgroundColor","pointRadius","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","options","deathsLineChart","recoveredLineChart","onStyle","borderBottom","offStyle","onMouseEnter","onMouseLeave","onClick","style","CountryCharts","countriesYearlyData","isLoad","loader","type","color","height","width","timeout","modifiedTimeLine","label","barChart","maintainAspectRatio","legend","display","title","scales","xAxes","gridLines","zeroLineColor","ticks","maxTicksLimit","fontColor","yAxes","callback","num","toFixed","GlobalTodayCharts","isInfectedActiveChart","setIsInfectedActiveChart","isDeathsRecoveredChart","setIsDeathsRecoveredChart","activeStyle","toggleInfectedActiveChart","toggleDeathsRecoveredChart","infectedBarChart","activeBarChart","recoveredBarChart","deathsBarChart","CamulativeMap","noProvince","formatNumber","usProvinces","provinces","toggleIconSize","mapExpand","iconSize","L","Icon","iconUrl","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Popup","ActiveMap","props","IncidentRate","Math","floor","Maps","provincesData","setMapExpand","isMap","setIsMap","cumulativeStyle","incidentRateStyle","inputNumber","formetedNumber","Number","replace","splitArray","split","CumulativeMap","InfectedCard","countriesData","infectedCardExpand","setInfectedCardExpand","isInfectedCard","setIsInfectedCard","admin0Style","admin2Style","todayStyle","modifiedGlobalCasesData","modifiedProvincesData","flat","modifiedTodayData","DeathsRecoveredCard","deathsdCardExpand","setDeathsCardExpand","isDeathsRecoveredCard","setIsDeathsRecoveredCard","modifiedGlobalDeathsData","modifiedGlobalRecoveredData","ActiveIncidentRateCard","activeCardExpand","setActiveCardExpand","isActiveIncidentCard","setIsActiveIncidentCard","modifiedActiveData","activeDataSum","reduce","modifiedIncidentRateData","numberOfProvinces","incidentRateAvarage","toggleActiveIncidentRateCard","InfoPanel","dataPanelExpand","filteredCountries","filteredProvinces","getFormattedDate","String","Date","month","slice","day","year","hour","ampm","colspan","navBars","faBars","dropdown","faSortDown","PopupNavBars","setIsTablet","setIsMobile","setGlobalDailyChartExpand","setDataPanelExpand","popup","setPopup","popupDataSource","setPopupDataSource","href","MobileButtonToggler","totalsStyle","mapStyle","countriesStyle","globalStyle","chartsStyle","setMobileItem","mobileItem","setIsGlobal","mapPopup","setMapPopup","globalPopup","setGlobalPopup","chartsPopup","setChartsPopup","infectedPopup","setInfectedPopup","deathsRecoveredPopup","setDeathsRecoveredPopup","activeIncidentPopup","setActiveIncidentPopup","faCaretLeft","faCaretRight","faExpandArrowsAlt","faCompressArrowsAlt","App","setGlobaldata","setCountry","setCountriesData","setProvincesData","setCountriesYearlyData","isPanelHover","setIsPanelHover","isTodayChartHover","setIsTodayChartHover","isGlobal","tooltips","xPadding","yPadding","yAlign","callbacks","items","item","fontSize","columnClasses","console","log","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8dAKaA,EAAwB,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,yDACpB,qBAAZD,EADgC,yCAEzB,cAFyB,cAIhCE,EAJgC,2CAIoBF,GAJpB,kBAMkCG,IAAMC,IAAIF,GAN5C,2BAMxBG,KAAQA,KAAQC,EANQ,EAMRA,YAAaC,EANL,EAMKA,SAAUC,EANf,EAMeA,KANf,kBAOzB,CAAEF,cAAaC,WAAUC,SAPA,4FAAH,sDAaxBC,EAAe,uCAAG,8BAAAR,EAAA,4DACjB,kCADiB,kBAGUE,IAAMC,IAFjC,mCADiB,uBAGPC,EAHO,EAGfA,KAAQA,KAHO,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBM,OAAQN,EAAKM,OACbC,UAAWP,EAAKO,UAChBC,KAAMR,EAAKQ,KACXC,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBC,aAAcX,EAAKY,cACnBC,UAAWb,EAAKc,WAChBC,aAAcf,EAAKgB,cACnBC,WAAYjB,EAAKkB,gBAbE,yFAAH,qDAoBfC,EAAY,uCAAG,8BAAAvB,EAAA,4DACd,mCADc,kBAGaE,IAAMC,IAFjC,oCADc,uBAGJC,EAHI,EAGZA,KAAQA,KAHI,kBAKbA,EAAKK,KAAI,kBAAkC,CAC9CF,KADY,EAAGA,KAEfiB,KAFY,EAASA,KAGrBpB,KAHY,EAAeC,iBALX,yFAAH,qDAiBZoB,EAAkB,uCAAG,8BAAAzB,EAAA,4DACpB,mCADoB,kBAIOE,IAAMC,IAHjC,oCADoB,uBAIVC,EAJU,EAIlBA,KAAQA,KAJU,kBAKnBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBL,QAASK,EAAKG,KACdmB,WAAYtB,EAAKC,YACjBsB,UAAWvB,EAAKwB,WARM,yFAAH,qDAgBlBC,EAAiB,uCAAG,8BAAA7B,EAAA,6DAEvB8B,EAAWC,EAAUtB,IAAV,uCAAc,WAAOV,GAAP,iBAAAC,EAAA,+EAEAE,IAAMC,IAAN,UAzEvB,iCAyEuB,sBAA8BJ,EAA9B,eAFA,uBAEfK,EAFe,EAEfA,KAFe,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBO,UAAWP,EAAKO,UAChBE,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBJ,OAAQN,EAAKM,OACbsB,IAAK5B,EAAK4B,IACVC,KAAM7B,EAAK6B,KACXlC,QAASK,EAAK8B,cACdC,IAAK/B,EAAKgC,YACVC,aAAcjC,EAAKiC,kBAbA,yFAAd,uDAmBXC,EArBuB,+BAAAtC,EAAA,MAqBb,sBAAAA,EAAA,sEACCuC,QAAQC,IAAIV,EAASrB,IAAT,uCAAa,WAAOgC,GAAP,SAAAzC,EAAA,+EAC3ByC,GAD2B,2CAAb,wDADb,mFArBa,8DA0BhBH,IA1BgB,mFAAH,qDA6BxBP,EACF,CAAC,cACG,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,QACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,sBACA,mBACA,aACA,UACA,OACA,SACA,UACA,UACA,mBACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,kBACA,SACA,OACA,WACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,SACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,cACA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","file":"static/js/main.8cfb2a76.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\n//for countries charts\nexport const fetchCountriesYearlyData = async (country) => {\n    if (country === \"select a country\") {\n        return \"Loading...\"\n    }\n    var changableUrl = (`https://corona-api.com/countries/${country}`)\n    try {\n        const { data: { data: { latest_data, timeline, name } } } = await axios.get(changableUrl);\n        return { latest_data, timeline, name }\n    } catch (error) {\n    }\n}\n\n//fetch global datas\nexport const fetchGlobaldata = async () => {\n    let url = \"https://corona-api.com/timeline\"\n    try {\n        const { data: { data } } = await axios.get(url);\n        return data.map((data) => ({\n            active: data.active,\n            confirmed: data.confirmed,\n            date: data.date,\n            deaths: data.deaths,\n            recovered: data.recovered,\n            newConfirmed: data.new_confirmed,\n            newDeaths: data.new_deaths,\n            newRecovered: data.new_recovered,\n            lastUpdate: data.updated_at\n        }));\n    } catch (error) {\n    }\n}\n\n//for country picker\nexport const fetchCountry = async () => {\n    let url = \"https://corona-api.com/countries\"\n    try {\n        const { data: { data } } = await axios.get(url);\n\n        return data.map(({ name, code, latest_data }) => ({\n            name: name,\n            code: code,\n            data: latest_data\n        }))\n\n    } catch (error) {\n\n    }\n};\n\n//for country infected, deaths and recovered list \nexport const fetchCountriesData = async () => {\n    let url = \"https://corona-api.com/countries\"\n\n    try {\n        const { data: { data } } = await axios.get(url)\n        return data.map((data) => ({\n            country: data.name,\n            latestData: data.latest_data,\n            todayData: data.today\n        }))\n\n    } catch (error) {\n    }\n};\n\n//for Map\nexport const fetchProvinceData = async () => {\n\n    const promises = countries.map(async (country) => {\n        try {\n            const { data } = await axios.get(`${url}/countries/${country}/confirmed`);\n\n            return data.map((data) => ({\n                confirmed: data.confirmed,\n                deaths: data.deaths,\n                recovered: data.recovered,\n                active: data.active,\n                lat: data.lat,\n                long: data.long,\n                country: data.countryRegion,\n                key: data.combinedKey,\n                incidentRate: data.incidentRate\n            }));\n        } catch (error) {\n        }\n    });\n\n    const getData = async () => {\n        return await Promise.all(promises.map(async (promise) => {\n            return promise\n        }))\n    }\n    return await getData();\n};\n\nconst countries =\n    [\"Afghanistan\",\n        \"Albania\",\n        \"Algeria\",\n        \"Andorra\",\n        \"Angola\",\n        \"Antigua and Barbuda\",\n        \"Argentina\",\n        \"Armenia\",\n        \"Australia\",\n        \"Austria\",\n        \"Azerbaijan\",\n        \"Bahamas\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Barbados\",\n        \"Belarus\",\n        \"Belgium\",\n        \"Belize\",\n        \"Benin\",\n        \"Bhutan\",\n        \"Bolivia\",\n        \"Bosnia and Herzegovina\",\n        \"Botswana\",\n        \"Brazil\",\n        \"Brunei\",\n        \"Bulgaria\",\n        \"Burkina Faso\",\n        \"Burma\",\n        \"Burundi\",\n        \"Cabo Verde\",\n        \"Cambodia\",\n        \"Cameroon\",\n        \"Canada\",\n        \"Central African Republic\",\n        \"Chad\",\n        \"Chile\",\n        \"China\",\n        \"Colombia\",\n        \"Comoros\",\n        \"Congo (Brazzaville)\",\n        \"Congo (Kinshasa)\",\n        \"Costa Rica\",\n        \"Croatia\",\n        \"Cuba\",\n        \"Cyprus\",\n        \"Czechia\",\n        \"Denmark\",\n        \"Diamond Princess\",\n        \"Djibouti\",\n        \"Dominica\",\n        \"Dominican Republic\",\n        \"Ecuador\",\n        \"Egypt\",\n        \"El Salvador\",\n        \"Equatorial Guinea\",\n        \"Eritrea\",\n        \"Estonia\",\n        \"Eswatini\",\n        \"Ethiopia\",\n        \"Fiji\",\n        \"Finland\",\n        \"France\",\n        \"Gabon\",\n        \"Gambia\",\n        \"Georgia\",\n        \"Germany\",\n        \"Ghana\",\n        \"Greece\",\n        \"Grenada\",\n        \"Guatemala\",\n        \"Guinea\",\n        \"Guinea-Bissau\",\n        \"Guyana\",\n        \"Haiti\",\n        \"Holy See\",\n        \"Honduras\",\n        \"Hungary\",\n        \"Iceland\",\n        \"India\",\n        \"Indonesia\",\n        \"Iran\",\n        \"Iraq\",\n        \"Ireland\",\n        \"Israel\",\n        \"Italy\",\n        \"Jamaica\",\n        \"Japan\",\n        \"Jordan\",\n        \"Kazakhstan\",\n        \"Kenya\",\n        \"South Korea\",\n        \"Kosovo\",\n        \"Kuwait\",\n        \"Kyrgyzstan\",\n        \"Laos\",\n        \"Latvia\",\n        \"Lebanon\",\n        \"Lesotho\",\n        \"Liberia\",\n        \"Libya\",\n        \"Liechtenstein\",\n        \"Lithuania\",\n        \"Luxembourg\",\n        \"MS Zaandam\",\n        \"Madagascar\",\n        \"Malawi\",\n        \"Malaysia\",\n        \"Maldives\",\n        \"Mali\",\n        \"Malta\",\n        \"Marshall Islands\",\n        \"Mauritania\",\n        \"Mauritius\",\n        \"Mexico\",\n        \"Moldova\",\n        \"Monaco\",\n        \"Mongolia\",\n        \"Montenegro\",\n        \"Morocco\",\n        \"Mozambique\",\n        \"Namibia\",\n        \"Nepal\",\n        \"Netherlands\",\n        \"New Zealand\",\n        \"Nicaragua\",\n        \"Niger\",\n        \"Nigeria\",\n        \"North Macedonia\",\n        \"Norway\",\n        \"Oman\",\n        \"Pakistan\",\n        \"Panama\",\n        \"Papua New Guinea\",\n        \"Paraguay\",\n        \"Peru\",\n        \"Philippines\",\n        \"Poland\",\n        \"Portugal\",\n        \"Qatar\",\n        \"Romania\",\n        \"Russia\",\n        \"Rwanda\",\n        \"Saint Kitts and Nevis\",\n        \"Saint Lucia\",\n        \"Saint Vincent and the Grenadines\",\n        \"Samoa\",\n        \"San Marino\",\n        \"Sao Tome and Principe\",\n        \"Saudi Arabia\",\n        \"Senegal\",\n        \"Serbia\",\n        \"Seychelles\",\n        \"Sierra Leone\",\n        \"Singapore\",\n        \"Slovakia\",\n        \"Slovenia\",\n        \"Solomon Islands\",\n        \"Somalia\",\n        \"South Africa\",\n        \"South Sudan\",\n        \"Spain\",\n        \"Sri Lanka\",\n        \"Sudan\",\n        \"Suriname\",\n        \"Sweden\",\n        \"Switzerland\",\n        \"Syria\",\n        \"Taiwan\",\n        \"Tajikistan\",\n        \"Tanzania\",\n        \"Thailand\",\n        \"Timor-Leste\",\n        \"Togo\",\n        \"Trinidad and Tobago\",\n        \"Tunisia\",\n        \"Turkey\",\n        \"US\",\n        \"Uganda\",\n        \"Ukraine\",\n        \"United Arab Emirates\",\n        \"United Kingdom\",\n        \"Uruguay\",\n        \"Uzbekistan\",\n        \"Vanuatu\",\n        \"Venezuela\",\n        \"Vietnam\",\n        \"West Bank and Gaza\",\n        \"Yemen\",\n        \"Zambia\",\n        \"Zimbabwe\"]\n","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchCountry } from \"../../api\";\n\nimport \"./CountryPicker.scss\";\n\n\nconst CountryPicker = ({ classes, toggleCountry, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    return (\n        <Fragment>\n            <div className={`country-picker-container${globalDailyChartExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n\n            <div className={`country-picker-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\" }`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        {\n                            isMobile\n                            ? <option className={\"option\"}>Select A Country</option>\n                            : <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        }\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default CountryPicker;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalCharts.scss\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon, isTablet, isMobile }) => {\n\n  const [isChart, setIsChart] = useState(\"infected\");\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  if (!globalData[0]) {\n    return \"Loading...\"\n  }\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { infectedStyle, deathsStyle, recoveredStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n  const offStyle = { backgroundColor: \"#777\" }\n  infectedStyle = isChart === \"infected\" ?\n    onStyle :\n    offStyle\n  deathsStyle = isChart === \"deaths\" ?\n    onStyle :\n    offStyle\n  recoveredStyle = isChart === \"recovered\" ?\n    onStyle :\n    offStyle\n\n  return (\n    <Fragment>\n      <div\n        className={`global-chart-container${globalChartExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        {\n          isHover\n            ? !globalChartExpand\n              ? <div className={\"expand-icon\"} onClick={() => setGlobalChartExpand(true)}>{expandIcon}</div>\n              : <div className={\"shrink-icon\"} onClick={() => setGlobalChartExpand(false)}>{shrinkIcon}</div>\n            : null\n        }\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Infected/Deaths/Recovered\n            </p>\n          <div className={`chart`}>\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n          {\n            !globalChartExpand\n              ? <div className={\"arrow-toggler\"}>\n                <div className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</div>\n                <div className={\"toggler-text\"}>\n                  {\n                    isChart === \"infected\"\n                      ? \"Infected\"\n                      : isChart === \"deaths\"\n                        ? \"Deaths\"\n                        : isChart === \"recovered\"\n                          ? \"Recovered\"\n                          : null\n                  }\n                </div>\n                <div className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</div>\n              </div>\n              : null\n          }\n        </div>\n      </div>\n      {\n        globalChartExpand\n          ? <div className={`button-toggler-wrapper-expand`}>\n            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n          </div>\n          : null\n      }\n\n      {/* tablet */}\n      <div\n        className={`global-chart-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Daily Infected/Deaths/Recovered\n            </p>\n          <div className={`chart`}>\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n        </div>\n      </div>\n      <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n      </div>\n    </Fragment>\n  )\n};\n\nexport default GlobalCharts;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalTodayCharts.scss\"\n\nconst CountryCharts = ({ countriesYearlyData: { latest_data, timeline }, arrowLeft, arrowRight, option, classes, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [isChart, setIsChart] = useState(\"infected\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !timeline || !latest_data) {\n        return (\n            <div className={`loader-country-chart-wrapper${classes[3]}`}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedTimeLine = timeline.map((data) => data).reverse();\n    //infected chart\n    const infectedLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ confirmed }) => confirmed),\n                            label: \"Infected\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(222, 53, 76, 1)\",\n                            backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(222, 53, 76, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n                            pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ deaths }) => deaths),\n                            label: \"Deaths\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(92, 95, 88, 1)\",\n                            backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(92, 95, 88, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n                            pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ recovered }) => recovered),\n                            label: \"Recovered\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(0, 255, 0, 1)\",\n                            backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(0, 255, 0, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n                            pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const barChart = (\n        latest_data.length !== 0\n            ? <Bar\n                data={{\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                    datasets: [{\n                        data: [latest_data.confirmed, latest_data.recovered, latest_data.deaths],\n                        backgroundColor: [\"rgba(222, 53, 76, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(92, 95, 88, 0.5)\"]\n                    }]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: { display: false },\n                    title: { display: false },\n                    scales: {\n                        xAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                maxTicksLimit: 12,\n                                fontColor: \"white\"\n                            }\n                        }],\n                        yAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                fontColor: \"white\",\n                                maxTicksLimit: 8,\n                                callback: function numFormatter(num) {\n                                    if (num > 999 && num < 1000000) {\n                                        return (num / 1000).toFixed(1) + 'K';\n                                    } else if (num >= 1000000) {\n                                        return (num / 1000000).toFixed(1) + 'M';\n                                    } else if (num < 900) {\n                                        return num;\n                                    }\n\n                                }\n                            }\n                        }\n                        ]\n                    }\n                }}\n            />\n            : null\n    );\n\n    const toggleToRight = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"infected\")\n        }\n    };\n    const toggleToLeft = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"infected\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { infectedStyle, deathsStyle, recoveredStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    const offStyle = { backgroundColor: \"#777\" };;\n    infectedStyle = isChart === \"infected\" ?\n        onStyle :\n        offStyle\n    deathsStyle = isChart === \"deaths\" ?\n        onStyle :\n        offStyle\n    recoveredStyle = isChart === \"recovered\" ?\n        onStyle :\n        offStyle\n\n    return (\n        <Fragment>\n            <div className={`chart-container${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n                                <span className={\"toggler-text\"}>\n                                    {\n                                        isChart === \"infected\"\n                                            ? \"Infected\"\n                                            : isChart === \"deaths\"\n                                                ? \"Deaths\"\n                                                : isChart === \"recovered\"\n                                                    ? \"Recovered\"\n                                                    : null\n                                    }\n                                </span>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div className={`chart bar-chart`} >\n                        {barChart}\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"} />\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={`button-toggler-wrapper-expand`}>\n                        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n                        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n                        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n                    </div>\n                    : null\n            }\n\n            {/* tablet */}\n            <div className={`chart-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div className={`chart bar-chart`} >\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n            <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\"}`}>\n                <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n                <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n                <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CountryCharts","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalTodayCharts.scss\"\n\nconst GlobalTodayCharts = ({ globalData, arrowRight, arrowLeft, option, classes, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [isInfectedActiveChart, setIsInfectedActiveChart] = useState(\"infected\");\n    const [isDeathsRecoveredChart, setIsDeathsRecoveredChart] = useState(\"deaths\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={`loader-country-chart-wrapper${classes[3]}`}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedData = globalData.map((data) => data).reverse().filter(({ newConfirmed }) => newConfirmed < 3000000);\n\n    const toggleInfectedActiveChart = () => {\n        if (isInfectedActiveChart === \"infected\") {\n            setIsInfectedActiveChart(\"active\")\n        } else {\n            setIsInfectedActiveChart(\"infected\")\n        }\n    };\n\n    const toggleDeathsRecoveredChart = () => {\n        if (isDeathsRecoveredChart === \"deaths\") {\n            setIsDeathsRecoveredChart(\"recovered\")\n        } else {\n            setIsDeathsRecoveredChart(\"deaths\")\n        }\n    };\n\n    const infectedBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newConfirmed }) => newConfirmed),\n                        backgroundColor: \"red\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const activeBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ active }) => active),\n                        backgroundColor: \"rgba(241, 178, 74, 1)\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newRecovered }) => newRecovered),\n                        backgroundColor: \"#4D774E\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newDeaths }) => newDeaths),\n                        backgroundColor: \"#999\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    //toggle map togglers border bottom\n    let { infectedStyle, activeStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    const offStyle = { backgroundColor: \"#777\" };\n    infectedStyle = isInfectedActiveChart === \"infected\" ?\n        onStyle :\n        offStyle\n    activeStyle = isInfectedActiveChart === \"active\" ?\n        onStyle :\n        offStyle\n\n    let { deathsStyle, recoveredStyle } = {};\n    deathsStyle = isDeathsRecoveredChart === \"deaths\" ?\n        onStyle :\n        offStyle\n    recoveredStyle = isDeathsRecoveredChart === \"recovered\" ?\n        onStyle :\n        offStyle\n\n    return (\n        <Fragment>\n            {/* laptop */}\n            <div className={`chart-container${isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div\n                        className={`chart`}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <div className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowLeft}</div>\n                                <div className={\"toggler-text\"}>\n                                    {\n                                        isInfectedActiveChart === \"infected\"\n                                            ? \"Daily Infected Cases\"\n                                            : \"Daily Active Cases\"\n\n                                    }\n                                </div>\n                                <div className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowRight}</div>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Global Daily Deaths/Recovered\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowLeft}</div>\n                                <div className={\"toggler-text\"}>\n                                    {\n                                        isDeathsRecoveredChart === \"deaths\"\n                                            ? \"Daily Deaths\"\n                                            : \"Daily Recovered\"\n                                    }\n                                </div>\n                                <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowRight}</div>\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={`button-toggler-container-expand`}>\n                        <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                            <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                        </div>\n                        <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                        </div>\n                    </div>\n                    : null\n            }\n\n            {/* tablet */}\n            <div className={`chart-container${isTablet ? \"-tablet-version\" :  isMobile ? \"-mobile-version\" : \"-tablet\" }`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div\n                        className={`chart`}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Deaths/Recovered\n                        </p>\n                    <div className={`chart`}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                </div>\n            </div>\n\n            <div className={`button-toggler-container${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                    <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                    <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                </div>\n                <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n                    <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                    <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n};\n\nexport default GlobalTodayCharts;","import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces, mapExpand }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer  center={[23.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst ActiveMap = (props) => {\n\n    const toggleIconSize = (active) => {\n        let iconSize = [];\n\n        if (active > 500000) {\n            iconSize = [20, 20]\n        } else if (active > 300000) {\n            iconSize = [15, 15]\n        } else if (active > 100000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Location_dot_orange.svg/1024px-Location_dot_orange.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.confirmed)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                            <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                            <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                            <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default ActiveMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst IncidentRate = (props) => {\n\n    const toggleIconSize = (incidentRate) => {\n        let iconSize = [];\n\n        if (incidentRate > 10000) {\n            iconSize = [20, 20]\n        } else if (incidentRate > 8000) {\n            iconSize = [15, 15]\n        } else if (incidentRate > 5000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/Yellow_icon.svg/1200px-Yellow_icon.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.incidentRate)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000 people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default IncidentRate;","import React, { Fragment, useEffect, useState } from \"react\";\n\n//components\nimport CumulativeMap from \"./CumulativeMap/CumulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.scss\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon, isTablet, isMobile, isMap, setIsMap }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { cumulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    cumulativeStyle = isMap === \"cumulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`map-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper${mapExpand ? \"-expand\" : isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"\"}`}>\n                <div style={cumulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"cumulative\")}>Cumulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n            <div\n                className={`map-container-tablet${isTablet || isMobile ? \"-hide\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper-tablet${isTablet || isMobile ? \"-hide\" : \"\" }`}>\n                <div style={cumulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"cumulative\")}>Cumulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n        </Fragment>\n    )\n}\n\n\n\nexport default Maps;","import React, { Fragment, useState } from \"react\";\n\nimport \"./InfectedCard.scss\";\n\nconst InfectedCard = ({ countriesData, globalData, provincesData, arrowLeft, arrowRight, infectedCardExpand, expandIcon, shrinkIcon, setInfectedCardExpand, formatNumber, isTablet, isMobile, isInfectedCard, setIsInfectedCard }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0] || !provincesData[0]) {\n        return \"Loading...\"\n    }\n\n    //modify global datas\n    const modifiedGlobalCasesData = countriesData\n        .map(({ country, latestData }) => [country, latestData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    //modify provinces data\n    const modifiedProvincesData = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .map(({ confirmed, key }) => [confirmed, key])\n            .filter((data) => data[0] > 30000))\n        .filter((data) => data.length > 0)\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    //modify today's data \n    const modifiedTodayData = countriesData\n        .map(({ country, todayData }) => [country, todayData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    const toggleAdminInfectedRight = () => {\n        if (isInfectedCard=== \"admin0\") {\n            setIsInfectedCard(\"admin2\")\n        } else if (isInfectedCard === \"admin2\") {\n            setIsInfectedCard(\"today\")\n        } else if (isInfectedCard === \"today\") {\n            setIsInfectedCard(\"admin0\")\n        }\n    };\n    const toggleAdminInfectedLeft = () => {\n        if (isInfectedCard === \"admin0\") {\n            setIsInfectedCard(\"today\")\n        } else if (isInfectedCard === \"today\") {\n            setIsInfectedCard(\"admin2\")\n        } else if (isInfectedCard === \"admin2\") {\n            setIsInfectedCard(\"admin0\")\n        }\n    };\n\n    //toggle button togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isInfectedCard === \"admin0\"\n        ? onStyle\n        : {}\n    admin2Style = isInfectedCard === \"admin2\"\n        ? onStyle\n        : {}\n    todayStyle = isInfectedCard === \"today\"\n        ? onStyle\n        : {}\n\n\n\n    return (\n        <Fragment>\n            <div\n                className={`card-container${infectedCardExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isInfectedCard === \"admin0\" || isInfectedCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isInfectedCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isInfectedCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isInfectedCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                {\n                    !infectedCardExpand\n                        ? <div className={`arrow-toggler${isTablet ? \"-hide\" : \"\" }`}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleAdminInfectedLeft()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isInfectedCard === \"admin0\"\n                                        ? \"Admin0\"\n                                        : isInfectedCard === \"admin2\"\n                                            ? \"Admin2\"\n                                            : isInfectedCard === \"today\"\n                                                ? \"Global Today's Cases\"\n                                                : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleAdminInfectedRight()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin0\")}>Admin0</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin2\")}>Admin2</div>\n                            <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"today\")}>Global Today's Cases</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div\n                className={`card-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isInfectedCard === \"admin0\" || isInfectedCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isInfectedCard === \"admin0\" || isInfectedCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isInfectedCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isInfectedCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isInfectedCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin0\")}>Admin0</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"admin2\")}>Admin2</div>\n                    <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsInfectedCard(\"today\")}>Global Today's Cases</div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default InfectedCard;","import React, { useState, Fragment } from \"react\";\nimport \"./DeathsRecoveredCard.scss\"\n\nconst DeathsRecoveredCard = ({ countriesData, globalData, classes, arrowLeft, arrowRight, deathsdCardExpand, setDeathsCardExpand, expandIcon, shrinkIcon, formatNumber, isTablet, isMobile, isDeathsRecoveredCard, setIsDeathsRecoveredCard }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading ...\"\n    }\n\n    //modify deaths datas\n    const modifiedGlobalDeathsData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].deaths - a[1].deaths);\n\n    //modify recovered datas\n    const modifiedGlobalRecoveredData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].recovered - a[1].recovered);\n\n    //modify today's deaths data \n    const modifiedTodayData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].deaths - a[2].deaths);\n\n    //toggle cards\n    const toggleDeathsRecoveredRight = () => {\n        if (isDeathsRecoveredCard === \"deaths\") {\n            setIsDeathsRecoveredCard(\"recovered\")\n        } else if (isDeathsRecoveredCard === \"recovered\") {\n            setIsDeathsRecoveredCard(\"today\")\n        } else if (isDeathsRecoveredCard === \"today\") {\n            setIsDeathsRecoveredCard(\"deaths\")\n        }\n    };\n    const toggleDeathsRecoveredLeft = () => {\n        if (isDeathsRecoveredCard === \"deaths\") {\n            setIsDeathsRecoveredCard(\"today\")\n        } else if (isDeathsRecoveredCard === \"today\") {\n            setIsDeathsRecoveredCard(\"recovered\")\n        } else if (isDeathsRecoveredCard === \"recovered\") {\n            setIsDeathsRecoveredCard(\"deaths\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isDeathsRecoveredCard === \"deaths\" ?\n        onStyle :\n        {}\n    admin2Style = isDeathsRecoveredCard === \"recovered\" ?\n        onStyle :\n        {}\n    todayStyle = isDeathsRecoveredCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`card-container${deathsdCardExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                {\n                    !deathsdCardExpand\n                        ? <div className={\"arrow-toggler\"}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredLeft()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isDeathsRecoveredCard === \"deaths\"\n                                        ? \"Deaths\"\n                                        : isDeathsRecoveredCard === \"recovered\"\n                                            ? \"Recovered\"\n                                            : isDeathsRecoveredCard === \"today\"\n                                                ? \"Global Today's Deaths\"\n                                                : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredRight()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"deaths\")}>Deaths</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"recovered\")}>Recovered</div>\n                            <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"today\")}>Global Today's Deaths</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div\n                className={`card-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isDeathsRecoveredCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isDeathsRecoveredCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isDeathsRecoveredCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : isMobile ? \"-hide\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"deaths\")}>Deaths</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"recovered\")}>Recovered</div>\n                    <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredCard(\"today\")}>Global Today's Deaths</div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default DeathsRecoveredCard;","import React, { useState, Fragment } from \"react\";\nimport \"./ActiveIncidentRateCard.scss\";\n\nconst ActiveIncidentRateCard = ({ provincesData, classes, arrowLeft, arrowRight, activeCardExpand, setActiveCardExpand, expandIcon, shrinkIcon, formatNumber, isTablet, isMobile, isActiveIncidentCard, setIsActiveIncidentCard}) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    const modifiedActiveData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active, key }) => [active, key])\n            .filter((data) => data[0] > 30000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const activeDataSum = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b);\n\n    const modifiedIncidentRateData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ incidentRate, key }) => [incidentRate, key])\n            .filter((data) => data[0] > 12000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const numberOfProvinces = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat().length;\n\n    const incidentRateAvarage = Math.floor((provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b)) / numberOfProvinces);\n\n    const toggleActiveIncidentRateCard = () => {\n        if (isActiveIncidentCard === \"active\") {\n            setIsActiveIncidentCard(\"incidentRate\")\n        } else {\n            setIsActiveIncidentCard(\"active\")\n        }\n    }\n\n    let { admin0Style, admin2Style } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isActiveIncidentCard === \"active\" ?\n        onStyle :\n        {}\n    admin2Style = isActiveIncidentCard === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`card-container${activeCardExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isActiveIncidentCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n                {\n                    !activeCardExpand\n                        ? <div className={\"arrow-toggler\"}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isActiveIncidentCard === \"active\"\n                                        ? \"Active Cases\"\n                                        : isActiveIncidentCard === \"incidentRate\"\n                                            ? \"Incident Rate\"\n                                            : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"active\")}>Active Cases</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"incidentRate\")}>Incident Rate</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div\n                className={`card-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isActiveIncidentCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isActiveIncidentCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isActiveIncidentCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : isMobile ? \"-hide\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"active\")}>Active Cases</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsActiveIncidentCard(\"incidentRate\")}>Incident Rate</div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\nexport default ActiveIncidentRateCard;","import React, { Fragment } from \"react\";\n\nimport \"./InfoPanel.scss\";\n\nconst InfoPanel = ({ globalData, countriesData, provincesData, formatNumber, classes, dataPanelExpand, isTablet, isMobile }) => {\n\n    if (!globalData[0] || !provincesData[0]) {\n        return \"Loading...\"\n    }\n\n    const filteredCountries = countriesData.filter(({ latestData }) => latestData.confirmed > 0);\n    const filteredProvinces = provincesData.flat().filter(({ confirmed }) => confirmed > 0);\n\n    // get formatted time for lastUpdate\n    const getFormattedDate = () => {\n        let lastUpdate = String(new Date(globalData[0].lastUpdate));\n        let month = String(lastUpdate.slice(4, 7));\n        switch (month) {\n            case \"Jan\":\n                month = \"1\"\n                break;\n            case \"Feb\":\n                month = \"2\";\n                break;\n            case \"Mar\":\n                month = \"3\";\n                break;\n            case \"Apr\":\n                month = \"4\";\n                break;\n            case \"May\":\n                month = \"5\";\n                break;\n            case \"Jun\":\n                month = \"6\";\n                break;\n            case \"Jul\":\n                month = \"7\";\n                break;\n            case \"Aug\":\n                month = \"8\";\n                break;\n            case \"Sep\":\n                month = \"9\";\n                break;\n            case \"Oct\":\n                month = \"10\";\n                break;\n            case \"Nov\":\n                month = \"11\";\n                break;\n            case \"Dec\":\n                month = \"12\";\n                break;\n            default:\n                month = \"\";\n        };\n\n        let day = String(lastUpdate.slice(8, 10));\n\n        let year = String(lastUpdate.slice(11, 15));\n\n        let hour = lastUpdate.slice(16, 18);\n        let ampm = \"\"\n        if (hour > 12) {\n            hour -= 12\n            ampm = \"PM\"\n        } else {\n            ampm = \"AM\"\n        }\n        let minute = String(lastUpdate.slice(19, 21))\n        return month + \"/\" + day + \"/\" + year + \",\" + hour + \":\" + minute + \" \" + ampm\n    };\n\n    return (\n        <Fragment>\n            {\n                !dataPanelExpand\n                    ? <Fragment>\n                        <table className={`table-laptop${isTablet || isMobile ? \"-hide\" : \"\" }`}>\n                            <tr>\n                                <td colspan=\"2\">\n                                    <div className={\"infected-panel-header\"}>Today's Global Cases</div>\n                                    <h2 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h2>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div className={\"panel-header\"}>Today's Global Deaths</div>\n                                    <h3 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h3>\n                                </td>\n                                <td>\n                                    <div className={\"panel-header\"}>Today's Global Recovered</div>\n                                    <h3 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h3>\n                                </td>\n                            </tr>\n                        </table>\n                        <div className={`country-panel${isTablet || isMobile ? \"-hide\" : \"\" }`}>\n                            <div className={\"panel-header\"}>Countries/Provinces</div>\n                            <h3 className={\"panel-number\"}>\n                                {filteredCountries.length}/{filteredProvinces.length}\n                            </h3>\n                        </div>\n                        <div className={`last-update-panel${isTablet || isMobile ? \"-hide\" : \"\" }`}>\n                            <div className={\"panel-header\"}>Last Updated at (M/D/YYYY)</div>\n                            <h3 className={\"panel-number\"}>\n                                {getFormattedDate(globalData[0].lastUpdate)}\n                            </h3>\n                        </div>\n                    </Fragment>\n                    : <Fragment>\n                        <table className={\"table-expand\"}>\n                            <tr>\n                                <td colspan=\"2\">\n                                    <span className={\"panel-header\"}>Today's Global Cases</span>\n                                    <h1 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h1>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Deaths</span>\n                                    <h2 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Recovered</span>\n                                    <h2 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h2>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Countries/Provinces</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {filteredCountries.length}/{filteredProvinces.length}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {getFormattedDate(globalData[0].lastUpdate)}\n                                    </h2>\n                                </td>\n                            </tr>\n                        </table>\n                    </Fragment>\n            }\n\n            <table className={`table${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\" }`}>\n                <tr>\n                    <td colspan=\"2\">\n                        <span className={\"panel-header\"}>Today's Global Cases</span>\n                        <h1 className={\"infected-panel-number\"}>\n                            {formatNumber(globalData[0].newConfirmed)}\n                        </h1>\n                    </td>\n\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Deaths</span>\n                        <h2 className={\"panel-number deaths-number\"}>\n                            {formatNumber(globalData[0].newDeaths)}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Recovered</span>\n                        <h2 className={\"panel-number recovered-number\"}>\n                            {formatNumber(globalData[0].newRecovered)}\n                        </h2>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Countries/Provinces</span>\n                        <h2 className={\"panel-number country-number\"}>\n                            {filteredCountries.length}/{filteredProvinces.length}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                        <h2 className={\"panel-number lastUpdate-number\"}>\n                            {getFormattedDate(globalData[0].lastUpdate)}\n                        </h2>\n                    </td>\n                </tr>\n            </table>\n        </Fragment>\n    )\n};\n\nexport default InfoPanel;","import React, { useState, useEffect, Fragment } from \"react\";\n\n//scss\nimport \"./PopupNavBars.scss\"\n\n//Fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons';\n\nconst navBars = < FontAwesomeIcon icon={faBars} />\nconst dropdown = < FontAwesomeIcon icon={faSortDown} />\n\nconst PopupNavBars = ({ isTablet, setIsTablet, isMobile, setIsMobile, setIsMap, setGlobalChartExpand, setGlobalDailyChartExpand, setInfectedCardExpand, setDeathsCardExpand, setActiveCardExpand, setMapExpand, setDataPanelExpand }) => {\n\n    const [popup, setPopup] = useState(false);\n    const [popupDataSource, setPopupDataSource] = useState(false);\n\n    return (\n        <div id=\"popup-nav-container\">\n            <div id=\"nav-icon\" onClick={() => { setPopup(!popup) }}>\n                {navBars}\n            </div>\n            {\n                popup\n                    ? <div id=\"popup-container\">\n                        <div className={\"popup-item\"}\n                            onClick={() => {\n                                setPopupDataSource(!popupDataSource)\n                            }}>\n                            <div>Data Source</div>\n                            <div className={`dropdown-icon${popupDataSource ? \"-up\" : \"\"}`}>{dropdown}</div>\n                        </div>\n                        {\n                            popupDataSource\n                                ? <div id=\"dropdown-items\">\n                                    <div onClick={() => setPopup(!popup) } className={\"dropdown-item\"}>\n                                        <a href=\"https://about-corona.net/documentation\" target=\"_blank\">ABOUT-CORONA.NET</a>\n                                    </div>\n                                    <div onClick={() => setPopup(!popup) } className={\"dropdown-item\"}>\n                                        <a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\">Mathdroid Covid-19 REST API v1.0</a>\n                                    </div>\n                                </div>\n                                : null\n                        }\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsTablet(!isTablet)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"cumulative\"))\n                                setPopup(!popup)\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                            }}\n                        >\n                            {\n                                !isTablet\n                                ? \"Tablet Version\"\n                                : \"Desktop Version\"\n                            }\n                            \n                         </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsMobile(!isMobile)\n                                setPopup(!popup)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"cumulative\"))\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                            }}\n                        >\n                            {\n                                !isMobile\n                                ? \"Mobile Version\"\n                                : \"Desktop Version\"\n                            }\n                        </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => { setPopup(!popup) }}\n                        >\n                            <a href=\"https://github.com/Shuto46490802\" target=\"_blank\">About</a>\n                        </div>\n                    </div>\n                    : null\n            }\n        </div >\n    )\n};\n\nexport default PopupNavBars;","import React, { useState, Fragment } from \"react\";\n\nimport \"./MobileButtonToggler.scss\"\n\nconst MobileButtonToggler = ({ setMobileItem, setIsMap, mobileItem, dropdown, setIsGlobal, setIsChart, arrowLeft, setIsInfectedCard, setIsDeathsRecoveredCard, setIsActiveIncidentCard }) => {\n\n    const [mapPopup, setMapPopup] = useState(false);\n    const [globalPopup, setGlobalPopup] = useState(false);\n    const [chartsPopup, setChartsPopup] = useState(false);\n    const [infectedPopup, setInfectedPopup] = useState(false);\n    const [deathsRecoveredPopup, setDeathsRecoveredPopup] = useState(false);\n    const [activeIncidentPopup, setActiveIncidentPopup] = useState(false);\n\n    //toggle mobile items\n    let {\n        totalsStyle,\n        mapStyle,\n        countriesStyle,\n        globalStyle,\n        chartsStyle,\n    } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    totalsStyle = mobileItem === \"totals\"\n        ? onStyle\n        : {}\n    mapStyle = mobileItem === \"map\"\n        ? onStyle\n        : {}\n    countriesStyle = mobileItem === \"countries\"\n        ? onStyle\n        : {}\n    globalStyle = mobileItem === \"global\"\n        ? onStyle\n        : {}\n    chartsStyle = mobileItem === \"charts\"\n        ? onStyle\n        : {}\n\n    return (\n        //totals\n        <div className={\"button-toggler-wrapper-mobile\"}>\n            <div className={\"button-popup-container\"}>\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"totals\")\n                        setMapPopup(false)\n                        setGlobalPopup(false)\n                        setChartsPopup(false)\n                    }}\n                    style={totalsStyle}\n                >\n                    Totals\n                    </div>\n            </div>\n\n            {/* Map */}\n            <div className={\"button-popup-container\"}>\n                {\n                    mapPopup\n                        ? <div className={\"popup-items\"}>\n                            <div\n                                className={\"popup-item\"}\n                                onClick={() => {\n                                    setIsMap(\"cumulative\")\n                                    setMapPopup(!mapPopup)\n                                }}>\n                                Cumulative Cases\n                                </div>\n                            <div\n                                className={\"popup-item\"}\n                                onClick={() => {\n                                    setIsMap(\"active\")\n                                    setMapPopup(!mapPopup)\n                                }}>\n                                Active Cases\n                                </div>\n                            <div\n                                className={\"popup-item\"}\n                                onClick={() => {\n                                    setIsMap(\"incidentRate\")\n                                    setMapPopup(!mapPopup)\n                                }}>\n                                Incident Rate\n                                </div>\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"map\")\n                        setGlobalPopup(false)\n                        setChartsPopup(false)\n                        if (mobileItem === \"map\") {\n                            setMapPopup(!mapPopup)\n                        }\n                    }}\n                    style={mapStyle}\n                >\n                    Map\n                        {\n                        mobileItem === \"map\"\n                            ? <div className={`mobile-button-icon${mapPopup ? \"-active\" : \"\"}`}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n\n            {/* Global */}\n            <div className={\"button-popup-container\"}>\n                {\n                    globalPopup\n                        ? <div className={\"popup-container\"}>\n                            <div className={\"popup-items\"}>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setIsGlobal(\"infected\")\n                                        setInfectedPopup(!infectedPopup)\n                                        setDeathsRecoveredPopup(false)\n                                        setActiveIncidentPopup(false)\n                                    }}>\n                                    <div>Infected Cases</div>\n                                    <div className={\"arrow-icon\"}>{arrowLeft}</div>\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setIsGlobal(\"deathsRecovered\")\n                                        setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                        setInfectedPopup(false)\n                                        setActiveIncidentPopup(false)\n                                    }}>\n                                    <div>Deaths/Recovered</div>\n                                    <div className={\"arrow-icon\"}>{arrowLeft}</div>\n                                </div>\n                                <div\n                                    className={\"popup-item\"}\n                                    onClick={() => {\n                                        setIsGlobal(\"activeIncidentRate\")\n                                        setActiveIncidentPopup(!activeIncidentPopup)\n                                        setInfectedPopup(false)\n                                        setDeathsRecoveredPopup(false)\n                                    }}>\n                                    <div>Active Cases/Incident Rate</div>\n                                    <div className={\"arrow-icon\"}>{arrowLeft}</div>\n                                </div>\n                            </div>\n                            {\n                                infectedPopup\n                                    ? <div className={\"popup-sub-items\"}>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setIsInfectedCard(\"admin0\")\n                                                setGlobalPopup(!globalPopup)\n                                                setInfectedPopup(!infectedPopup)\n                                            }}>\n                                            Admin 0\n                                        </div>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setIsInfectedCard(\"admin2\")\n                                                setGlobalPopup(!globalPopup)\n                                                setInfectedPopup(!infectedPopup)\n                                            }}>\n                                            Admin 2\n                                        </div>\n                                        <div\n                                            className={\"popup-sub-item\"}\n                                            onClick={() => {\n                                                setIsInfectedCard(\"today\")\n                                                setGlobalPopup(!globalPopup)\n                                                setInfectedPopup(!infectedPopup)\n                                            }}>\n                                            Global Today's Cases\n                                        </div>\n                                    </div>\n                                    : deathsRecoveredPopup\n                                        ? <div className={\"popup-sub-items\"}>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setIsDeathsRecoveredCard(\"deaths\")\n                                                    setGlobalPopup(!globalPopup)\n                                                    setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                                }}>\n                                                Deaths\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setIsDeathsRecoveredCard(\"recovered\")\n                                                    setGlobalPopup(!globalPopup)\n                                                    setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                                }}>\n                                                Recovered\n                                            </div>\n                                            <div\n                                                className={\"popup-sub-item\"}\n                                                onClick={() => {\n                                                    setIsDeathsRecoveredCard(\"today\")\n                                                    setGlobalPopup(!globalPopup)\n                                                    setDeathsRecoveredPopup(!deathsRecoveredPopup)\n                                                }}>\n                                                Global Today's Deaths\n                                            </div>\n                                        </div>\n                                        : activeIncidentPopup\n                                            ? <div className={\"popup-sub-items\"}>\n                                                <div\n                                                    className={\"popup-sub-item\"}\n                                                    onClick={() => {\n                                                        setIsActiveIncidentCard(\"active\")\n                                                        setGlobalPopup(!globalPopup)\n                                                        setActiveIncidentPopup(!activeIncidentPopup)\n                                                    }}>\n                                                    Active Cases\n                                                </div>\n                                                <div\n                                                    className={\"popup-sub-item\"}\n                                                    onClick={() => {\n                                                        setIsActiveIncidentCard(\"incidentRate\")\n                                                        setGlobalPopup(!globalPopup)\n                                                        setActiveIncidentPopup(!activeIncidentPopup)\n                                                    }}>\n                                                    Incident Rate\n                                                </div>\n                                            </div>\n                                            : null\n                            }\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"global\")\n                        setMapPopup(false)\n                        setChartsPopup(false)\n                        if (mobileItem === \"global\") {\n                            setGlobalPopup(!globalPopup)\n                        }\n                    }}\n                    style={globalStyle}\n                >\n                    <div>Global</div>\n                    {\n                        mobileItem === \"global\"\n                            ? <div\n                                className={`mobile-button-icon${globalPopup ? \"-active\" : \"\"}`}\n                                onClick={() => { setGlobalPopup(!globalPopup) }}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n\n            {/* Countries */}\n            <div className={\"button-popup-container\"}>\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"countries\")\n                        setMapPopup(false)\n                        setGlobalPopup(false)\n                        setChartsPopup(false)\n                    }}\n                    style={countriesStyle}\n                >\n                    Countries\n                    </div>\n            </div>\n\n            {/* Charts */}\n            <div className={\"button-popup-container\"}>\n                {\n                    chartsPopup\n                        ? <div className={\"popup-items\"}>\n                            <div\n                                className={\"popup-item\"}\n                                onClick={() => {\n                                    setIsChart(\"globalChart\")\n                                    setChartsPopup(!chartsPopup)\n                                }}>\n                                <div>Global Charts</div>\n                                <div className={\"arrow-icon\"}>{arrowLeft}</div>\n                            </div>\n                            <div\n                                className={\"popup-item\"}\n                                onClick={() => {\n                                    setIsChart(\"dailyChart\")\n                                    setChartsPopup(!chartsPopup)\n                                }}>\n                                <div>Daily Charts</div>\n                                <div className={\"arrow-icon\"}>{arrowLeft}</div>\n                            </div>\n                        </div>\n                        : null\n                }\n                <div\n                    className={\"button-toggler\"}\n                    onClick={() => {\n                        setMobileItem(\"charts\")\n                        setMapPopup(false)\n                        setGlobalPopup(false)\n                        if (mobileItem === \"charts\") {\n                            setChartsPopup(!chartsPopup)\n                        }\n                    }}\n                    style={chartsStyle}\n                >\n                    Charts\n                    {\n                        mobileItem === \"charts\"\n                            ? <div className={`mobile-button-icon${chartsPopup ? \"-active\" : \"\"}`}>\n                                {dropdown}\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default MobileButtonToggler;","import React, { useState, useEffect, Fragment } from \"react\";\n\n//Components \nimport CountryPicker from \"./Components/CountryPicker/CountryPicker\";\nimport GlobalCharts from \"./Components/Charts/GlobalCharts\";\nimport CountryCharts from \"./Components/Charts/CountryCharts\";\nimport GlobalTodayCharts from \"./Components/Charts/GlobalTodayCharts\";\nimport Maps from \"./Components/Maps/Maps\";\nimport InfectedCard from \"./Components/Cards/InfectedCard/InfectedCard\";\nimport DeathsRecoveredCard from \"./Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard\";\nimport ActiveIncidentRateCard from \"./Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard\";\nimport InfoPanel from \"./Components/InfoPanel/InfoPanel\";\nimport PopupNavBars from \"./Components/PopupNavBars/PopupNavBars\";\nimport MobileButtonToggler from \"./Components/MobileButtonToggler/MobileButtonToggler\";\n\nimport \"./css/App.scss\";\n\nimport { fetchProvinceData, fetchCountriesData, fetchGlobaldata, fetchCountriesYearlyData } from \"./api\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons';\n\n\n\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst arrowLeft = < FontAwesomeIcon icon={faCaretLeft} />\nconst arrowRight = < FontAwesomeIcon icon={faCaretRight} />\nconst expandIcon = < FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst shrinkIcon = < FontAwesomeIcon icon={faCompressArrowsAlt} />\nconst dropdown = < FontAwesomeIcon icon={faSortDown} />\n\n\nconst App = () => {\n\n    //Fetch API Datas\n    const [globalData, setGlobaldata] = useState({})\n    const [country, setCountry] = useState(\"select a country\");\n    const [countriesData, setCountriesData] = useState({});\n    const [provincesData, setProvincesData] = useState();\n    const [countriesYearlyData, setCountriesYearlyData] = useState({});\n\n    //Expand or Hide\n    const [infectedCardExpand, setInfectedCardExpand] = useState(false);\n    const [deathsdCardExpand, setDeathsCardExpand] = useState(false);\n    const [activeCardExpand, setActiveCardExpand] = useState(false);\n    const [mapExpand, setMapExpand] = useState(false);\n    const [dataPanelExpand, setDataPanelExpand] = useState(false);\n    const [globalDailyChartExpand, setGlobalDailyChartExpand] = useState(false);\n    const [globalChartExpand, setGlobalChartExpand] = useState(false);\n\n    //Hover Expand and Shrink Icons\n    const [isPanelHover, setIsPanelHover] = useState(false);\n    const [isTodayChartHover, setIsTodayChartHover] = useState(false);\n\n    //Toggle Map \n    const [isMap, setIsMap] = useState(\"cumulative\");\n\n    //Toggle Cards\n    const [isInfectedCard, setIsInfectedCard] = useState(\"admin0\");\n    const [isDeathsRecoveredCard, setIsDeathsRecoveredCard] = useState(\"deaths\");\n    const [isActiveIncidentCard, setIsActiveIncidentCard] = useState(\"active\");\n\n    //Tablet or Mobile Version\n    const [isTablet, setIsTablet] = useState(false);\n    const [isMobile, setIsMobile] = useState(false);\n\n    //Toggle Mobile between Items\n    const [mobileItem, setMobileItem] = useState(\"totals\")\n\n    //Toggle Mobile Categories \n    const [isGlobal, setIsGlobal] = useState(\"infected\");\n    const [isChart, setIsChart] = useState(\"globalChart\")\n\n    //Loader\n    const [isLoad, setIsLoad] = useState(true)\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setProvincesData(await fetchProvinceData());\n            setCountriesData(await fetchCountriesData());\n            setGlobaldata(await fetchGlobaldata());\n        }\n        fetchAPI();\n    }, [setCountriesData]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 2000)\n    })\n\n    const loader = <Loader\n        type=\"Bars\"\n        color=\"#3500D3\"\n        height={100}\n        width={100}\n        timeout={2000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={\"loader-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    }\n\n    //country picker\n    const toggleCountry = async (country) => {\n        setCountry(country);\n        setCountriesYearlyData(await fetchCountriesYearlyData(country));\n    };\n\n    // separate number with separator\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //format for chart d\n    const option = {\n        maintainAspectRatio: false,\n        legend: { display: false },\n        tooltips: {\n            xPadding: 15,\n            yPadding: 15,\n            yAlign: \"bottom\",\n            callbacks: {\n                title: (items, data) => data['labels'][items[0]['index']],\n                label: (item, data) => formatNumber(data['datasets'][0]['data'][item['index']])\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                },\n                ticks: {\n                    maxTicksLimit: 6,\n                    fontColor: \"#f5f5f5\",\n                    fontSize: 10\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    maxTicksLimit: 8,\n                    callback: function numFormatter(num) {\n                        if (num > 999 && num < 1000000) {\n                            return Math.floor((num / 1000).toFixed(1)) + 'K';\n                        } else if (num >= 10000000) {\n                            return Math.floor((num / 1000000).toFixed(1)) + 'M';\n                        } else if (num >= 1000000) {\n                            return (num / 1000000).toFixed(1) + 'M';\n                        } else if (num < 900) {\n                            return num;\n                        }\n                    },\n                    fontColor: \"#f5f5f5\",\n                },\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                }\n            }]\n        }\n    };\n\n    //toggle expand and hide  \n    const classes =\n        infectedCardExpand\n            ? [\"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n            : dataPanelExpand\n                ? [\"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                : mapExpand\n                    ? [\"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                    : globalDailyChartExpand\n                        ? [\"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\"]\n                        : deathsdCardExpand\n                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\"]\n                            : activeCardExpand\n                                ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\"]\n                                : globalChartExpand\n                                    ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\"]\n                                    : [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n    const columnClasses =\n        infectedCardExpand || dataPanelExpand\n            ? [\"expand\", \"hide\", \"hide\"]\n            : mapExpand || globalDailyChartExpand\n                ? [\"hide\", \"expand\", \"hide\"]\n                : deathsdCardExpand || activeCardExpand || globalChartExpand\n                    ? [\"hide\", \"hide\", \"expand\"]\n                    : [\"\", \"\", \"\"];\n\n    console.log(isMap)\n\n    return (\n        <div className={`app${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"\"}`} >\n            <header>\n                <img src=\"https://www.tiabc.ca/wp-content/uploads/home/COVID%E2%80%9419.png\" alt=\"covid-19 logo\" />\n                <div id=\"header-title\">\n                    <h1>World COVID-19 Dashboard</h1>\n                    <span id=\"header-border\"></span>\n                    <div id=\"header-footer\">\n                        <span>Desinged and Coded</span>\n                        <span>by Shuto.S</span>\n                    </div>\n                </div>\n                <div id=\"nav\">\n                    <p className={\"nav-text\"}>Global Map</p>\n                    <p className={\"nav-text\"}>Country Map</p>\n                    <div id=\"popup-nav-bars\">\n                        <PopupNavBars\n                            isTablet={isTablet}\n                            setIsTablet={setIsTablet}\n                            isMobile={isMobile}\n                            setIsMobile={setIsMobile}\n                            setIsMap={setIsMap}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            setDeathsCardExpand={setDeathsCardExpand}\n                            setActiveCardExpand={setActiveCardExpand}\n                            setMapExpand={setMapExpand}\n                            setDataPanelExpand={setDataPanelExpand}\n                            setGlobalDailyChartExpand={setGlobalDailyChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            dropdown={dropdown}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <div className={`desktop${isTablet || isMobile ? \"-hide\" : \"\"}`} >\n                <div\n                    className={`column${columnClasses[0]} column1`}\n                >\n                    <div\n                        id={\"infected-card\"}\n                        className={classes[0]}\n                    >\n                        <InfectedCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            infectedCardExpand={infectedCardExpand}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            isInfectedCard={isInfectedCard}\n                            setIsInfectedCard={setIsInfectedCard}\n                        />\n                    </div>\n                    <div\n                        id=\"info-panel\"\n                        className={classes[1]}\n                        onMouseEnter={() => setIsPanelHover(true)}\n                        onMouseLeave={() => setIsPanelHover(false)}\n                    >\n                        {\n                            isPanelHover\n                                ? !dataPanelExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => { setDataPanelExpand(true) }}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setDataPanelExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <InfoPanel\n                            globalData={globalData}\n                            countriesData={countriesData}\n                            provincesData={provincesData}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            dataPanelExpand={dataPanelExpand}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                </div>\n                <div className={`column${columnClasses[1]} column2`}>\n                    <div\n                        id=\"map\"\n                        className={classes[2]}\n                    >\n                        <Maps\n                            classes={classes}\n                            provincesData={provincesData}\n                            setMapExpand={setMapExpand}\n                            mapExpand={mapExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            isMap={isMap}\n                            setIsMap={setIsMap}\n                        />\n                    </div>\n                    <div\n                        id=\"country-picker-chart\"\n                        className={classes[3]}\n                        onMouseEnter={() => setIsTodayChartHover(true)}\n                        onMouseLeave={() => setIsTodayChartHover(false)}\n                    >\n                        {\n                            isTodayChartHover\n                                ? !globalDailyChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalDailyChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalDailyChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <div id=\"country-picker\">\n                            <CountryPicker\n                                classes={classes}\n                                toggleCountry={toggleCountry}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                            />\n                        </div>\n                        <div id=\"country-chart\">\n                            {\n                                country === \"select a country\"\n                                    ? <GlobalTodayCharts\n                                        globalData={globalData}\n                                        arrowRight={arrowRight}\n                                        arrowLeft={arrowLeft}\n                                        option={option}\n                                        classes={classes}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        isTablet={isTablet}\n                                        isMobile={isMobile}\n                                    />\n                                    : <CountryCharts\n                                        countriesYearlyData={countriesYearlyData}\n                                        arrowLeft={arrowLeft}\n                                        arrowRight={arrowRight}\n                                        option={option}\n                                        classes={classes}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        isTablet={isTablet}\n                                        isMobile={isMobile}\n                                    />\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className={`column${columnClasses[2]} column3`}>\n                    <div className={`row${globalChartExpand ? \"-hide\" : \"\"}`} >\n                        <div\n                            id=\"deaths-recovered-card\"\n                            className={classes[4]}\n                        >\n                            <DeathsRecoveredCard\n                                countriesData={countriesData}\n                                globalData={globalData}\n                                classes={classes}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                deathsdCardExpand={deathsdCardExpand}\n                                setDeathsCardExpand={setDeathsCardExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                                isDeathsRecoveredCard={isDeathsRecoveredCard}\n                                setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                            />\n                        </div>\n                        <div\n                            id=\"active-incident-card\"\n                            className={classes[5]}\n                        >\n                            <ActiveIncidentRateCard\n                                provincesData={provincesData}\n                                classes={classes}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                activeCardExpand={activeCardExpand}\n                                setActiveCardExpand={setActiveCardExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                                isActiveIncidentCard={isActiveIncidentCard}\n                                setIsActiveIncidentCard={setIsActiveIncidentCard}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        id=\"global-chart\"\n                        className={classes[6]}\n                    >\n                        <GlobalCharts\n                            globalData={globalData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            option={option}\n                            classes={classes}\n                            globalChartExpand={globalChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            {/* Tablet */}\n            <div className={`tablet${isTablet ? \"-version\" : isMobile ? \"-hide\" : \"-responsive\"}`}>\n                <div className={\"tablet-item\"} id=\"map-tablet\">\n                    <Maps\n                        classes={classes}\n                        provincesData={provincesData}\n                        setMapExpand={setMapExpand}\n                        mapExpand={mapExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        isMap={isMap}\n                        setIsMap={setIsMap}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div className={\"tablet-item\"} id={\"infected-card-tablet\"}>\n                    <InfectedCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        provincesData={provincesData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        infectedCardExpand={infectedCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        setInfectedCardExpand={setInfectedCardExpand}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isInfectedCard={isInfectedCard}\n                        setIsInfectedCard={setIsInfectedCard}\n                    />\n                </div>\n                <div className={\"deaths-active-card tablet-item\"}>\n                    <DeathsRecoveredCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        deathsdCardExpand={deathsdCardExpand}\n                        setDeathsCardExpand={setDeathsCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isDeathsRecoveredCard={isDeathsRecoveredCard}\n                        setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                    />\n                </div>\n                <div className={\"deaths-active-card tablet-item\"}>\n                    <ActiveIncidentRateCard\n                        provincesData={provincesData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        activeCardExpand={activeCardExpand}\n                        setActiveCardExpand={setActiveCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                        isActiveIncidentCard={isActiveIncidentCard}\n                        setIsActiveIncidentCard={setIsActiveIncidentCard}\n                    />\n                </div>\n                <div id=\"country-picker-chart\" className={\"tablet-item\"}>\n                    <div id=\"country-picker\">\n                        <CountryPicker\n                            classes={classes}\n                            toggleCountry={toggleCountry}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                    <div id=\"country-chart\">\n                        {\n                            country === \"select a country\"\n                                ? <GlobalTodayCharts\n                                    globalData={globalData}\n                                    arrowRight={arrowRight}\n                                    arrowLeft={arrowLeft}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                />\n                                : <CountryCharts\n                                    countriesYearlyData={countriesYearlyData}\n                                    arrowLeft={arrowLeft}\n                                    arrowRight={arrowRight}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                />\n                        }\n                    </div>\n                </div>\n                <div id=\"global-chart\" className={\"tablet-item\"}>\n                    <GlobalCharts\n                        globalData={globalData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        option={option}\n                        classes={classes}\n                        globalChartExpand={globalChartExpand}\n                        setGlobalChartExpand={setGlobalChartExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div id=\"info-panel\" className={\"tablet-item\"}>\n                    <InfoPanel\n                        globalData={globalData}\n                        countriesData={countriesData}\n                        provincesData={provincesData}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n            </div>\n\n            {/* Mobile */}\n            <div className={`mobile${!isMobile ? \"-hide\" : \"\"}`}>\n                <div className={\"mobile-item\"}>\n                    {\n                        mobileItem === \"totals\"\n                            ? <InfoPanel\n                                globalData={globalData}\n                                countriesData={countriesData}\n                                provincesData={provincesData}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                            />\n                            : mobileItem === \"map\"\n                                ? <Maps\n                                    classes={classes}\n                                    provincesData={provincesData}\n                                    setMapExpand={setMapExpand}\n                                    mapExpand={mapExpand}\n                                    expandIcon={expandIcon}\n                                    shrinkIcon={shrinkIcon}\n                                    isMap={isMap}\n                                    setIsMap={setIsMap}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                />\n                                : mobileItem === \"global\"\n                                    ? isGlobal === \"infected\"\n                                        ? <InfectedCard\n                                            countriesData={countriesData}\n                                            globalData={globalData}\n                                            provincesData={provincesData}\n                                            arrowLeft={arrowLeft}\n                                            arrowRight={arrowRight}\n                                            infectedCardExpand={infectedCardExpand}\n                                            expandIcon={expandIcon}\n                                            shrinkIcon={shrinkIcon}\n                                            setInfectedCardExpand={setInfectedCardExpand}\n                                            formatNumber={formatNumber}\n                                            isTablet={isTablet}\n                                            isMobile={isMobile}\n                                            isInfectedCard={isInfectedCard}\n                                            setIsInfectedCard={setIsInfectedCard}\n                                        />\n                                        : isGlobal === \"deathsRecovered\"\n                                            ? <DeathsRecoveredCard\n                                                countriesData={countriesData}\n                                                globalData={globalData}\n                                                classes={classes}\n                                                arrowLeft={arrowLeft}\n                                                arrowRight={arrowRight}\n                                                deathsdCardExpand={deathsdCardExpand}\n                                                setDeathsCardExpand={setDeathsCardExpand}\n                                                expandIcon={expandIcon}\n                                                shrinkIcon={shrinkIcon}\n                                                formatNumber={formatNumber}\n                                                isTablet={isTablet}\n                                                isMobile={isMobile}\n                                                isDeathsRecoveredCard={isDeathsRecoveredCard}\n                                                setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                                            />\n                                            : isGlobal === \"activeIncidentRate\"\n                                                ? <ActiveIncidentRateCard\n                                                    provincesData={provincesData}\n                                                    classes={classes}\n                                                    arrowLeft={arrowLeft}\n                                                    arrowRight={arrowRight}\n                                                    activeCardExpand={activeCardExpand}\n                                                    setActiveCardExpand={setActiveCardExpand}\n                                                    expandIcon={expandIcon}\n                                                    shrinkIcon={shrinkIcon}\n                                                    formatNumber={formatNumber}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                    isActiveIncidentCard={isActiveIncidentCard}\n                                                    setIsActiveIncidentCard={setIsActiveIncidentCard}\n                                                />\n                                                : null\n                                    : mobileItem === \"countries\"\n                                        ? <Fragment>\n                                            <div className={\"country-picker\"}>\n                                                <CountryPicker\n                                                    classes={classes}\n                                                    toggleCountry={toggleCountry}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                />\n                                            </div>\n                                            <div className={\"country-charts\"}>\n                                                <CountryCharts\n                                                    countriesYearlyData={countriesYearlyData}\n                                                    arrowLeft={arrowLeft}\n                                                    arrowRight={arrowRight}\n                                                    option={option}\n                                                    classes={classes}\n                                                    globalDailyChartExpand={globalDailyChartExpand}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                />\n                                            </div>\n                                        </Fragment>\n                                        : mobileItem === \"charts\"\n                                            ? isChart === \"globalChart\"\n                                                ? <GlobalCharts\n                                                    globalData={globalData}\n                                                    arrowLeft={arrowLeft}\n                                                    arrowRight={arrowRight}\n                                                    option={option}\n                                                    classes={classes}\n                                                    globalChartExpand={globalChartExpand}\n                                                    setGlobalChartExpand={setGlobalChartExpand}\n                                                    expandIcon={expandIcon}\n                                                    shrinkIcon={shrinkIcon}\n                                                    isTablet={isTablet}\n                                                    isMobile={isMobile}\n                                                />\n                                                : isChart === \"dailyChart\"\n                                                    ? <GlobalTodayCharts\n                                                        globalData={globalData}\n                                                        arrowRight={arrowRight}\n                                                        arrowLeft={arrowLeft}\n                                                        option={option}\n                                                        classes={classes}\n                                                        globalDailyChartExpand={globalDailyChartExpand}\n                                                        isTablet={isTablet}\n                                                        isMobile={isMobile}\n                                                    />\n                                                    : null\n                                            : null\n                    }\n                </div>\n                <MobileButtonToggler\n                    setMobileItem={setMobileItem}\n                    setIsMap={setIsMap}\n                    mobileItem={mobileItem}\n                    dropdown={dropdown}\n                    setIsGlobal={setIsGlobal}\n                    setIsChart={setIsChart}\n                    arrowLeft={arrowLeft}\n                    setIsInfectedCard={setIsInfectedCard}\n                    setIsDeathsRecoveredCard={setIsDeathsRecoveredCard}\n                    setIsActiveIncidentCard={setIsActiveIncidentCard}\n                />\n            </div>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
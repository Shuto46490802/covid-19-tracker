{"version":3,"sources":["api/index.js","Components/CountryPicker/CountryPicker.js","Components/Charts/GlobalCharts.js","Components/Charts/CountryCharts.js","Components/Charts/GlobalTodayCharts.js","Components/Maps/CamulativeMap/CamulativeMap.js","Components/Maps/ActiveMap/ActiveMap.js","Components/Maps/IncidentRate/IncidentRate.js","Components/Maps/Maps.js","Components/Cards/InfectedCard/InfectedCard.js","Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js","Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js","Components/InfoPanel/InfoPanel.js","Components/PopupNavBars/PopupNavBars.js","App.js","index.js"],"names":["fetchCountriesYearlyData","country","a","changableUrl","axios","get","data","latest_data","timeline","name","fetchGlobaldata","map","active","confirmed","date","deaths","recovered","newConfirmed","new_confirmed","newDeaths","new_deaths","newRecovered","new_recovered","lastUpdate","updated_at","fetchCountry","code","fetchCountriesData","latestData","todayData","today","fetchProvinceData","promises","countries","lat","long","countryRegion","key","combinedKey","incidentRate","getData","Promise","all","promise","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","CountryPicker","classes","toggleCountry","globalDailyChartExpand","isTablet","isMobile","useState","setCountries","useEffect","fetchAPI","modifiedData","filter","sort","b","className","FormControl","id","InputLabel","shrink","NativeSelect","onChange","e","target","value","i","GlobalCharts","globalData","arrowLeft","arrowRight","option","globalChartExpand","setGlobalChartExpand","expandIcon","shrinkIcon","isChart","setIsChart","isHover","setIsHover","setIsLoad","setTimeout","infectedStyle","deathsStyle","recoveredStyle","reverse","infectedLineChart","length","labels","datasets","fill","lineTension","borderColor","backgroundColor","pointRadius","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","options","deathsLineChart","recoveredLineChart","onStyle","borderBottom","offStyle","onMouseEnter","onMouseLeave","onClick","style","CountryCharts","countriesYearlyData","isLoad","loader","type","color","height","width","timeout","modifiedTimeLine","label","barChart","maintainAspectRatio","legend","display","title","scales","xAxes","gridLines","zeroLineColor","ticks","maxTicksLimit","fontColor","yAxes","callback","num","toFixed","GlobalTodayCharts","isInfectedActiveChart","setIsInfectedActiveChart","isDeathsRecoveredChart","setIsDeathsRecoveredChart","activeStyle","toggleInfectedActiveChart","toggleDeathsRecoveredChart","infectedBarChart","activeBarChart","recoveredBarChart","deathsBarChart","CamulativeMap","noProvince","formatNumber","usProvinces","provinces","toggleIconSize","mapExpand","iconSize","L","Icon","iconUrl","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Popup","ActiveMap","props","IncidentRate","Math","floor","Maps","provincesData","setMapExpand","isMap","setIsMap","calmulativeStyle","incidentRateStyle","inputNumber","formetedNumber","Number","replace","splitArray","split","InfectedCard","countriesData","infectedCardExpand","setInfectedCardExpand","isCard","setIsCard","admin0Style","admin2Style","todayStyle","modifiedGlobalCasesData","modifiedProvincesData","flat","modifiedTodayData","DeathsRecoveredCard","deathsdCardExpand","setDeathsCardExpand","modifiedGlobalDeathsData","modifiedGlobalRecoveredData","ActiveIncidentRateCard","activeCardExpand","setActiveCardExpand","modifiedActiveData","activeDataSum","reduce","modifiedIncidentRateData","numberOfProvinces","incidentRateAvarage","toggleActiveIncidentRateCard","InfoPanel","dataPanelExpand","filteredCountries","filteredProvinces","getFormattedDate","String","Date","month","slice","day","year","hour","ampm","colspan","navBars","faBars","dropdown","faSortDown","PopupNavBars","setIsTablet","setIsMobile","setGlobalDailyChartExpand","setDataPanelExpand","popup","setPopup","popupDataSource","setPopupDataSource","href","faCaretLeft","faCaretRight","faExpandArrowsAlt","faCompressArrowsAlt","App","setGlobaldata","setCountry","setCountriesData","setProvincesData","setCountriesYearlyData","isPanelHover","setIsPanelHover","isTodayChartHover","setIsTodayChartHover","tooltips","xPadding","yPadding","yAlign","callbacks","items","item","fontSize","columnClasses","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"idAKaA,EAAwB,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,yDACpB,qBAAZD,EADgC,yCAEzB,cAFyB,cAIhCE,EAJgC,2CAIoBF,GAJpB,kBAMkCG,IAAMC,IAAIF,GAN5C,2BAMxBG,KAAQA,KAAQC,EANQ,EAMRA,YAAaC,EANL,EAMKA,SAAUC,EANf,EAMeA,KANf,kBAOzB,CAAEF,cAAaC,WAAUC,SAPA,4FAAH,sDAaxBC,EAAe,uCAAG,8BAAAR,EAAA,4DACjB,kCADiB,kBAGUE,IAAMC,IAFjC,mCADiB,uBAGPC,EAHO,EAGfA,KAAQA,KAHO,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBM,OAAQN,EAAKM,OACbC,UAAWP,EAAKO,UAChBC,KAAMR,EAAKQ,KACXC,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBC,aAAcX,EAAKY,cACnBC,UAAWb,EAAKc,WAChBC,aAAcf,EAAKgB,cACnBC,WAAYjB,EAAKkB,gBAbE,yFAAH,qDAoBfC,EAAY,uCAAG,8BAAAvB,EAAA,4DACd,mCADc,kBAGaE,IAAMC,IAFjC,oCADc,uBAGJC,EAHI,EAGZA,KAAQA,KAHI,kBAKbA,EAAKK,KAAI,kBAAkC,CAC9CF,KADY,EAAGA,KAEfiB,KAFY,EAASA,KAGrBpB,KAHY,EAAeC,iBALX,yFAAH,qDAiBZoB,EAAkB,uCAAG,8BAAAzB,EAAA,4DACpB,mCADoB,kBAIOE,IAAMC,IAHjC,oCADoB,uBAIVC,EAJU,EAIlBA,KAAQA,KAJU,kBAKnBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBL,QAASK,EAAKG,KACdmB,WAAYtB,EAAKC,YACjBsB,UAAWvB,EAAKwB,WARM,yFAAH,qDAgBlBC,EAAiB,uCAAG,8BAAA7B,EAAA,6DAEvB8B,EAAWC,EAAUtB,IAAV,uCAAc,WAAOV,GAAP,iBAAAC,EAAA,+EAEAE,IAAMC,IAAN,UAzEvB,iCAyEuB,sBAA8BJ,EAA9B,eAFA,uBAEfK,EAFe,EAEfA,KAFe,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBO,UAAWP,EAAKO,UAChBE,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBJ,OAAQN,EAAKM,OACbsB,IAAK5B,EAAK4B,IACVC,KAAM7B,EAAK6B,KACXlC,QAASK,EAAK8B,cACdC,IAAK/B,EAAKgC,YACVC,aAAcjC,EAAKiC,kBAbA,yFAAd,uDAmBXC,EArBuB,+BAAAtC,EAAA,MAqBb,sBAAAA,EAAA,sEACCuC,QAAQC,IAAIV,EAASrB,IAAT,uCAAa,WAAOgC,GAAP,SAAAzC,EAAA,+EAC3ByC,GAD2B,2CAAb,wDADb,mFArBa,8DA0BhBH,IA1BgB,mFAAH,qDA6BxBP,EACF,CAAC,cACG,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,QACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,sBACA,mBACA,aACA,UACA,OACA,SACA,UACA,UACA,mBACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,kBACA,SACA,OACA,WACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,SACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,cACA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","file":"static/js/main.3460d4eb.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\n//for countries charts\nexport const fetchCountriesYearlyData = async (country) => {\n    if (country === \"select a country\") {\n        return \"Loading...\"\n    }\n    var changableUrl = (`https://corona-api.com/countries/${country}`)\n    try {\n        const { data: { data: { latest_data, timeline, name } } } = await axios.get(changableUrl);\n        return { latest_data, timeline, name }\n    } catch (error) {\n    }\n}\n\n//fetch global datas\nexport const fetchGlobaldata = async () => {\n    let url = \"https://corona-api.com/timeline\"\n    try {\n        const { data: { data } } = await axios.get(url);\n        return data.map((data) => ({\n            active: data.active,\n            confirmed: data.confirmed,\n            date: data.date,\n            deaths: data.deaths,\n            recovered: data.recovered,\n            newConfirmed: data.new_confirmed,\n            newDeaths: data.new_deaths,\n            newRecovered: data.new_recovered,\n            lastUpdate: data.updated_at\n        }));\n    } catch (error) {\n    }\n}\n\n//for country picker\nexport const fetchCountry = async () => {\n    let url = \"https://corona-api.com/countries\"\n    try {\n        const { data: { data } } = await axios.get(url);\n\n        return data.map(({ name, code, latest_data }) => ({\n            name: name,\n            code: code,\n            data: latest_data\n        }))\n\n    } catch (error) {\n\n    }\n};\n\n//for country infected, deaths and recovered list \nexport const fetchCountriesData = async () => {\n    let url = \"https://corona-api.com/countries\"\n\n    try {\n        const { data: { data } } = await axios.get(url)\n        return data.map((data) => ({\n            country: data.name,\n            latestData: data.latest_data,\n            todayData: data.today\n        }))\n\n    } catch (error) {\n    }\n};\n\n//for Map\nexport const fetchProvinceData = async () => {\n\n    const promises = countries.map(async (country) => {\n        try {\n            const { data } = await axios.get(`${url}/countries/${country}/confirmed`);\n\n            return data.map((data) => ({\n                confirmed: data.confirmed,\n                deaths: data.deaths,\n                recovered: data.recovered,\n                active: data.active,\n                lat: data.lat,\n                long: data.long,\n                country: data.countryRegion,\n                key: data.combinedKey,\n                incidentRate: data.incidentRate\n            }));\n        } catch (error) {\n        }\n    });\n\n    const getData = async () => {\n        return await Promise.all(promises.map(async (promise) => {\n            return promise\n        }))\n    }\n    return await getData();\n};\n\nconst countries =\n    [\"Afghanistan\",\n        \"Albania\",\n        \"Algeria\",\n        \"Andorra\",\n        \"Angola\",\n        \"Antigua and Barbuda\",\n        \"Argentina\",\n        \"Armenia\",\n        \"Australia\",\n        \"Austria\",\n        \"Azerbaijan\",\n        \"Bahamas\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Barbados\",\n        \"Belarus\",\n        \"Belgium\",\n        \"Belize\",\n        \"Benin\",\n        \"Bhutan\",\n        \"Bolivia\",\n        \"Bosnia and Herzegovina\",\n        \"Botswana\",\n        \"Brazil\",\n        \"Brunei\",\n        \"Bulgaria\",\n        \"Burkina Faso\",\n        \"Burma\",\n        \"Burundi\",\n        \"Cabo Verde\",\n        \"Cambodia\",\n        \"Cameroon\",\n        \"Canada\",\n        \"Central African Republic\",\n        \"Chad\",\n        \"Chile\",\n        \"China\",\n        \"Colombia\",\n        \"Comoros\",\n        \"Congo (Brazzaville)\",\n        \"Congo (Kinshasa)\",\n        \"Costa Rica\",\n        \"Croatia\",\n        \"Cuba\",\n        \"Cyprus\",\n        \"Czechia\",\n        \"Denmark\",\n        \"Diamond Princess\",\n        \"Djibouti\",\n        \"Dominica\",\n        \"Dominican Republic\",\n        \"Ecuador\",\n        \"Egypt\",\n        \"El Salvador\",\n        \"Equatorial Guinea\",\n        \"Eritrea\",\n        \"Estonia\",\n        \"Eswatini\",\n        \"Ethiopia\",\n        \"Fiji\",\n        \"Finland\",\n        \"France\",\n        \"Gabon\",\n        \"Gambia\",\n        \"Georgia\",\n        \"Germany\",\n        \"Ghana\",\n        \"Greece\",\n        \"Grenada\",\n        \"Guatemala\",\n        \"Guinea\",\n        \"Guinea-Bissau\",\n        \"Guyana\",\n        \"Haiti\",\n        \"Holy See\",\n        \"Honduras\",\n        \"Hungary\",\n        \"Iceland\",\n        \"India\",\n        \"Indonesia\",\n        \"Iran\",\n        \"Iraq\",\n        \"Ireland\",\n        \"Israel\",\n        \"Italy\",\n        \"Jamaica\",\n        \"Japan\",\n        \"Jordan\",\n        \"Kazakhstan\",\n        \"Kenya\",\n        \"South Korea\",\n        \"Kosovo\",\n        \"Kuwait\",\n        \"Kyrgyzstan\",\n        \"Laos\",\n        \"Latvia\",\n        \"Lebanon\",\n        \"Lesotho\",\n        \"Liberia\",\n        \"Libya\",\n        \"Liechtenstein\",\n        \"Lithuania\",\n        \"Luxembourg\",\n        \"MS Zaandam\",\n        \"Madagascar\",\n        \"Malawi\",\n        \"Malaysia\",\n        \"Maldives\",\n        \"Mali\",\n        \"Malta\",\n        \"Marshall Islands\",\n        \"Mauritania\",\n        \"Mauritius\",\n        \"Mexico\",\n        \"Moldova\",\n        \"Monaco\",\n        \"Mongolia\",\n        \"Montenegro\",\n        \"Morocco\",\n        \"Mozambique\",\n        \"Namibia\",\n        \"Nepal\",\n        \"Netherlands\",\n        \"New Zealand\",\n        \"Nicaragua\",\n        \"Niger\",\n        \"Nigeria\",\n        \"North Macedonia\",\n        \"Norway\",\n        \"Oman\",\n        \"Pakistan\",\n        \"Panama\",\n        \"Papua New Guinea\",\n        \"Paraguay\",\n        \"Peru\",\n        \"Philippines\",\n        \"Poland\",\n        \"Portugal\",\n        \"Qatar\",\n        \"Romania\",\n        \"Russia\",\n        \"Rwanda\",\n        \"Saint Kitts and Nevis\",\n        \"Saint Lucia\",\n        \"Saint Vincent and the Grenadines\",\n        \"Samoa\",\n        \"San Marino\",\n        \"Sao Tome and Principe\",\n        \"Saudi Arabia\",\n        \"Senegal\",\n        \"Serbia\",\n        \"Seychelles\",\n        \"Sierra Leone\",\n        \"Singapore\",\n        \"Slovakia\",\n        \"Slovenia\",\n        \"Solomon Islands\",\n        \"Somalia\",\n        \"South Africa\",\n        \"South Sudan\",\n        \"Spain\",\n        \"Sri Lanka\",\n        \"Sudan\",\n        \"Suriname\",\n        \"Sweden\",\n        \"Switzerland\",\n        \"Syria\",\n        \"Taiwan\",\n        \"Tajikistan\",\n        \"Tanzania\",\n        \"Thailand\",\n        \"Timor-Leste\",\n        \"Togo\",\n        \"Trinidad and Tobago\",\n        \"Tunisia\",\n        \"Turkey\",\n        \"US\",\n        \"Uganda\",\n        \"Ukraine\",\n        \"United Arab Emirates\",\n        \"United Kingdom\",\n        \"Uruguay\",\n        \"Uzbekistan\",\n        \"Vanuatu\",\n        \"Venezuela\",\n        \"Vietnam\",\n        \"West Bank and Gaza\",\n        \"Yemen\",\n        \"Zambia\",\n        \"Zimbabwe\"]\n","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchCountry } from \"../../api\";\n\nimport \"./CountryPicker.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(.5),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        //   marginTop: theme.spacing(2),\n    }\n}));\n\nconst CountryPicker = ({ classes, toggleCountry, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [countries, setCountries] = useState([]);\n    const classStyle = useStyles();\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    return (\n        <Fragment>\n            <div className={`country-picker-container${globalDailyChartExpand ? \"-expand\" : isTablet ? \"-hide\" : \"\"}`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n\n            <div className={`country-picker-container-tablet${isTablet ? \"-version\" : \"\" }`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default CountryPicker;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalCharts.scss\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon, isTablet, isMobile }) => {\n\n  const [isChart, setIsChart] = useState(\"infected\");\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  if (!globalData[0]) {\n    return \"Loading...\"\n  }\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { infectedStyle, deathsStyle, recoveredStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n  const offStyle = { backgroundColor: \"#777\" }\n  infectedStyle = isChart === \"infected\" ?\n    onStyle :\n    offStyle\n  deathsStyle = isChart === \"deaths\" ?\n    onStyle :\n    offStyle\n  recoveredStyle = isChart === \"recovered\" ?\n    onStyle :\n    offStyle\n\n  return (\n    <Fragment>\n      <div\n        className={`global-chart-container${globalChartExpand ? \"-expand\" : isTablet ? \"-hide\" : \"\" }`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        {\n          isHover\n            ? !globalChartExpand\n              ? <div className={\"expand-icon\"} onClick={() => setGlobalChartExpand(true)}>{expandIcon}</div>\n              : <div className={\"shrink-icon\"} onClick={() => setGlobalChartExpand(false)}>{shrinkIcon}</div>\n            : null\n        }\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Daily Infected/Deaths/Recovered by Country\n            </p>\n          <div className={`chart`}>\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n          {\n            !globalChartExpand\n              ? <div className={\"arrow-toggler\"}>\n                <div className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</div>\n                <div className={\"toggler-text\"}>\n                  {\n                    isChart === \"infected\"\n                      ? \"Infected\"\n                      : isChart === \"deaths\"\n                        ? \"Deaths\"\n                        : isChart === \"recovered\"\n                          ? \"Recovered\"\n                          : null\n                  }\n                </div>\n                <div className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</div>\n              </div>\n              : null\n          }\n        </div>\n      </div>\n      {\n        globalChartExpand\n          ? <div className={`button-toggler-wrapper-expand`}>\n            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n          </div>\n          : null\n      }\n      \n      {/* tablet */}\n      <div\n        className={`global-chart-container-tablet${isTablet ? \"-version\" : \"\" }`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Daily Infected/Deaths/Recovered by Country\n            </p>\n          <div className={`chart`}>\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n        </div>\n      </div>\n      <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n      </div>\n    </Fragment>\n  )\n};\n\nexport default GlobalCharts;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalTodayCharts.scss\"\n\nconst CountryCharts = ({ countriesYearlyData: { latest_data, timeline }, arrowLeft, arrowRight, option, classes, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [isChart, setIsChart] = useState(\"infected\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !timeline || !latest_data) {\n        return (\n            <div className={`loader-country-chart-wrapper${classes[3]}`}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedTimeLine = timeline.map((data) => data).reverse();\n    //infected chart\n    const infectedLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ confirmed }) => confirmed),\n                            label: \"Infected\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(222, 53, 76, 1)\",\n                            backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(222, 53, 76, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n                            pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ deaths }) => deaths),\n                            label: \"Deaths\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(92, 95, 88, 1)\",\n                            backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(92, 95, 88, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n                            pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ recovered }) => recovered),\n                            label: \"Recovered\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(0, 255, 0, 1)\",\n                            backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(0, 255, 0, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n                            pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const barChart = (\n        latest_data.length !== 0\n            ? <Bar\n                data={{\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                    datasets: [{\n                        data: [latest_data.confirmed, latest_data.recovered, latest_data.deaths],\n                        backgroundColor: [\"rgba(222, 53, 76, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(92, 95, 88, 0.5)\"]\n                    }]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: { display: false },\n                    title: { display: false },\n                    scales: {\n                        xAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                maxTicksLimit: 12,\n                                fontColor: \"white\"\n                            }\n                        }],\n                        yAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                fontColor: \"white\",\n                                maxTicksLimit: 8,\n                                callback: function numFormatter(num) {\n                                    if (num > 999 && num < 1000000) {\n                                        return (num / 1000).toFixed(1) + 'K';\n                                    } else if (num >= 1000000) {\n                                        return (num / 1000000).toFixed(1) + 'M';\n                                    } else if (num < 900) {\n                                        return num;\n                                    }\n\n                                }\n                            }\n                        }\n                        ]\n                    }\n                }}\n            />\n            : null\n    );\n\n    const toggleToRight = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"infected\")\n        }\n    };\n    const toggleToLeft = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"infected\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { infectedStyle, deathsStyle, recoveredStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    const offStyle = { backgroundColor: \"#777\" };;\n    infectedStyle = isChart === \"infected\" ?\n        onStyle :\n        offStyle\n    deathsStyle = isChart === \"deaths\" ?\n        onStyle :\n        offStyle\n    recoveredStyle = isChart === \"recovered\" ?\n        onStyle :\n        offStyle\n\n    return (\n        <Fragment>\n            <div className={`chart-container${isTablet ? \"-hide\" : \"\"}`}>\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n                                <span className={\"toggler-text\"}>\n                                    {\n                                        isChart === \"infected\"\n                                            ? \"Infected\"\n                                            : isChart === \"deaths\"\n                                                ? \"Deaths\"\n                                                : isChart === \"recovered\"\n                                                    ? \"Recovered\"\n                                                    : null\n                                    }\n                                </span>\n                                <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div className={`chart bar-chart`} >\n                        {barChart}\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"} />\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={`button-toggler-wrapper-expand`}>\n                        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n                        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n                        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n                    </div>\n                    : null\n            }\n\n            {/* tablet */}\n            <div className={`chart-container-tablet${isTablet ? \"-version\" : \"\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`} >\n                        Daily Infected/Deaths/Recovered by Country\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Latest Infected/Deaths/Recovered by Country\n                        </p>\n                    <div className={`chart bar-chart`} >\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n            <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\"}`}>\n                <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n                <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n                <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CountryCharts","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalTodayCharts.scss\"\n\nconst GlobalTodayCharts = ({ globalData, arrowRight, arrowLeft, option, classes, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [isInfectedActiveChart, setIsInfectedActiveChart] = useState(\"infected\");\n    const [isDeathsRecoveredChart, setIsDeathsRecoveredChart] = useState(\"deaths\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={`loader-country-chart-wrapper${classes[3]}`}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedData = globalData.map((data) => data).reverse().filter(({ newConfirmed }) => newConfirmed < 3000000);\n\n    const toggleInfectedActiveChart = () => {\n        if (isInfectedActiveChart === \"infected\") {\n            setIsInfectedActiveChart(\"active\")\n        } else {\n            setIsInfectedActiveChart(\"infected\")\n        }\n    };\n\n    const toggleDeathsRecoveredChart = () => {\n        if (isDeathsRecoveredChart === \"deaths\") {\n            setIsDeathsRecoveredChart(\"recovered\")\n        } else {\n            setIsDeathsRecoveredChart(\"deaths\")\n        }\n    };\n\n    const infectedBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newConfirmed }) => newConfirmed),\n                        backgroundColor: \"red\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const activeBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ active }) => active),\n                        backgroundColor: \"rgba(241, 178, 74, 1)\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newRecovered }) => newRecovered),\n                        backgroundColor: \"#4D774E\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newDeaths }) => newDeaths),\n                        backgroundColor: \"#999\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    //toggle map togglers border bottom\n    let { infectedStyle, activeStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n    const offStyle = { backgroundColor: \"#777\" };\n    infectedStyle = isInfectedActiveChart === \"infected\" ?\n        onStyle :\n        offStyle\n    activeStyle = isInfectedActiveChart === \"active\" ?\n        onStyle :\n        offStyle\n\n    let { deathsStyle, recoveredStyle } = {};\n    deathsStyle = isDeathsRecoveredChart === \"deaths\" ?\n        onStyle :\n        offStyle\n    recoveredStyle = isDeathsRecoveredChart === \"recovered\" ?\n        onStyle :\n        offStyle\n\n    return (\n        <Fragment>\n            {/* laptop */}\n            <div className={`chart-container${isTablet ? \"-hide\" : \"\"}`}>\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div\n                        className={`chart`}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <div className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowLeft}</div>\n                                <div className={\"toggler-text\"}>\n                                    {\n                                        isInfectedActiveChart === \"infected\"\n                                            ? \"Daily Infected Cases\"\n                                            : \"Daily Active Cases\"\n\n                                    }\n                                </div>\n                                <div className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowRight}</div>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper${globalDailyChartExpand ? \"-\" + classes[3] : \"\"}`}>\n                    <p className={`chart-header`}>\n                        Global Daily Deaths/Recovered\n                    </p>\n                    <div className={`chart`}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className={\"arrow-toggler\"}>\n                                <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowLeft}</div>\n                                <div className={\"toggler-text\"}>\n                                    {\n                                        isDeathsRecoveredChart === \"deaths\"\n                                            ? \"Daily Deaths\"\n                                            : \"Daily Recovered\"\n                                    }\n                                </div>\n                                <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowRight}</div>\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div className={`button-toggler-container-expand`}>\n                        <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                            <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                        </div>\n                        <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                        </div>\n                    </div>\n                    : null\n            }\n\n            {/* tablet */}\n            <div className={`chart-container-tablet${isTablet ? \"-version\" : \"\"}`}>\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Infected/Active Cases\n                    </p>\n                    <div\n                        className={`chart`}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                </div>\n                <div className={\"border\"} />\n                <div className={`chart-wrapper`}>\n                    <p className={`chart-header`}>\n                        Global Daily Deaths/Recovered\n                        </p>\n                    <div className={`chart`}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                </div>\n            </div>\n\n            <div className={`button-toggler-container-tablet${isTablet ? \"-version\" : \"\"}`}>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"infected\")}>Infected</div>\n                    <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsInfectedActiveChart(\"active\")}>Active</div>\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"deaths\")}>Deaths</div>\n                    <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsDeathsRecoveredChart(\"recovered\")}>Recovered</div>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n};\n\nexport default GlobalTodayCharts;","import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces, mapExpand }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer  center={[23.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst ActiveMap = (props) => {\n\n    const toggleIconSize = (active) => {\n        let iconSize = [];\n\n        if (active > 500000) {\n            iconSize = [20, 20]\n        } else if (active > 300000) {\n            iconSize = [15, 15]\n        } else if (active > 100000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Location_dot_orange.svg/1024px-Location_dot_orange.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.confirmed)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                            <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                            <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                            <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default ActiveMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst IncidentRate = (props) => {\n\n    const toggleIconSize = (incidentRate) => {\n        let iconSize = [];\n\n        if (incidentRate > 10000) {\n            iconSize = [20, 20]\n        } else if (incidentRate > 8000) {\n            iconSize = [15, 15]\n        } else if (incidentRate > 5000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/Yellow_icon.svg/1200px-Yellow_icon.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.incidentRate)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000 people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default IncidentRate;","import React, { Fragment, useEffect, useState } from \"react\";\n\n//components\nimport CamulativeMap from \"./CamulativeMap/CamulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.scss\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon, isTablet, isMobile, isMap, setIsMap }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { calmulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    calmulativeStyle = isMap === \"calmulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`map-container${isTablet ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"calmulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"calmulative\"\n                        ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper${mapExpand ? \"-expand\" : isTablet ? \"-hide\" : \"\"}`}>\n                <div style={calmulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"calmulative\")}>Calmulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n            <div\n                className={`map-container-tablet${isTablet ? \"-version\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"calmulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"calmulative\"\n                        ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                <div style={calmulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"calmulative\")}>Calmulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n        </Fragment>\n    )\n}\n\n\n\nexport default Maps;","import React, { Fragment, useState } from \"react\";\n\nimport \"./InfectedCard.scss\";\n\nconst InfectedCard = ({ countriesData, globalData, provincesData, arrowLeft, arrowRight, infectedCardExpand, expandIcon, shrinkIcon, setInfectedCardExpand, formatNumber, isTablet }) => {\n\n    const [isCard, setIsCard] = useState(\"admin0\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0] || !provincesData[0]) {\n        return \"Loading...\"\n    }\n\n    //modify global datas\n    const modifiedGlobalCasesData = countriesData\n        .map(({ country, latestData }) => [country, latestData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    //modify provinces data\n    const modifiedProvincesData = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .map(({ confirmed, key }) => [confirmed, key])\n            .filter((data) => data[0] > 30000))\n        .filter((data) => data.length > 0)\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    //modify today's data \n    const modifiedTodayData = countriesData\n        .map(({ country, todayData }) => [country, todayData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    const toggleAdminInfectedRight = () => {\n        if (isCard === \"admin0\") {\n            setIsCard(\"admin2\")\n        } else if (isCard === \"admin2\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"admin0\")\n        }\n    };\n    const toggleAdminInfectedLeft = () => {\n        if (isCard === \"admin0\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"admin2\")\n        } else if (isCard === \"admin2\") {\n            setIsCard(\"admin0\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isCard === \"admin0\"\n        ? onStyle\n        : {}\n    admin2Style = isCard === \"admin2\"\n        ? onStyle\n        : {}\n    todayStyle = isCard === \"today\"\n        ? onStyle\n        : {}\n\n\n\n    return (\n        <Fragment>\n            <div\n                className={`card-container${infectedCardExpand ? \"-expand\" : isTablet ? \"-hide\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isCard === \"admin0\" || isCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isCard === \"admin0\" || isCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isCard === \"admin0\" || isCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                {\n                    !infectedCardExpand\n                        ? <div className={`arrow-toggler${isTablet ? \"-hide\" : \"\" }`}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleAdminInfectedLeft()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isCard === \"admin0\"\n                                        ? \"Admin0\"\n                                        : isCard === \"admin2\"\n                                            ? \"Admin2\"\n                                            : isCard === \"today\"\n                                                ? \"Global Today's Cases\"\n                                                : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleAdminInfectedRight()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin0\")}>Admin0</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin2\")}>Admin2</div>\n                            <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Cases</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div\n                className={`card-container-tablet${isTablet ? \"-version\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isCard === \"admin0\" || isCard === \"admin2\"\n                            ? <div className={\"card-header-text\"}>Global Cases</div>\n                            : <div className={\"card-header-text\"}>Global Today's Cases</div>\n                    }\n\n                    {\n                        isCard === \"admin0\" || isCard === \"admin2\"\n                            ? <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"card-header-num infected-num\"} >{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n\n                </div>\n                {\n                    isCard === \"admin0\" || isCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <div>Cases by Country</div>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <div>Cases by</div>\n                            <div>Province/State/Dpendency</div>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <div className={\"list-num infected-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                        <div className={\"province-list-place\"}>{data[1]}</div>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin0\")}>Admin0</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"admin2\")}>Admin2</div>\n                    <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Cases</div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default InfectedCard;","import React, { useState, Fragment } from \"react\";\nimport \"./DeathsRecoveredCard.scss\"\n\nconst DeathsRecoveredCard = ({ countriesData, globalData, classes, arrowLeft, arrowRight, deathsdCardExpand, setDeathsCardExpand, expandIcon, shrinkIcon, formatNumber, isTablet, isMobile }) => {\n\n    const [isCard, setIsCard] = useState(\"deaths\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading ...\"\n    }\n\n    //modify deaths datas\n    const modifiedGlobalDeathsData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].deaths - a[1].deaths);\n\n    //modify recovered datas\n    const modifiedGlobalRecoveredData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].recovered - a[1].recovered);\n\n    //modify today's deaths data \n    const modifiedTodayData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].deaths - a[2].deaths);\n\n    //toggle cards\n    const toggleDeathsRecoveredRight = () => {\n        if (isCard === \"deaths\") {\n            setIsCard(\"recovered\")\n        } else if (isCard === \"recovered\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"deaths\")\n        }\n    };\n    const toggleDeathsRecoveredLeft = () => {\n        if (isCard === \"deaths\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"recovered\")\n        } else if (isCard === \"recovered\") {\n            setIsCard(\"deaths\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isCard === \"deaths\" ?\n        onStyle :\n        {}\n    admin2Style = isCard === \"recovered\" ?\n        onStyle :\n        {}\n    todayStyle = isCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`card-container${deathsdCardExpand ? \"-expand\" : isTablet ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                {\n                    !deathsdCardExpand\n                        ? <div className={\"arrow-toggler\"}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredLeft()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isCard === \"deaths\"\n                                        ? \"Deaths\"\n                                        : isCard === \"recovered\"\n                                            ? \"Recovered\"\n                                            : isCard === \"today\"\n                                                ? \"Global Today's Deaths\"\n                                                : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredRight()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"deaths\")}>Deaths</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"recovered\")}>Recovered</div>\n                            <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Deaths</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div\n                className={`card-container-tablet${isTablet ? \"-version\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    {\n                        isCard === \"deaths\"\n                            ? <div className={\"card-header-text\"}>Global Deaths</div>\n                            : isCard === \"recovered\"\n                                ? <div className={\"card-header-text\"}>Global Recovered</div>\n                                : isCard === \"today\"\n                                    ? <div className={\"card-header-text\"}>Global Todays's Deaths</div>\n                                    : null\n                    }\n                    {\n                        isCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <div>Cases by Country</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <div className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</div>\n                                    <div className={\"country-list-place\"}>{data[0]}</div>\n                                </div>\n                            )\n                            : isCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <div className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</div>\n                                        <div className={\"country-list-place\"}>{data[0]}</div>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <div className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</div>\n                                            <div className={\"country-list-place\"}>{data[0]}</div>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"deaths\")}>Deaths</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"recovered\")}>Recovered</div>\n                    <div style={todayStyle} className={\"button-toggler\"} onClick={() => setIsCard(\"today\")}>Global Today's Deaths</div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default DeathsRecoveredCard;","import React, { useState, Fragment } from \"react\";\nimport \"./ActiveIncidentRateCard.scss\";\n\nconst ActiveIncidentRateCard = ({ provincesData, classes, arrowLeft, arrowRight, activeCardExpand, setActiveCardExpand, expandIcon, shrinkIcon, formatNumber, isTablet, isMobile }) => {\n\n    const [isCard, setIsCard] = useState(\"active\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    const modifiedActiveData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active, key }) => [active, key])\n            .filter((data) => data[0] > 30000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const activeDataSum = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b);\n\n    const modifiedIncidentRateData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ incidentRate, key }) => [incidentRate, key])\n            .filter((data) => data[0] > 12000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const numberOfProvinces = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat().length;\n\n    const incidentRateAvarage = Math.floor((provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b)) / numberOfProvinces);\n\n    const toggleActiveIncidentRateCard = () => {\n        if (isCard === \"active\") {\n            setIsCard(\"incidentRate\")\n        } else {\n            setIsCard(\"active\")\n        }\n    }\n\n    let { admin0Style, admin2Style } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    admin0Style = isCard === \"active\" ?\n        onStyle :\n        {}\n    admin2Style = isCard === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`card-container${activeCardExpand ? \"-expand\" : isTablet ? \"-hide\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n                {\n                    !activeCardExpand\n                        ? <div className={\"arrow-toggler\"}>\n                            <div className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowLeft}</div>\n                            <div className={\"toggler-text\"}>\n                                {\n                                    isCard === \"active\"\n                                        ? \"Active Cases\"\n                                        : isCard === \"incidentRate\"\n                                            ? \"Incident Rate\"\n                                            : null\n                                }\n                            </div>\n                            <div className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowRight}</div>\n                        </div>\n                        : <div className={\"button-toggler-wrapper-expand\"}>\n                            <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"active\")}>Active Cases</div>\n                            <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"incidentRate\")}>Incident Rate</div>\n                        </div>\n                }\n            </div>\n\n            {/* tablet */}\n            <div\n                className={`card-container-tablet${isTablet ? \"-version\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={isCard === \"active\" ? \"card-header\" : \"card-header card-header-incident\"} >\n                    {\n                        isCard === \"active\"\n                            ? <div className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                </div>\n                            : isCard === \"incidentRate\"\n                                ? <div className={\"card-header-text\"}>Global Incident Rate<div id=\"percentage\">(per 100,000 people)</div></div>\n                                : null\n                    }\n                    {\n                        isCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n                </div>\n                <div className={\"province-card-note\"} >\n                    <div>Cases by</div>\n                    <div>Province/State/Dpendency</div>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num active-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <div className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <div className={\"province-list-cases\"}>Cases</div></div>\n                                    <div className={\"province-list-place\"}>{data[1]}</div>\n                                </div>\n                            )\n                    }\n                </div>\n                <div className={`button-toggler-wrapper-tablet${isTablet ? \"-version\" : \"\" }`}>\n                    <div style={admin0Style} className={\"button-toggler\"} onClick={() => setIsCard(\"active\")}>Active Cases</div>\n                    <div style={admin2Style} className={\"button-toggler\"} onClick={() => setIsCard(\"incidentRate\")}>Incident Rate</div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\nexport default ActiveIncidentRateCard;","import React, { Fragment } from \"react\";\n\nimport \"./InfoPanel.scss\";\n\nconst InfoPanel = ({ globalData, countriesData, provincesData, formatNumber, classes, dataPanelExpand, isTablet, isMobile }) => {\n\n    if (!globalData[0] || !provincesData[0]) {\n        return \"Loading...\"\n    }\n\n    const filteredCountries = countriesData.filter(({ latestData }) => latestData.confirmed > 0);\n    const filteredProvinces = provincesData.flat().filter(({ confirmed }) => confirmed > 0);\n\n    // get formatted time for lastUpdate\n    const getFormattedDate = () => {\n        let lastUpdate = String(new Date(globalData[0].lastUpdate));\n        let month = String(lastUpdate.slice(4, 7));\n        switch (month) {\n            case \"Jan\":\n                month = \"1\"\n                break;\n            case \"Feb\":\n                month = \"2\";\n                break;\n            case \"Mar\":\n                month = \"3\";\n                break;\n            case \"Apr\":\n                month = \"4\";\n                break;\n            case \"May\":\n                month = \"5\";\n                break;\n            case \"Jun\":\n                month = \"6\";\n                break;\n            case \"Jul\":\n                month = \"7\";\n                break;\n            case \"Aug\":\n                month = \"8\";\n                break;\n            case \"Sep\":\n                month = \"9\";\n                break;\n            case \"Oct\":\n                month = \"10\";\n                break;\n            case \"Nov\":\n                month = \"11\";\n                break;\n            case \"Dec\":\n                month = \"12\";\n                break;\n            default:\n                month = \"\";\n        };\n\n        let day = String(lastUpdate.slice(8, 10));\n\n        let year = String(lastUpdate.slice(11, 15));\n\n        let hour = lastUpdate.slice(16, 18);\n        let ampm = \"\"\n        if (hour > 12) {\n            hour -= 12\n            ampm = \"PM\"\n        } else {\n            ampm = \"AM\"\n        }\n        let minute = String(lastUpdate.slice(19, 21))\n        return month + \"/\" + day + \"/\" + year + \",\" + hour + \":\" + minute + \" \" + ampm\n    };\n\n    return (\n        <Fragment>\n            {\n                !dataPanelExpand\n                    ? <Fragment>\n                        <table className={`table-laptop${isTablet ? \"-hide\" : \"\" }`}>\n                            <tr>\n                                <td colspan=\"2\">\n                                    <div className={\"infected-panel-header\"}>Today's Global Cases</div>\n                                    <h2 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h2>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div className={\"panel-header\"}>Today's Global Deaths</div>\n                                    <h3 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h3>\n                                </td>\n                                <td>\n                                    <div className={\"panel-header\"}>Today's Global Recovered</div>\n                                    <h3 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h3>\n                                </td>\n                            </tr>\n                        </table>\n                        <div className={`country-panel${isTablet ? \"-hide\" : \"\" }`}>\n                            <div className={\"panel-header\"}>Countries/Provinces</div>\n                            <h3 className={\"panel-number\"}>\n                                {filteredCountries.length}/{filteredProvinces.length}\n                            </h3>\n                        </div>\n                        <div className={`last-update-panel${isTablet ? \"-hide\" : \"\" }`}>\n                            <div className={\"panel-header\"}>Last Updated at (M/D/YYYY)</div>\n                            <h3 className={\"panel-number\"}>\n                                {getFormattedDate(globalData[0].lastUpdate)}\n                            </h3>\n                        </div>\n                    </Fragment>\n                    : <Fragment>\n                        <table className={\"table-expand\"}>\n                            <tr>\n                                <td colspan=\"2\">\n                                    <span className={\"panel-header\"}>Today's Global Cases</span>\n                                    <h1 className={\"infected-panel-number\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h1>\n                                </td>\n\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Deaths</span>\n                                    <h2 className={\"panel-number deaths-number\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Today's Global Recovered</span>\n                                    <h2 className={\"panel-number recovered-number\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h2>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span className={\"panel-header\"}>Countries/Provinces</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {filteredCountries.length}/{filteredProvinces.length}\n                                    </h2>\n                                </td>\n                                <td>\n                                    <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                                    <h2 className={\"panel-number\"}>\n                                        {getFormattedDate(globalData[0].lastUpdate)}\n                                    </h2>\n                                </td>\n                            </tr>\n                        </table>\n                    </Fragment>\n            }\n\n            <table className={`table-tablet${isTablet ? \"-version\" : \"\" }`}>\n                <tr>\n                    <td colspan=\"2\">\n                        <span className={\"panel-header\"}>Today's Global Cases</span>\n                        <h1 className={\"infected-panel-number\"}>\n                            {formatNumber(globalData[0].newConfirmed)}\n                        </h1>\n                    </td>\n\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Deaths</span>\n                        <h2 className={\"panel-number deaths-number\"}>\n                            {formatNumber(globalData[0].newDeaths)}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Today's Global Recovered</span>\n                        <h2 className={\"panel-number recovered-number\"}>\n                            {formatNumber(globalData[0].newRecovered)}\n                        </h2>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className={\"panel-header\"}>Countries/Provinces</span>\n                        <h2 className={\"panel-number country-number\"}>\n                            {filteredCountries.length}/{filteredProvinces.length}\n                        </h2>\n                    </td>\n                    <td>\n                        <span className={\"panel-header\"}>Last Updated at (M/D/YYYY)</span>\n                        <h2 className={\"panel-number lastUpdate-number\"}>\n                            {getFormattedDate(globalData[0].lastUpdate)}\n                        </h2>\n                    </td>\n                </tr>\n            </table>\n        </Fragment>\n    )\n};\n\nexport default InfoPanel;","import React, { useState, useEffect, Fragment } from \"react\";\n\n//scss\nimport \"./PopupNavBars.scss\"\n\n//Fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons';\n\nconst navBars = < FontAwesomeIcon icon={faBars} />\nconst dropdown = < FontAwesomeIcon icon={faSortDown} />\n\nconst PopupNavBars = ({ isTablet, setIsTablet, isMobile, setIsMobile, setIsMap, setGlobalChartExpand, setGlobalDailyChartExpand, setInfectedCardExpand, setDeathsCardExpand, setActiveCardExpand, setMapExpand, setDataPanelExpand }) => {\n\n    const [popup, setPopup] = useState(false);\n    const [popupDataSource, setPopupDataSource] = useState(false);\n\n    return (\n        <div id=\"popup-nav-container\">\n            <div id=\"nav-icon\" onClick={() => { setPopup(!popup) }}>\n                {navBars}\n            </div>\n            {\n                popup\n                    ? <div id=\"popup-container\">\n                        <div className={\"popup-item\"}\n                            onClick={() => {\n                                setPopupDataSource(!popupDataSource)\n                            }}>\n                            <div>Data Source</div>\n                            <div className={`dropdown-icon${popupDataSource ? \"-up\" : \"\"}`}>{dropdown}</div>\n                        </div>\n                        {\n                            popupDataSource\n                                ? <div id=\"dropdown-items\">\n                                    <div onClick={() => setPopup(!popup) } className={\"dropdown-item\"}>\n                                        <a href=\"https://about-corona.net/documentation\" target=\"_blank\">ABOUT-CORONA.NET</a>\n                                    </div>\n                                    <div onClick={() => setPopup(!popup) } className={\"dropdown-item\"}>\n                                        <a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\">Mathdroid Covid-19 REST API v1.0</a>\n                                    </div>\n                                </div>\n                                : null\n                        }\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsTablet(!isTablet)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"calmulative\"))\n                                setPopup(!popup)\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                            }}\n                        >\n                            {\n                                !isTablet\n                                ? \"Tablet Version\"\n                                : \"Desktop Version\"\n                            }\n                            \n                         </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsMobile(!isMobile)\n                                setPopup(!popup)\n                            }}\n                        >\n                            {\n                                !isMobile\n                                ? \"Mobile Version\"\n                                : \"Desktop Version\"\n                            }\n                        </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => { setPopup(!popup) }}\n                        >\n                            <a href=\"https://github.com/Shuto46490802\" target=\"_blank\">About</a>\n                        </div>\n                    </div>\n                    : null\n            }\n        </div >\n    )\n};\n\nexport default PopupNavBars;","import React, { useState, useEffect } from \"react\";\n\n//Components \nimport CountryPicker from \"./Components/CountryPicker/CountryPicker\";\nimport GlobalCharts from \"./Components/Charts/GlobalCharts\";\nimport CountryCharts from \"./Components/Charts/CountryCharts\";\nimport GlobalTodayCharts from \"./Components/Charts/GlobalTodayCharts\";\nimport Maps from \"./Components/Maps/Maps\";\nimport InfectedCard from \"./Components/Cards/InfectedCard/InfectedCard\";\nimport DeathsRecoveredCard from \"./Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard\";\nimport ActiveIncidentRateCard from \"./Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard\";\nimport InfoPanel from \"./Components/InfoPanel/InfoPanel\";\nimport PopupNavBars from \"./Components/PopupNavBars/PopupNavBars\";\n\nimport \"./css/App.scss\";\n\nimport { fetchProvinceData, fetchCountriesData, fetchGlobaldata, fetchCountriesYearlyData } from \"./api\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\n\n\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst arrowLeft = < FontAwesomeIcon icon={faCaretLeft} />\nconst arrowRight = < FontAwesomeIcon icon={faCaretRight} />\nconst expandIcon = < FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst shrinkIcon = < FontAwesomeIcon icon={faCompressArrowsAlt} />\n\n\nconst App = () => {\n\n    const [globalData, setGlobaldata] = useState({})\n    const [country, setCountry] = useState(\"select a country\");\n    const [countriesData, setCountriesData] = useState({});\n    const [provincesData, setProvincesData] = useState();\n    const [countriesYearlyData, setCountriesYearlyData] = useState({});\n\n    const [infectedCardExpand, setInfectedCardExpand] = useState(false);\n    const [deathsdCardExpand, setDeathsCardExpand] = useState(false);\n    const [activeCardExpand, setActiveCardExpand] = useState(false);\n    const [mapExpand, setMapExpand] = useState(false);\n    const [dataPanelExpand, setDataPanelExpand] = useState(false);\n    const [globalDailyChartExpand, setGlobalDailyChartExpand] = useState(false);\n    const [globalChartExpand, setGlobalChartExpand] = useState(false);\n\n    const [isMap, setIsMap] = useState(\"calmulative\");\n\n    const [isPanelHover, setIsPanelHover] = useState(false);\n    const [isTodayChartHover, setIsTodayChartHover] = useState(false);\n\n    const [isTablet, setIsTablet] = useState(false);\n    const [isMobile, setIsMobile] = useState(false);\n\n\n    const [isLoad, setIsLoad] = useState(true)\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setProvincesData(await fetchProvinceData());\n            setCountriesData(await fetchCountriesData());\n            setGlobaldata(await fetchGlobaldata());\n        }\n        fetchAPI();\n    }, [setCountriesData]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 2000)\n    })\n\n    const loader = <Loader\n        type=\"Bars\"\n        color=\"#3500D3\"\n        height={100}\n        width={100}\n        timeout={2000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={\"loader-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    }\n\n    //country picker\n    const toggleCountry = async (country) => {\n        setCountry(country);\n        setCountriesYearlyData(await fetchCountriesYearlyData(country));\n    };\n\n    // separate number with separator\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //format for chart d\n    const option = {\n        maintainAspectRatio: false,\n        legend: { display: false },\n        tooltips: {\n            xPadding: 15,\n            yPadding: 15,\n            yAlign: \"bottom\",\n            callbacks: {\n                title: (items, data) => data['labels'][items[0]['index']],\n                label: (item, data) => formatNumber(data['datasets'][0]['data'][item['index']])\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                },\n                ticks: {\n                    maxTicksLimit: 6,\n                    fontColor: \"#f5f5f5\",\n                    fontSize: 10\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    maxTicksLimit: 8,\n                    callback: function numFormatter(num) {\n                        if (num > 999 && num < 1000000) {\n                            return (num / 1000).toFixed(1) + 'K';\n                        } else if (num >= 1000000) {\n                            return (num / 1000000).toFixed(1) + 'M';\n                        } else if (num < 900) {\n                            return num;\n                        }\n                    },\n                    fontColor: \"#f5f5f5\",\n                },\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                }\n            }]\n        }\n    };\n\n    //toggle expand and hide  \n    const classes =\n        infectedCardExpand\n            ? [\"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n            : dataPanelExpand\n                ? [\"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                : mapExpand\n                    ? [\"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                    : globalDailyChartExpand\n                        ? [\"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\"]\n                        : deathsdCardExpand\n                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\"]\n                            : activeCardExpand\n                                ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\"]\n                                : globalChartExpand\n                                    ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\"]\n                                    : [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n    const columnClasses =\n        infectedCardExpand || dataPanelExpand\n            ? [\"expand\", \"hide\", \"hide\"]\n            : mapExpand || globalDailyChartExpand\n                ? [\"hide\", \"expand\", \"hide\"]\n                : deathsdCardExpand || activeCardExpand || globalChartExpand\n                    ? [\"hide\", \"hide\", \"expand\"]\n                    : [\"\", \"\", \"\"];\n\n\n    return (\n        <div className={`app${isTablet ? \"-tablet-version\" : \"\"}`} >\n            <header>\n                <img src=\"https://www.tiabc.ca/wp-content/uploads/home/COVID%E2%80%9419.png\" alt=\"covid-19 logo\" />\n                <div id=\"header-title\">\n                    <h1>World COVID-19 Dashboard</h1>\n                    <span id=\"header-border\"></span>\n                    <div id=\"header-footer\">\n                        <span>Desinged and Coded</span>\n                        <span>by Shuto.S</span>\n                    </div>\n                </div>\n                <div id=\"nav\">\n                    <p className={\"nav-text\"}>Global Map</p>\n                    <p className={\"nav-text\"}>Country Map</p>\n                    <div id=\"popup-nav-bars\">\n                        <PopupNavBars\n                            isTablet={isTablet}\n                            setIsTablet={setIsTablet}\n                            isMobile={isMobile}\n                            setIsMobile={setIsMobile}\n                            setIsMap={setIsMap}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            setDeathsCardExpand={setDeathsCardExpand}\n                            setActiveCardExpand={setActiveCardExpand}\n                            setMapExpand={setMapExpand}\n                            setDataPanelExpand={setDataPanelExpand}\n                            setGlobalDailyChartExpand={setGlobalDailyChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <main className={`desktop${isTablet ? \"-hide\" : \"\"}`} >\n                <div\n                    className={`column${columnClasses[0]} column1`}\n                >\n                    <div\n                        id={\"infected-card\"}\n                        className={classes[0]}\n                    >\n                        <InfectedCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            infectedCardExpand={infectedCardExpand}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                    <div\n                        id=\"info-panel\"\n                        className={classes[1]}\n                        onMouseEnter={() => setIsPanelHover(true)}\n                        onMouseLeave={() => setIsPanelHover(false)}\n                    >\n                        {\n                            isPanelHover\n                                ? !dataPanelExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => { setDataPanelExpand(true) }}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setDataPanelExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <InfoPanel\n                            globalData={globalData}\n                            countriesData={countriesData}\n                            provincesData={provincesData}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            dataPanelExpand={dataPanelExpand}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                </div>\n                <div className={`column${columnClasses[1]} column2`}>\n                    <div\n                        id=\"map\"\n                        className={classes[2]}\n                    >\n                        <Maps\n                            classes={classes}\n                            provincesData={provincesData}\n                            setMapExpand={setMapExpand}\n                            mapExpand={mapExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                            isMap={isMap}\n                            setIsMap={setIsMap}\n                        />\n                    </div>\n                    <div\n                        id=\"country-picker-chart\"\n                        className={classes[3]}\n                        onMouseEnter={() => setIsTodayChartHover(true)}\n                        onMouseLeave={() => setIsTodayChartHover(false)}\n                    >\n                        {\n                            isTodayChartHover\n                                ? !globalDailyChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalDailyChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalDailyChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <div id=\"country-picker\">\n                            <CountryPicker\n                                classes={classes}\n                                toggleCountry={toggleCountry}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                            />\n                        </div>\n                        <div id=\"country-chart\">\n                            {\n                                country === \"select a country\"\n                                    ? <GlobalTodayCharts\n                                        globalData={globalData}\n                                        arrowRight={arrowRight}\n                                        arrowLeft={arrowLeft}\n                                        option={option}\n                                        classes={classes}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        isTablet={isTablet}\n                                        isMobile={isMobile}\n                                    />\n                                    : <CountryCharts\n                                        countriesYearlyData={countriesYearlyData}\n                                        arrowLeft={arrowLeft}\n                                        arrowRight={arrowRight}\n                                        option={option}\n                                        classes={classes}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        isTablet={isTablet}\n                                        isMobile={isMobile}\n                                    />\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className={`column${columnClasses[2]} column3`}>\n                    <div className={`row${globalChartExpand ? \"-hide\" : \"\"}`} >\n                        <div\n                            id=\"deaths-recovered-card\"\n                            className={classes[4]}\n                        >\n                            <DeathsRecoveredCard\n                                countriesData={countriesData}\n                                globalData={globalData}\n                                classes={classes}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                deathsdCardExpand={deathsdCardExpand}\n                                setDeathsCardExpand={setDeathsCardExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                            />\n                        </div>\n                        <div\n                            id=\"active-incident-card\"\n                            className={classes[5]}\n                        >\n                            <ActiveIncidentRateCard\n                                provincesData={provincesData}\n                                classes={classes}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                activeCardExpand={activeCardExpand}\n                                setActiveCardExpand={setActiveCardExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                                formatNumber={formatNumber}\n                                isTablet={isTablet}\n                                isMobile={isMobile}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        id=\"global-chart\"\n                        className={classes[6]}\n                    >\n                        <GlobalCharts\n                            globalData={globalData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            option={option}\n                            classes={classes}\n                            globalChartExpand={globalChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                </div>\n            </main>\n\n            <main className={`tablet${!isTablet ? \"-responsive\" : \"-version\"}`}>\n                <div className={\"tablet-item\"} id=\"map-tablet\">\n                    <Maps\n                        classes={classes}\n                        provincesData={provincesData}\n                        setMapExpand={setMapExpand}\n                        mapExpand={mapExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        isMap={isMap}\n                        setIsMap={setIsMap}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div className={\"tablet-item\"} id={\"infected-card-tablet\"}>\n                    <InfectedCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        provincesData={provincesData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        infectedCardExpand={infectedCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        setInfectedCardExpand={setInfectedCardExpand}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div className={\"deaths-active-card tablet-item\"}>\n                    <DeathsRecoveredCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        deathsdCardExpand={deathsdCardExpand}\n                        setDeathsCardExpand={setDeathsCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div className={\"deaths-active-card tablet-item\"}>\n                    <ActiveIncidentRateCard\n                        provincesData={provincesData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        activeCardExpand={activeCardExpand}\n                        setActiveCardExpand={setActiveCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div id=\"country-picker-chart\" className={\"tablet-item\"}>\n                    <div id=\"country-picker\">\n                        <CountryPicker\n                            classes={classes}\n                            toggleCountry={toggleCountry}\n                            isTablet={isTablet}\n                            isMobile={isMobile}\n                        />\n                    </div>\n                    <div id=\"country-chart\">\n                        {\n                            country === \"select a country\"\n                                ? <GlobalTodayCharts\n                                    globalData={globalData}\n                                    arrowRight={arrowRight}\n                                    arrowLeft={arrowLeft}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                />\n                                : <CountryCharts\n                                    countriesYearlyData={countriesYearlyData}\n                                    arrowLeft={arrowLeft}\n                                    arrowRight={arrowRight}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                    isTablet={isTablet}\n                                    isMobile={isMobile}\n                                />\n                        }\n                    </div>\n                </div>\n                <div id=\"global-chart\" className={\"tablet-item\"}>\n                    <GlobalCharts\n                        globalData={globalData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        option={option}\n                        classes={classes}\n                        globalChartExpand={globalChartExpand}\n                        setGlobalChartExpand={setGlobalChartExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n                <div id=\"info-panel\" className={\"tablet-item\"}>\n                    <InfoPanel\n                        globalData={globalData}\n                        countriesData={countriesData}\n                        provincesData={provincesData}\n                        formatNumber={formatNumber}\n                        isTablet={isTablet}\n                        isMobile={isMobile}\n                    />\n                </div>\n            </main>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
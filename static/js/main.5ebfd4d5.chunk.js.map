{"version":3,"sources":["api/index.js","Components/CountryPicker.js","Components/Charts/GlobalCharts.js","Components/Charts/CountryCharts.js","Components/Charts/GlobalTodayCharts.js","Components/Maps/CamulativeMap/CamulativeMap.js","Components/Maps/ActiveMap/ActiveMap.js","Components/Maps/IncidentRate/IncidentRate.js","Components/Maps/Maps.js","Components/Cards/InfectedCard/InfectedCard.js","Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js","Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js","App.js","index.js"],"names":["fetchCountriesYearlyData","country","a","changableUrl","axios","get","data","latest_data","timeline","name","fetchGlobaldata","map","active","confirmed","date","deaths","recovered","newConfirmed","new_confirmed","newDeaths","new_deaths","newRecovered","new_recovered","lastUpdate","updated_at","fetchCountry","code","fetchCountriesData","latestData","todayData","today","fetchProvinceData","promises","countries","lat","long","countryRegion","key","combinedKey","incidentRate","getData","Promise","all","promise","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","CountryPicker","classes","toggleCountry","useState","setCountries","classStyle","useEffect","fetchAPI","modifiedData","filter","sort","b","id","className","FormControl","InputLabel","shrink","NativeSelect","onChange","e","target","value","i","GlobalCharts","globalData","arrowLeft","arrowRight","option","globalChartExpand","setGlobalChartExpand","expandIcon","shrinkIcon","isChart","setIsChart","isHover","setIsHover","isLoad","setIsLoad","setTimeout","admin0Style","admin2Style","todayStyle","loader","type","color","height","width","timeout","reverse","infectedLineChart","length","labels","datasets","fill","lineTension","borderColor","backgroundColor","pointRadius","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","options","deathsLineChart","recoveredLineChart","onStyle","borderBottom","onMouseEnter","onMouseLeave","style","top","marginRight","right","onClick","fontSize","left","bottom","CountryCharts","countriesYearlyData","globalDailyChartExpand","modifiedTimeLine","label","barChart","maintainAspectRatio","legend","display","title","scales","xAxes","gridLines","zeroLineColor","ticks","maxTicksLimit","fontColor","yAxes","callback","num","toFixed","GlobalTodayCharts","isInfectedActiveChart","setIsInfectedActiveChart","isDeathsRecoveredChart","setIsDeathsRecoveredChart","infectedStyle","activeStyle","toggleInfectedActiveChart","toggleDeathsRecoveredChart","infectedBarChart","activeBarChart","recoveredBarChart","deathsBarChart","deathsStyle","recoveredStyle","CamulativeMap","noProvince","formatNumber","usProvinces","provinces","toggleIconSize","iconSize","L","Icon","iconUrl","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Popup","ActiveMap","props","IncidentRate","Math","floor","Maps","provincesData","setMapExpand","mapExpand","isMap","setIsMap","calmulativeStyle","incidentRateStyle","inputNumber","formetedNumber","Number","replace","splitArray","split","marginLeft","InfectedCard","countriesData","infectedCardExpand","setInfectedCardExpand","infectedCard","setInfectedCard","modifiedProvincesData","flat","modifiedLatestData","modifiedTodayData","DeathsRecoveredCard","deathsdCardExpand","setDeathsCardExpand","deathsRecoveredCard","setDeathsRecoveredCard","modifiedDeathsData","modifiedRecoveredData","modifiedTodayDeathData","ActiveIncidentRateCard","activeCardExpand","setActiveCardExpand","activeIncidentRateCard","setActiveIncidentRateCard","modifiedActiveData","modifiedActiveDataSum","reduce","modifiedIncidentRateData","numberOfProvinces","modifiedIncidentRateDataAvarage","toggleActiveIncidentRateCard","github","faGithubSquare","twitter","faTwitterSquare","tumblr","faTumblrSquare","faCaretLeft","faCaretRight","faExpandArrowsAlt","faCompressArrowsAlt","App","setGlobaldata","setCountry","setCountriesData","setProvincesData","setCountriesYearlyData","dataPanelExpand","setDataPanelExpand","updatePanelExpand","setUpdatePanelExpand","setGlobalDailyChartExpand","countryChartExpand","isDataHover","setIsDataHover","isUpdateHover","setIsUpdateHover","isChartHover","setIsChartHover","tooltips","xPadding","yPadding","yAlign","callbacks","items","item","src","href","padding","String","Date","month","slice","day","year","hour","ampm","getFormattedDate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uZAKaA,EAAwB,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,yDACpB,qBAAZD,EADgC,yCAEzB,cAFyB,cAIhCE,EAJgC,2CAIoBF,GAJpB,kBAMkCG,IAAMC,IAAIF,GAN5C,2BAMxBG,KAAQA,KAAQC,EANQ,EAMRA,YAAaC,EANL,EAMKA,SAAUC,EANf,EAMeA,KANf,kBAOzB,CAAEF,cAAaC,WAAUC,SAPA,4FAAH,sDAaxBC,EAAe,uCAAG,8BAAAR,EAAA,4DACjB,kCADiB,kBAGUE,IAAMC,IAFjC,mCADiB,uBAGPC,EAHO,EAGfA,KAAQA,KAHO,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBM,OAAQN,EAAKM,OACbC,UAAWP,EAAKO,UAChBC,KAAMR,EAAKQ,KACXC,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBC,aAAcX,EAAKY,cACnBC,UAAWb,EAAKc,WAChBC,aAAcf,EAAKgB,cACnBC,WAAYjB,EAAKkB,gBAbE,yFAAH,qDAoBfC,EAAY,uCAAG,8BAAAvB,EAAA,4DACd,mCADc,kBAGaE,IAAMC,IAFjC,oCADc,uBAGJC,EAHI,EAGZA,KAAQA,KAHI,kBAKbA,EAAKK,KAAI,kBAAkC,CAC9CF,KADY,EAAGA,KAEfiB,KAFY,EAASA,KAGrBpB,KAHY,EAAeC,iBALX,yFAAH,qDAiBZoB,EAAkB,uCAAG,8BAAAzB,EAAA,4DACpB,mCADoB,kBAIOE,IAAMC,IAHjC,oCADoB,uBAIVC,EAJU,EAIlBA,KAAQA,KAJU,kBAKnBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBL,QAASK,EAAKG,KACdmB,WAAYtB,EAAKC,YACjBsB,UAAWvB,EAAKwB,WARM,yFAAH,qDAgBlBC,EAAiB,uCAAG,8BAAA7B,EAAA,6DAEvB8B,EAAWC,EAAUtB,IAAV,uCAAc,WAAOV,GAAP,iBAAAC,EAAA,+EAEAE,IAAMC,IAAN,UAzEvB,iCAyEuB,sBAA8BJ,EAA9B,eAFA,uBAEfK,EAFe,EAEfA,KAFe,kBAIhBA,EAAKK,KAAI,SAACL,GAAD,MAAW,CACvBO,UAAWP,EAAKO,UAChBE,OAAQT,EAAKS,OACbC,UAAWV,EAAKU,UAChBJ,OAAQN,EAAKM,OACbsB,IAAK5B,EAAK4B,IACVC,KAAM7B,EAAK6B,KACXlC,QAASK,EAAK8B,cACdC,IAAK/B,EAAKgC,YACVC,aAAcjC,EAAKiC,kBAbA,yFAAd,uDAmBXC,EArBuB,+BAAAtC,EAAA,MAqBb,sBAAAA,EAAA,sEACCuC,QAAQC,IAAIV,EAASrB,IAAT,uCAAa,WAAOgC,GAAP,SAAAzC,EAAA,+EAC3ByC,GAD2B,2CAAb,wDADb,mFArBa,8DA0BhBH,IA1BgB,mFAAH,qDA6BxBP,EACF,CAAC,cACG,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,QACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,sBACA,mBACA,aACA,UACA,OACA,SACA,UACA,UACA,mBACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,QACA,cACA,cACA,YACA,QACA,UACA,kBACA,SACA,OACA,WACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,SACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,cACA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","file":"static/js/main.5ebfd4d5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\n//for countries charts\nexport const fetchCountriesYearlyData = async (country) => {\n    if (country === \"select a country\") {\n        return \"Loading...\"\n    }\n    var changableUrl = (`https://corona-api.com/countries/${country}`)\n    try {\n        const { data: { data: { latest_data, timeline, name } } } = await axios.get(changableUrl);\n        return { latest_data, timeline, name }\n    } catch (error) {\n    }\n}\n\n//fetch global datas\nexport const fetchGlobaldata = async () => {\n    let url = \"https://corona-api.com/timeline\"\n    try {\n        const { data: { data } } = await axios.get(url);\n        return data.map((data) => ({\n            active: data.active,\n            confirmed: data.confirmed,\n            date: data.date,\n            deaths: data.deaths,\n            recovered: data.recovered,\n            newConfirmed: data.new_confirmed,\n            newDeaths: data.new_deaths,\n            newRecovered: data.new_recovered,\n            lastUpdate: data.updated_at\n        }));\n    } catch (error) {\n    }\n}\n\n//for country picker\nexport const fetchCountry = async () => {\n    let url = \"https://corona-api.com/countries\"\n    try {\n        const { data: { data } } = await axios.get(url);\n\n        return data.map(({ name, code, latest_data }) => ({\n            name: name,\n            code: code,\n            data: latest_data\n        }))\n\n    } catch (error) {\n\n    }\n};\n\n//for country infected, deaths and recovered list \nexport const fetchCountriesData = async () => {\n    let url = \"https://corona-api.com/countries\"\n\n    try {\n        const { data: { data } } = await axios.get(url)\n        return data.map((data) => ({\n            country: data.name,\n            latestData: data.latest_data,\n            todayData: data.today\n        }))\n\n    } catch (error) {\n    }\n};\n\n//for Map\nexport const fetchProvinceData = async () => {\n\n    const promises = countries.map(async (country) => {\n        try {\n            const { data } = await axios.get(`${url}/countries/${country}/confirmed`);\n\n            return data.map((data) => ({\n                confirmed: data.confirmed,\n                deaths: data.deaths,\n                recovered: data.recovered,\n                active: data.active,\n                lat: data.lat,\n                long: data.long,\n                country: data.countryRegion,\n                key: data.combinedKey,\n                incidentRate: data.incidentRate\n            }));\n        } catch (error) {\n        }\n    });\n\n    const getData = async () => {\n        return await Promise.all(promises.map(async (promise) => {\n            return promise\n        }))\n    }\n    return await getData();\n};\n\nconst countries =\n    [\"Afghanistan\",\n        \"Albania\",\n        \"Algeria\",\n        \"Andorra\",\n        \"Angola\",\n        \"Antigua and Barbuda\",\n        \"Argentina\",\n        \"Armenia\",\n        \"Australia\",\n        \"Austria\",\n        \"Azerbaijan\",\n        \"Bahamas\",\n        \"Bahrain\",\n        \"Bangladesh\",\n        \"Barbados\",\n        \"Belarus\",\n        \"Belgium\",\n        \"Belize\",\n        \"Benin\",\n        \"Bhutan\",\n        \"Bolivia\",\n        \"Bosnia and Herzegovina\",\n        \"Botswana\",\n        \"Brazil\",\n        \"Brunei\",\n        \"Bulgaria\",\n        \"Burkina Faso\",\n        \"Burma\",\n        \"Burundi\",\n        \"Cabo Verde\",\n        \"Cambodia\",\n        \"Cameroon\",\n        \"Canada\",\n        \"Central African Republic\",\n        \"Chad\",\n        \"Chile\",\n        \"China\",\n        \"Colombia\",\n        \"Comoros\",\n        \"Congo (Brazzaville)\",\n        \"Congo (Kinshasa)\",\n        \"Costa Rica\",\n        \"Croatia\",\n        \"Cuba\",\n        \"Cyprus\",\n        \"Czechia\",\n        \"Denmark\",\n        \"Diamond Princess\",\n        \"Djibouti\",\n        \"Dominica\",\n        \"Dominican Republic\",\n        \"Ecuador\",\n        \"Egypt\",\n        \"El Salvador\",\n        \"Equatorial Guinea\",\n        \"Eritrea\",\n        \"Estonia\",\n        \"Eswatini\",\n        \"Ethiopia\",\n        \"Fiji\",\n        \"Finland\",\n        \"France\",\n        \"Gabon\",\n        \"Gambia\",\n        \"Georgia\",\n        \"Germany\",\n        \"Ghana\",\n        \"Greece\",\n        \"Grenada\",\n        \"Guatemala\",\n        \"Guinea\",\n        \"Guinea-Bissau\",\n        \"Guyana\",\n        \"Haiti\",\n        \"Holy See\",\n        \"Honduras\",\n        \"Hungary\",\n        \"Iceland\",\n        \"India\",\n        \"Indonesia\",\n        \"Iran\",\n        \"Iraq\",\n        \"Ireland\",\n        \"Israel\",\n        \"Italy\",\n        \"Jamaica\",\n        \"Japan\",\n        \"Jordan\",\n        \"Kazakhstan\",\n        \"Kenya\",\n        \"South Korea\",\n        \"Kosovo\",\n        \"Kuwait\",\n        \"Kyrgyzstan\",\n        \"Laos\",\n        \"Latvia\",\n        \"Lebanon\",\n        \"Lesotho\",\n        \"Liberia\",\n        \"Libya\",\n        \"Liechtenstein\",\n        \"Lithuania\",\n        \"Luxembourg\",\n        \"MS Zaandam\",\n        \"Madagascar\",\n        \"Malawi\",\n        \"Malaysia\",\n        \"Maldives\",\n        \"Mali\",\n        \"Malta\",\n        \"Marshall Islands\",\n        \"Mauritania\",\n        \"Mauritius\",\n        \"Mexico\",\n        \"Moldova\",\n        \"Monaco\",\n        \"Mongolia\",\n        \"Montenegro\",\n        \"Morocco\",\n        \"Mozambique\",\n        \"Namibia\",\n        \"Nepal\",\n        \"Netherlands\",\n        \"New Zealand\",\n        \"Nicaragua\",\n        \"Niger\",\n        \"Nigeria\",\n        \"North Macedonia\",\n        \"Norway\",\n        \"Oman\",\n        \"Pakistan\",\n        \"Panama\",\n        \"Papua New Guinea\",\n        \"Paraguay\",\n        \"Peru\",\n        \"Philippines\",\n        \"Poland\",\n        \"Portugal\",\n        \"Qatar\",\n        \"Romania\",\n        \"Russia\",\n        \"Rwanda\",\n        \"Saint Kitts and Nevis\",\n        \"Saint Lucia\",\n        \"Saint Vincent and the Grenadines\",\n        \"Samoa\",\n        \"San Marino\",\n        \"Sao Tome and Principe\",\n        \"Saudi Arabia\",\n        \"Senegal\",\n        \"Serbia\",\n        \"Seychelles\",\n        \"Sierra Leone\",\n        \"Singapore\",\n        \"Slovakia\",\n        \"Slovenia\",\n        \"Solomon Islands\",\n        \"Somalia\",\n        \"South Africa\",\n        \"South Sudan\",\n        \"Spain\",\n        \"Sri Lanka\",\n        \"Sudan\",\n        \"Suriname\",\n        \"Sweden\",\n        \"Switzerland\",\n        \"Syria\",\n        \"Taiwan\",\n        \"Tajikistan\",\n        \"Tanzania\",\n        \"Thailand\",\n        \"Timor-Leste\",\n        \"Togo\",\n        \"Trinidad and Tobago\",\n        \"Tunisia\",\n        \"Turkey\",\n        \"US\",\n        \"Uganda\",\n        \"Ukraine\",\n        \"United Arab Emirates\",\n        \"United Kingdom\",\n        \"Uruguay\",\n        \"Uzbekistan\",\n        \"Vanuatu\",\n        \"Venezuela\",\n        \"Vietnam\",\n        \"West Bank and Gaza\",\n        \"Yemen\",\n        \"Zambia\",\n        \"Zimbabwe\"]\n","import React, { useState, useEffect } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchCountry } from \"../api\";\n\nimport \"../css/CountryPicker.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(.5),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        //   marginTop: theme.spacing(2),\n    }\n}));\n\nconst CountryPicker = ({ classes, toggleCountry }) => {\n\n    const [countries, setCountries] = useState([]);\n    const classStyle = useStyles();\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    return (\n        <div id=\"picker\" className={`${classes[6]}`}>\n            <FormControl className=\"form\" className={`${classStyle.formControl} `} id=\"form\">\n                <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                    <option value={\"select a country\"} className={\"option\"}>Global</option>\n                    {\n                        modifiedData.map((country, i) =>\n                            <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                    }\n                </NativeSelect>\n            </FormControl>\n        </div>\n    )\n};\n\nexport default CountryPicker;","import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.css\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon }) => {\n\n  const [isChart, setIsChart] = useState(\"infected\");\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { admin0Style, admin2Style, todayStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n  admin0Style = isChart === \"infected\" ?\n    onStyle :\n    {}\n  admin2Style = isChart === \"deaths\" ?\n    onStyle :\n    {}\n  todayStyle = isChart === \"recovered\" ?\n    onStyle :\n    {}\n\n  return (\n    <div\n      className={`${classes[7]}`}\n      id=\"global-chart-wrapper\"\n      onMouseEnter={() => setIsHover(true)}\n      onMouseLeave={() => setIsHover(false)}\n      style={globalChartExpand ? { top: \"2em\", width: \"1390px\", height: \"730px\", marginRight: \".8em\" } : { width: \"382px\", height: \"307px\" }}\n    >\n      {\n        isLoad\n          ? <div className={\"loader-global-chart-wrapper\"}>\n            <div className={\"loader\"}>\n              {loader}\n            </div>\n            <div className={\"loading\"}>\n              Loading ...\n        </div>\n          </div>\n          : <Fragment>\n            <div className={\"expand-shrink-icon-wrapper\"}>\n        {\n          isHover\n            ? !globalChartExpand\n              ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setGlobalChartExpand(!globalChartExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n              : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setGlobalChartExpand(!globalChartExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n            : null\n        }\n      </div>\n      <div className=\"chart-wrapper-global\" >\n        <span className={\"chart-header\"} style={globalChartExpand ? { fontSize: \"2em\", left: \"260px\" } : { fontSize: \"0.7em\" }}>Global Infected Cases/Deaths/Recovered</span>\n        <div className={\"chart global-chart\"} style={globalChartExpand ? { width: \"1200px\", height: \"600px\" } : { width: \"385px\", height: \"200px\" }} >\n          {\n            isChart === \"infected\"\n              ? infectedLineChart\n              : isChart === \"deaths\"\n                ? deathsLineChart\n                : isChart === \"recovered\"\n                  ? recoveredLineChart\n                  : null\n          }\n        </div>\n\n        {\n          !globalChartExpand\n            ? <div className=\"chart-toggler\">\n              <div className={\"admin-icon\"} onClick={() => { toggleToLeft() }} >\n                {arrowLeft}\n              </div>\n              <div >\n                {\n                  isChart === \"infected\"\n                    ? <span className={\"card-toggler-name\"}>Infected</span>\n                    : isChart === \"deaths\"\n                      ? <span className={\"card-toggler-name\"}>Deaths</span>\n                      : isChart === \"recovered\"\n                        ? <span className={\"card-toggler-name\"}>Recovered</span>\n                        : null\n                }\n              </div>\n              <div className={\"admin-icon\"} onClick={() => { toggleToRight() }} >\n                {arrowRight}\n              </div>\n            </div>\n            : null\n        }\n      </div>\n      {\n        globalChartExpand\n          ? <div id=\"card-toggler\" style={globalChartExpand ? { bottom: \"-19px\", left: \"15px\" } : {}}>\n            <div className={\"toggler\"} style={admin0Style} onClick={() => { setIsChart(\"infected\") }}>Infected</div>\n            <div className={\"toggler\"} style={admin2Style} onClick={() => { setIsChart(\"deaths\") }} >Deaths</div>\n            <div className={\"toggler\"} style={todayStyle} onClick={() => { setIsChart(\"recovered\") }} >Recovered</div>\n          </div>\n          : null\n\n      }\n          </Fragment>\n      }\n    </div>\n  )\n};\n\nexport default GlobalCharts;","import React, { useState, useEffect } from \"react\";\n\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.css\"\n\nconst CountryCharts = ({ countriesYearlyData: { latest_data, timeline }, arrowLeft, arrowRight, option, classes, globalDailyChartExpand }) => {\n\n    const [isChart, setIsChart] = useState(\"infected\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !timeline || !latest_data) {\n        return (\n            <div className={\"loader-country-chart-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedTimeLine = timeline.map((data) => data).reverse();\n    //infected chart\n    const infectedLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ confirmed }) => confirmed),\n                            label: \"Infected\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(222, 53, 76, 1)\",\n                            backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(222, 53, 76, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n                            pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ deaths }) => deaths),\n                            label: \"Deaths\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(92, 95, 88, 1)\",\n                            backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(92, 95, 88, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n                            pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ recovered }) => recovered),\n                            label: \"Recovered\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(0, 255, 0, 1)\",\n                            backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(0, 255, 0, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n                            pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const barChart = (\n        latest_data.length !== 0\n            ? <Bar\n                data={{\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                    datasets: [{\n                        data: [latest_data.confirmed, latest_data.recovered, latest_data.deaths],\n                        backgroundColor: [\"rgba(222, 53, 76, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(92, 95, 88, 0.5)\"]\n                    }]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: { display: false },\n                    title: { display: false },\n                    scales: {\n                        xAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                maxTicksLimit: 12,\n                                fontColor: \"white\"\n                            }\n                        }],\n                        yAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                fontColor: \"white\",\n                                maxTicksLimit: 8,\n                                callback: function numFormatter(num) {\n                                    if (num > 999 && num < 1000000) {\n                                        return (num / 1000).toFixed(1) + 'K';\n                                    } else if (num >= 1000000) {\n                                        return (num / 1000000).toFixed(1) + 'M';\n                                    } else if (num < 900) {\n                                        return num;\n                                    }\n\n                                }\n                            }\n                        }\n                        ]\n                    }\n                }}\n            />\n            : null\n    );\n\n    const toggleToRight = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"infected\")\n        }\n    };\n    const toggleToLeft = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"infected\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = isChart === \"infected\" ?\n        onStyle :\n        {}\n    admin2Style = isChart === \"deaths\" ?\n        onStyle :\n        {}\n    todayStyle = isChart === \"recoverd\" ?\n        onStyle :\n        {}\n\n    return (\n        <div className={`${classes[6]}`}>\n            <div className={\"chart-wrapper country-charts\"}>\n                <div id=\"line-chart\">\n                    <span className={\"country-header\"} style={globalDailyChartExpand ? { fontSize: \"1.5em\", left: \"-20px\" } : { fontSize: \"0.7em\" }}>\n                        Daily Infected Cases/Deaths/Recovered by Country\n                </span>\n                    <div className={\"chart\"} style={globalDailyChartExpand ? { marginRight: \"5em\", width: \"580px\", height: \"600px\" } : { width: \"385px\", height: \"200px\" }}>\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className=\"chart-toggler\">\n                                <div className={\"admin-icon\"} onClick={() => { toggleToLeft() }} >\n                                    {arrowLeft}\n                                </div>\n                                <div >\n                                    {\n                                        isChart === \"infected\"\n                                            ? <span className={\"card-toggler-name\"}>Infected</span>\n                                            : isChart === \"deaths\"\n                                                ? <span className={\"card-toggler-name\"}>Deaths</span>\n                                                : isChart === \"recovered\"\n                                                    ? <span className={\"card-toggler-name\"}>Recovered</span>\n                                                    : null\n                                    }\n                                </div>\n                                <div className={\"admin-icon\"} onClick={() => { toggleToRight() }} >\n                                    {arrowRight}\n                                </div>\n                            </div>\n                            : null\n                    }\n                </div>\n                <div id=\"bar-chart\">\n                    <span className={\"country-header\"} style={globalDailyChartExpand ? { fontSize: \"1.5em\", left: \"-10px\" } : { fontSize: \"0.7em\" }}>\n                        Latest Infected Cases/Deaths/Recovered by Country\n                    </span>\n                    <div className={\"chart\"} style={globalDailyChartExpand ? { width: \"600px\", height: \"600px\" } : { width: \"385px\", height: \"200px\" }}>\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div id=\"card-toggler\" style={globalDailyChartExpand ? { bottom: \"-19px\", left: \"15px\" } : {}}>\n                        <div className={\"toggler\"} style={admin0Style} onClick={() => { setIsChart(\"infected\") }}>Infected</div>\n                        <div className={\"toggler\"} style={admin2Style} onClick={() => { setIsChart(\"deaths\") }}>Deaths</div>\n                        <div className={\"toggler\"} style={todayStyle} onClick={() => { setIsChart(\"recovered\") }} >Recovered</div>\n                    </div>\n                    : null\n\n            }\n        </div>\n    )\n}\n\nexport default CountryCharts","import React, { useState, useEffect } from \"react\";\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.css\"\n\nconst GlobalTodayCharts = ({ globalData, arrowRight, arrowLeft, option, classes, globalDailyChartExpand }) => {\n\n    const [isInfectedActiveChart, setIsInfectedActiveChart] = useState(\"infected\");\n    const [isDeathsRecoveredChart, setIsDeathsRecoveredChart] = useState(\"deaths\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad) {\n        return (\n            <div className={\"loader-country-chart-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedData = globalData.map((data) => data).reverse().filter(({ newConfirmed }) => newConfirmed < 3000000);\n\n    const toggleInfectedActiveChart = () => {\n        if (isInfectedActiveChart === \"infected\") {\n            setIsInfectedActiveChart(\"active\")\n        } else {\n            setIsInfectedActiveChart(\"infected\")\n        }\n    };\n\n    const toggleDeathsRecoveredChart = () => {\n        if (isDeathsRecoveredChart === \"deaths\") {\n            setIsDeathsRecoveredChart(\"recovered\")\n        } else {\n            setIsDeathsRecoveredChart(\"deaths\")\n        }\n    };\n\n    const infectedBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newConfirmed }) => newConfirmed),\n                        backgroundColor: \"red\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const activeBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ active }) => active),\n                        backgroundColor: \"rgba(241, 178, 74, 1)\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newRecovered }) => newRecovered),\n                        backgroundColor: \"#4D774E\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newDeaths }) => newDeaths),\n                        backgroundColor: \"#999\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    //toggle map togglers border bottom\n    let { infectedStyle, activeStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    infectedStyle = isInfectedActiveChart === \"infected\" ?\n        onStyle :\n        {}\n    activeStyle = isInfectedActiveChart === \"active\" ?\n        onStyle :\n        {}\n\n    let { deathsStyle, recoveredStyle } = {};\n    deathsStyle = isDeathsRecoveredChart === \"deaths\" ?\n        onStyle :\n        {}\n    recoveredStyle = isDeathsRecoveredChart === \"recovered\" ?\n        onStyle :\n        {}\n\n    return (\n        <div className={`${classes[6]}`}>\n            <div className={\"chart-wrapper\"}>\n                <div className={\"infected-active-chart\"}>\n                    <span className={\"daily-header\"} style={globalDailyChartExpand ? { fontSize: \"1.5em\", left: \"100px\" } : { fontSize: \"0.7em\", left : \"95px\" }}>\n                        Global Daily Infected/Active Cases\n                    </span>\n                    <div className={\"chart\"} style={globalDailyChartExpand ? { marginRight: \"5em\", width: \"580px\", height: \"600px\" } : { width: \"385px\", height: \"200px\" }}>\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className=\"chart-toggler\">\n                                <div className={\"admin-icon\"} onClick={() => { toggleInfectedActiveChart() }} >\n                                    {arrowLeft}\n                                </div>\n                                <div >\n                                    {\n                                        isInfectedActiveChart === \"infected\"\n                                            ? <span className={\"card-toggler-name\"}>Daily Infected Cases</span>\n                                            : <span className={\"card-toggler-name\"}>Daily Active cases</span>\n                                    }\n                                </div>\n                                <div className={\"admin-icon\"} onClick={() => { toggleInfectedActiveChart() }} >\n                                    {arrowRight}\n                                </div>\n                            </div>\n                            : null\n                    }\n\n                </div>\n                <div className={\"deaths-recovered-chart\"}>\n                    <span className={\"daily-header\"} style={globalDailyChartExpand ? { fontSize: \"1.5em\", left: \"120px\" } : { fontSize: \"0.7em\", left : \"110px\" }}>\n                        Global Daily Deaths/Recovered\n                    </span>\n                    <div className={\"chart\"} style={globalDailyChartExpand ? { width: \"600px\", height: \"600px\" } : { width: \"385px\", height: \"200px\" }}>\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                    {\n                        !globalDailyChartExpand\n                            ? <div className=\"chart-toggler\">\n                                <div className={\"admin-icon\"} onClick={() => { toggleDeathsRecoveredChart() }} >\n                                    {arrowLeft}\n                                </div>\n                                <div >\n                                    {\n                                        isDeathsRecoveredChart === \"deaths\"\n                                            ? <span className={\"card-toggler-name\"}>Daily Deaths</span>\n                                            : <span className={\"card-toggler-name\"}>Daily Recovered</span>\n                                    }\n                                </div>\n                                <div className={\"admin-icon\"} onClick={() => { toggleDeathsRecoveredChart() }} >\n                                    {arrowRight}\n                                </div>\n                            </div>\n                            : null\n                    }\n                </div>\n            </div>\n            {\n                globalDailyChartExpand\n                    ? <div id=\"card-toggler\" style={globalDailyChartExpand ? { bottom: \"-19px\", left: \"15px\" } : {}}>\n                        <div className={\"toggler\"} style={infectedStyle} onClick={() => { setIsInfectedActiveChart(\"infected\") }}>Global Daily Infected Cases</div>\n                        <div className={\"toggler\"} style={activeStyle} onClick={() => { setIsInfectedActiveChart(\"active\") }} >Gloabl Daily Active Cases</div>\n                    </div>\n                    : null\n            }\n            {\n                globalDailyChartExpand\n                    ? <div id=\"card-toggler\" style={globalDailyChartExpand ? { bottom: \"-19px\", left: \"730px\" } : {}}>\n                        <div className={\"toggler\"} style={deathsStyle} onClick={() => { setIsDeathsRecoveredChart(\"deaths\") }}>Global Daily Deaths</div>\n                        <div className={\"toggler\"} style={recoveredStyle} onClick={() => { setIsDeathsRecoveredChart(\"recovered\") }} >Global Daily Recovered</div>\n                    </div>\n                    : null\n            }\n        </div>\n    )\n};\n\nexport default GlobalTodayCharts;","import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst ActiveMap = (props) => {\n\n    const toggleIconSize = (active) => {\n        let iconSize = [];\n\n        if (active > 500000) {\n            iconSize = [20, 20]\n        } else if (active > 300000) {\n            iconSize = [15, 15]\n        } else if (active > 100000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Location_dot_orange.svg/1024px-Location_dot_orange.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.confirmed)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                            <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                            <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                            <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.confirmed)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Cases: <strong>{props.formatNumber(data.confirmed)}</strong></p>\n                                <p>Recovered: <strong>{props.formatNumber(data.recovered)}</strong></p>\n                                <p>Deaths: <strong>{props.formatNumber(data.deaths)}</strong></p>\n                                <p>Active: <strong>{props.formatNumber(data.active)}</strong></p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default ActiveMap;","import React from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport L from \"leaflet\";\n\nconst IncidentRate = (props) => {\n\n    const toggleIconSize = (incidentRate) => {\n        let iconSize = [];\n\n        if (incidentRate > 10000) {\n            iconSize = [20, 20]\n        } else if (incidentRate > 8000) {\n            iconSize = [15, 15]\n        } else if (incidentRate > 5000) {\n            iconSize = [10, 10]\n        } else {\n            iconSize = [5, 5]\n        }\n        return new L.Icon({\n            iconUrl: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/Yellow_icon.svg/1200px-Yellow_icon.svg.png\",\n            iconSize: iconSize\n        });\n    };\n\n    return (\n        <MapContainer center={[28.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                props.noProvince.map((data, i) =>\n                    <Marker\n                        key={i}\n                        position={[data.lat, data.long]}\n                        icon={toggleIconSize(data.incidentRate)}\n                    >\n                        <Popup>\n                            <h3>{data.key}</h3>\n                            <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                        </Popup>\n                    </Marker>\n                )\n            }\n            {\n                props.provinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000 people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n            {\n                props.usProvinces.map((data) =>\n                    data.map((data, i) =>\n                        <Marker\n                            key={i}\n                            position={[data.lat, data.long]}\n                            icon={toggleIconSize(data.incidentRate)}\n                        >\n                            <Popup position={[data.lat, data.long]}>\n                                <h3>{data.key}</h3>\n                                <p>Incident rate: {Math.floor(data.incidentRate)} per 100,000people</p>\n                            </Popup>\n                        </Marker>\n                    )\n                )\n            }\n        </MapContainer>\n    )\n}\n\nexport default IncidentRate;","import React, { useEffect, useState } from \"react\";\n\n//components\nimport CamulativeMap from \"./CamulativeMap/CamulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.css\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon }) => {\n\n    const [isMap, setIsMap] = useState(\"calmulative\");\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData[0]) {\n        return \"Loading\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { calmulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    calmulativeStyle = isMap === \"calmulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <div>\n            <div\n                className={`${classes[3]}`}\n                id=\"maps-toggler\"\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={mapExpand ? { width: \"1410px\", height: \"735px\", marginLeft: \".6em\" } : { width: \"740px\", height: \"420px\" }}\n            >\n                <div className={\"expand-shrink-icon-wrapper\"} >\n                    {\n                        isHover\n                            ? !mapExpand\n                                ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setMapExpand(!mapExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setMapExpand(!mapExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                            : null\n                    }\n                </div>\n                <div id=\"maps-wrapper\">\n                    {\n                        isMap === \"calmulative\"\n                            ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"active\"\n                                ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : isMap === \"incidentRate\"\n                                    ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                    : null\n                    }\n                </div>\n                <div style={mapExpand ? { marginLeft: \"1em\" } : { marginLeft: \".2em\" }} id=\"map-toggler\">\n                    <div className={\"toggler\"} style={calmulativeStyle} onClick={() => { setIsMap(\"calmulative\") }}> Calmulative Cases </div>\n                    <div className={\"toggler\"} style={activeStyle} onClick={() => { setIsMap(\"active\") }} >Active Cases</div>\n                    <div className={\"toggler\"} style={incidentRateStyle} onClick={() => { setIsMap(\"incidentRate\") }} > Incident Rate </div>\n                </div>\n            </div >\n        </div >\n    )\n}\n\n\n\nexport default Maps;","import React, { useState } from \"react\";\n\nimport \"./InfectedCard.css\";\n\nconst InfectedCard = ({ countriesData, globalData, provincesData, arrowLeft, arrowRight, infectedCardExpand, expandIcon, shrinkIcon, setInfectedCardExpand }) => {\n\n    const [infectedCard, setInfectedCard] = useState(\"admin0\");\n    const [isHover, setIsHover] = useState(false);\n\n    //check if countriesData, globalData are asigned\n    if (!globalData[0]) {\n        return \"Loading ...\"\n    };\n    if (!countriesData[0]) {\n        return \"Loading\"\n    };\n    if(!provincesData[0]){\n        return \"Loading\"\n    }\n\n    //modify provinces data\n    const modifiedProvincesData = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .map(({ confirmed, key }) => [confirmed, key])\n            .filter((data) => data[0] > 30000))\n        .filter((data) => data.length > 0)\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n\n    //modify latest datas and sort \n    const modifiedLatestData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    //modify today's data and sort\n    const modifiedTodayData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].confirmed - a[2].confirmed);\n\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    const toggleAdminInfectedRight = () => {\n        if (infectedCard === \"admin0\") {\n            setInfectedCard(\"admin2\")\n        } else if (infectedCard === \"admin2\") {\n            setInfectedCard(\"today\")\n        } else if (infectedCard === \"today\") {\n            setInfectedCard(\"admin0\")\n        }\n    };\n    const toggleAdminInfectedLeft = () => {\n        if (infectedCard === \"admin0\") {\n            setInfectedCard(\"today\")\n        } else if (infectedCard === \"today\") {\n            setInfectedCard(\"admin2\")\n        } else if (infectedCard === \"admin2\") {\n            setInfectedCard(\"admin0\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = infectedCard === \"admin0\" ?\n        onStyle :\n        {}\n    admin2Style = infectedCard === \"admin2\" ?\n        onStyle :\n        {}\n    todayStyle = infectedCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <div>\n            <div\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                id=\"list-infected-wrapper\"\n                style={infectedCardExpand ? { width: \"98%\", height: \"730px\", marginLeft: \".8em\" } : { width: \"260px\", height: \"440px\" }}\n            >\n                <div className={\"expand-shrink-icon-wrapper\"}>\n                    {\n                        isHover\n                            ? !infectedCardExpand\n                                ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setInfectedCardExpand(!infectedCardExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setInfectedCardExpand(!infectedCardExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                            : null\n                    }\n                </div>\n                <div id=\"heading\">\n                    {\n                        infectedCard === \"admin0\" || infectedCard === \"admin2\"\n                            ? <h4>Global Cases</h4>\n                            : <h4>Global Today's Cases</h4>\n                    }\n                    {\n                        infectedCard === \"admin0\" || infectedCard === \"admin2\"\n                            ? <h1 className={\"infected-num num\"}>{formatNumber(globalData[0].confirmed)}</h1>\n                            : <h1 className={\"infected-num num\"}>{formatNumber(globalData[0].newConfirmed)}</h1>\n                    }\n                </div>\n                {\n                    infectedCard === \"admin0\"\n                        ? <div id=\"admin0-heading\">Cases by Country</div>\n                        : infectedCard === \"admin2\"\n                            ? <div id=\"admin2-heading\"><span>Cases by</span><span>Province/State/Dependency</span></div>\n                            : infectedCard === \"today\"\n                                ? <div id=\"admin0-heading\">Cases by Country</div>\n                                : null\n                }\n                <div id=\"ul\">\n                    {\n                        infectedCard === \"admin0\"\n                            ? modifiedLatestData.map((data, i) =>\n                                <div className={\"li\"} key={i}><span className={\"infected-num\"}>{formatNumber(data[1].confirmed)} </span><span>{data[0]}</span></div>\n                            )\n                            : infectedCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"li-provinces\"} key={i}><span className={\"infected-num\"}>{formatNumber(data[0])} <span className={\"suffix\"}>cases</span></span><span>{data[1]}</span></div>\n                                )\n                                : infectedCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"li\"} key={i}><span className={\"infected-num\"}>{formatNumber(data[2].confirmed)} </span><span>{data[0]}</span></div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            {\n                !infectedCardExpand\n                    ? <div className={\"card-toggler\"}>\n                        <span className={\"admin-icon\"} onClick={() => { toggleAdminInfectedLeft() }}>{arrowLeft}</span>\n                        {\n                            infectedCard === \"admin0\"\n                                ? <span className={\"card-toggler-name\"}>Admin0</span>\n                                : infectedCard === \"admin2\"\n                                    ? <span className={\"card-toggler-name\"}>Admin2</span>\n                                    : infectedCard === \"today\"\n                                        ? <span className={\"card-toggler-name\"}>Today's Infected Cases</span>\n                                        : null\n                        }\n                        <span className={\"admin-icon\"} onClick={() => { toggleAdminInfectedRight() }}>{arrowRight}</span>\n                    </div>\n                    : <div id=\"card-toggler\" style={infectedCardExpand ? { bottom: \"-13px\", left: \"15px\" } : {}}>\n                        <div className={\"toggler\"} style={admin0Style} onClick={() => { setInfectedCard(\"admin0\") }}>Admin0</div>\n                        <div className={\"toggler\"} style={admin2Style} onClick={() => { setInfectedCard(\"admin2\") }} >Admin2</div>\n                        <div className={\"toggler\"} style={todayStyle} onClick={() => { setInfectedCard(\"today\") }} >Today's Infected Cases</div>\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default InfectedCard;","import React, { useState } from \"react\";\nimport \"./DeathsRecoveredCard.css\"\n\nconst DeathsRecoveredCard = ({ countriesData, globalData, classes, arrowLeft, arrowRight, deathsdCardExpand, setDeathsCardExpand, expandIcon, shrinkIcon }) => {\n\n    const [deathsRecoveredCard, setDeathsRecoveredCard] = useState(\"deaths\");\n    const [isHover, setIsHover] = useState(false);\n\n    //check if countriesData, globalData are asigned\n    if (!globalData[0]) {\n        return \"Loading ...\"\n    };\n    if (!countriesData[0]) {\n        return \"Loading\"\n    };\n\n    //modify deaths datas\n    const modifiedDeathsData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].deaths - a[1].deaths);\n\n    //modify recovered datas\n    const modifiedRecoveredData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].recovered - a[1].recovered);\n\n    //modify today's deaths data and sort\n    const modifiedTodayDeathData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].deaths - a[2].deaths);\n\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    const toggleDeathsRecoveredRight = () => {\n        if (deathsRecoveredCard === \"deaths\") {\n            setDeathsRecoveredCard(\"recovered\")\n        } else if (deathsRecoveredCard === \"recovered\") {\n            setDeathsRecoveredCard(\"today\")\n        } else if (deathsRecoveredCard === \"today\") {\n            setDeathsRecoveredCard(\"deaths\")\n        }\n    };\n    const toggleDeathsRecoveredLeft = () => {\n        if (deathsRecoveredCard === \"deaths\") {\n            setDeathsRecoveredCard(\"today\")\n        } else if (deathsRecoveredCard === \"today\") {\n            setDeathsRecoveredCard(\"recovered\")\n        } else if (deathsRecoveredCard === \"recovered\") {\n            setDeathsRecoveredCard(\"deaths\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = deathsRecoveredCard === \"deaths\" ?\n        onStyle :\n        {}\n    admin2Style = deathsRecoveredCard === \"recovered\" ?\n        onStyle :\n        {}\n    todayStyle = deathsRecoveredCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <div className={classes[1]}>\n            <div\n                id=\"list-deaths-wrapper\"\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={deathsdCardExpand ? { width: \"98%\", height: \"730px\", marginLeft: \".8em\" } : { width: \"200px\", height: \"410px\" }}\n            >\n                <div className={\"expand-shrink-icon-wrapper\"}>\n                    {\n                        isHover\n                            ? !deathsdCardExpand\n                                ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setDeathsCardExpand(!deathsdCardExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setDeathsCardExpand(!deathsdCardExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                            : null\n                    }\n                </div>\n                <div id=\"heading\">\n                    <h4>\n                        {\n                            deathsRecoveredCard === \"deaths\"\n                                ? \"Global Deaths\"\n                                : deathsRecoveredCard === \"recovered\"\n                                    ? \"Global Recovered\"\n                                    : deathsRecoveredCard === \"today\"\n                                        ? \"Global Today's Deaths\"\n                                        : null\n                        }\n                    </h4>\n                    {\n                        deathsRecoveredCard === \"deaths\"\n                            ? <h1 className={\"deaths-num num\"}>{formatNumber(globalData[0].deaths)}</h1>\n                            : deathsRecoveredCard === \"recovered\"\n                                ? <h1 className={\"recovered-num num\"}>{formatNumber(globalData[0].recovered)}</h1>\n                                : deathsRecoveredCard === \"today\"\n                                    ? <h1 className={\"deaths-num num\"}>{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n                </div>\n                {\n                    deathsRecoveredCard === \"deaths\"\n                        ? <div id=\"admin0-heading\">Deaths by Country</div>\n                        : deathsRecoveredCard === \"recovered\"\n                            ? <div id=\"admin0-heading\">Recovered by Country</div>\n                            : deathsRecoveredCard === \"today\"\n                                ? <div id=\"admin0-heading\">Today's Deaths by Country</div>\n                                : null\n                }\n                <div id=\"ul\">\n                    {\n                        deathsRecoveredCard === \"deaths\"\n                            ? modifiedDeathsData.map((data, i) =>\n                                <div className={\"li\"} key={i}><span className={\"deaths-num\"}>{formatNumber(data[1].deaths)} </span><span>{data[0]}</span></div>\n                            )\n                            : deathsRecoveredCard === \"recovered\"\n                                ? modifiedRecoveredData.map((data, i) =>\n                                    <div className={\"li\"} key={i}><span className={\"recovered-num\"}>{formatNumber(data[1].recovered)} </span><span>{data[0]}</span></div>\n                                )\n                                : deathsRecoveredCard === \"today\"\n                                    ? modifiedTodayDeathData.map((data, i) =>\n                                        <div className={\"li\"} key={i}><span className={\"deaths-num\"}>{formatNumber(data[2].deaths)} </span><span>{data[0]}</span></div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            {\n                !deathsdCardExpand\n                    ? <div className={\"card-toggler\"}>\n                        <span className={\"admin-icon\"} onClick={() => { toggleDeathsRecoveredLeft() }}>{arrowLeft}</span>\n                        {\n                            deathsRecoveredCard === \"deaths\"\n                                ? <span className={\"card-toggler-name\"}>Global Deaths</span>\n                                : deathsRecoveredCard === \"recovered\"\n                                    ? <span className={\"card-toggler-name\"}>Gloabl Recovered</span>\n                                    : deathsRecoveredCard === \"today\"\n                                        ? <span className={\"card-toggler-name\"}>Today's Deaths</span>\n                                        : null\n                        }\n                        <span className={\"admin-icon\"} onClick={() => { toggleDeathsRecoveredRight() }}>{arrowRight}</span>\n                    </div>\n                    : <div id=\"card-toggler\" style={deathsdCardExpand ? { bottom: \"-13px\", left: \"15px\" } : {}}>\n                        <div className={\"toggler\"} style={admin0Style} onClick={() => { setDeathsRecoveredCard(\"deaths\") }}>Global Deaths</div>\n                        <div className={\"toggler\"} style={admin2Style} onClick={() => { setDeathsRecoveredCard(\"recovered\") }} >Gloabl Recovered</div>\n                        <div className={\"toggler\"} style={todayStyle} onClick={() => { setDeathsRecoveredCard(\"today\") }} >Today's Deaths</div>\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default DeathsRecoveredCard;","import React, { useState } from \"react\";\nimport \"./ActiveIncidentRateCard.css\";\n\nconst ActiveIncidentRateCard = ({ provincesData, classes, arrowLeft, arrowRight, activeCardExpand, setActiveCardExpand, expandIcon, shrinkIcon }) => {\n\n    const [activeIncidentRateCard, setActiveIncidentRateCard] = useState(\"active\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!provincesData[0]) {\n        return \"Loading\"\n    };\n\n    const modifiedActiveData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active, key }) => [active, key])\n            .filter((data) => data[0] > 30000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const modifiedActiveDataSum = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b);\n\n    const modifiedIncidentRateData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ incidentRate, key }) => [incidentRate, key])\n            .filter((data) => data[0] > 12000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const numberOfProvinces = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat().length;\n\n    const modifiedIncidentRateDataAvarage = Math.floor((provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b)) / numberOfProvinces);\n\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    const toggleActiveIncidentRateCard = () => {\n        if (activeIncidentRateCard === \"active\") {\n            setActiveIncidentRateCard(\"incidentRate\")\n        } else {\n            setActiveIncidentRateCard(\"active\")\n        }\n    }\n\n    let { admin0Style, admin2Style } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = activeIncidentRateCard === \"active\" ?\n        onStyle :\n        {}\n    admin2Style = activeIncidentRateCard === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <div className={`${classes[2]}`}>\n            <div\n                id=\"list-active-wrapper\"\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={activeCardExpand ? { width: \"98%\", height: \"730px\", marginLeft: \".8em\" } : { width: \"200px\", height: \"410px\" }}\n            >\n                <div className={\"expand-shrink-icon-wrapper\"}>\n                    {\n                        isHover\n                            ? !activeCardExpand\n                                ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setActiveCardExpand(!activeCardExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setActiveCardExpand(!activeCardExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                            : null\n                    }\n                </div>\n                {\n                    activeIncidentRateCard === \"active\"\n                        ? <div id=\"heading\">\n                            <h4>Global Active Case</h4>\n                            <h1 className={\"active-num num\"}>{formatNumber(modifiedActiveDataSum)}</h1>\n                        </div>\n                        : <div id=\"heading-active\">\n                            <div id=\"incidentRate-heading\"><h4>Global Incident Rate</h4> <h5>(per100,000 people)</h5></div>\n                            <h1 className={\"incidentRate-num num\"}>{formatNumber(modifiedIncidentRateDataAvarage)}</h1>\n                        </div>\n                }\n                <div id=\"admin2-heading\"><span>Cases by</span><span>Province/State/Dependency</span></div>\n                <div id=\"ul\">\n                    {\n                        activeIncidentRateCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"li-provinces\"} key={i}><span className={\"active-num\"}>{formatNumber(data[0])} <span className={\"suffix\"}>cases</span></span><span className={\"suffix\"}>{data[1]}</span></div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"li-provinces\"} key={i}><span className={\"incidentRate-num\"}>{formatNumber(Math.floor(data[0]))}<span className={\"suffix\"}></span></span><span className={\"suffix\"}>{data[1]}</span></div>\n                            )\n                    }\n                </div>\n            </div>\n            {\n                !activeCardExpand\n                    ? <div className={\"card-toggler\"}>\n                        <span className={\"admin-icon\"} onClick={() => { toggleActiveIncidentRateCard() }}>{arrowLeft}</span>\n                        {\n                            activeIncidentRateCard === \"active\"\n                                ? <span className={\"card-toggler-name\"}>Global Active Cases</span>\n                                : activeIncidentRateCard === \"incidentRate\"\n                                    ? <span className={\"card-toggler-name\"}>Global Incident Rate</span>\n                                    : null\n                        }\n                        <span className={\"admin-icon\"} onClick={() => { toggleActiveIncidentRateCard() }}>{arrowRight}</span>\n                    </div>\n                    : <div id=\"card-toggler\" style={activeCardExpand ? { bottom: \"-13px\", left: \"15px\" } : {}}>\n                        <div className={\"toggler\"} style={admin0Style} onClick={() => { setActiveIncidentRateCard(\"active\") }}>Global Active Cases</div>\n                        <div className={\"toggler\"} style={admin2Style} onClick={() => { setActiveIncidentRateCard(\"incidentRate\") }} >Gloabl Incident Rate</div>\n                    </div>\n            }\n        </div>\n    )\n}\nexport default ActiveIncidentRateCard;","import React, { useState, useEffect } from \"react\";\n\n//Components \nimport CountryPicker from \"./Components/CountryPicker\";\nimport GlobalCharts from \"./Components/Charts/GlobalCharts\";\nimport CountryCharts from \"./Components/Charts/CountryCharts\";\nimport GlobalTodayCharts from \"./Components/Charts/GlobalTodayCharts\";\nimport Maps from \"./Components/Maps/Maps\";\nimport InfectedCard from \"./Components/Cards/InfectedCard/InfectedCard\";\nimport DeathsRecoveredCard from \"./Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard\";\nimport ActiveIncidentRateCard from \"./Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard\";\n\nimport \"./css/App.css\";\n\nimport { fetchProvinceData, fetchCountriesData, fetchGlobaldata, fetchCountriesYearlyData } from \"./api\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithubSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faTumblrSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst github = < FontAwesomeIcon icon={faGithubSquare} />\nconst twitter = < FontAwesomeIcon icon={faTwitterSquare} />\nconst tumblr = < FontAwesomeIcon icon={faTumblrSquare} />\nconst arrowLeft = < FontAwesomeIcon icon={faCaretLeft} />\nconst arrowRight = < FontAwesomeIcon icon={faCaretRight} />\nconst expandIcon = < FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst shrinkIcon = < FontAwesomeIcon icon={faCompressArrowsAlt} />\n\nconst App = () => {\n\n    const [globalData, setGlobaldata] = useState({})\n    const [country, setCountry] = useState(\"select a country\");\n    const [countriesData, setCountriesData] = useState({});\n    const [provincesData, setProvincesData] = useState();\n    const [countriesYearlyData, setCountriesYearlyData] = useState({});\n\n    const [infectedCardExpand, setInfectedCardExpand] = useState(false);\n    const [deathsdCardExpand, setDeathsCardExpand] = useState(false);\n    const [activeCardExpand, setActiveCardExpand] = useState(false);\n    const [mapExpand, setMapExpand] = useState(false);\n    const [dataPanelExpand, setDataPanelExpand] = useState(false);\n    const [updatePanelExpand, setUpdatePanelExpand] = useState(false);\n    const [globalDailyChartExpand, setGlobalDailyChartExpand] = useState(false);\n    const [globalChartExpand, setGlobalChartExpand] = useState(false);\n    const [countryChartExpand, setCountryChartExpand] = useState(false);\n\n    const [isDataHover, setIsDataHover] = useState(false);\n    const [isUpdateHover, setIsUpdateHover] = useState(false);\n    const [isChartHover, setIsChartHover] = useState(false);\n\n    const [isLoad, setIsLoad] = useState(true)\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setProvincesData(await fetchProvinceData());\n            setCountriesData(await fetchCountriesData());\n            setGlobaldata(await fetchGlobaldata());\n        }\n        fetchAPI();\n    }, [setCountriesData]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 3000)\n    })\n\n    const loader = <Loader\n        type=\"Bars\"\n        color=\"#3500D3\"\n        height={100}\n        width={100}\n        timeout={3000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={\"loader-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    }\n\n    //country picker\n    const toggleCountry = async (country) => {\n        setCountry(country);\n        setCountriesYearlyData(await fetchCountriesYearlyData(country));\n    };\n\n    // get formatted time for lastUpdate\n    const getFormattedDate = () => {\n        let lastUpdate = String(new Date(globalData[0].lastUpdate));\n        let month = String(lastUpdate.slice(4, 7));\n        switch (month) {\n            case \"Jan\":\n                month = \"1\"\n                break;\n            case \"Feb\":\n                month = \"2\";\n                break;\n            case \"Mar\":\n                month = \"3\";\n                break;\n            case \"Apr\":\n                month = \"4\";\n                break;\n            case \"May\":\n                month = \"5\";\n                break;\n            case \"Jun\":\n                month = \"6\";\n                break;\n            case \"Jul\":\n                month = \"7\";\n                break;\n            case \"Aug\":\n                month = \"8\";\n                break;\n            case \"Sep\":\n                month = \"9\";\n                break;\n            case \"Oct\":\n                month = \"10\";\n                break;\n            case \"Nov\":\n                month = \"11\";\n                break;\n            case \"Dec\":\n                month = \"12\";\n                break;\n            default:\n                month = \"\";\n        };\n\n        let day = String(lastUpdate.slice(8, 10));\n\n        let year = String(lastUpdate.slice(11, 15));\n\n        let hour = lastUpdate.slice(16, 18);\n        let ampm = \"\"\n        if (hour > 12) {\n            hour -= 12\n            ampm = \"PM\"\n        } else {\n            ampm = \"AM\"\n        }\n        let minute = String(lastUpdate.slice(19, 21))\n        return month + \"/\" + day + \"/\" + year + \",\" + hour + \":\" + minute + \" \" + ampm\n    };\n\n    // separate number with separator\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //format for chart \n    const option = {\n        maintainAspectRatio: false,\n        legend: { display: false },\n        tooltips: {\n            xPadding: 15,\n            yPadding: 15,\n            yAlign: \"bottom\",\n            callbacks: {\n                title: (items, data) => data['labels'][items[0]['index']],\n                label: (item, data) => formatNumber(data['datasets'][0]['data'][item['index']])\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                },\n                ticks: {\n                    maxTicksLimit: 6,\n                    fontColor: \"#f5f5f5\",\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    maxTicksLimit: 8,\n                    callback: function numFormatter(num) {\n                        if (num > 999 && num < 1000000) {\n                            return (num / 1000).toFixed(1) + 'K';\n                        } else if (num >= 1000000) {\n                            return (num / 1000000).toFixed(1) + 'M';\n                        } else if (num < 900) {\n                            return num;\n                        }\n                    },\n                    fontColor: \"#f5f5f5\",\n                },\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                }\n            }]\n        }\n    };\n\n    //toggle expand and hide\n    const classes =\n        infectedCardExpand\n            ? [\"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n            : deathsdCardExpand\n                ? [\"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                : activeCardExpand\n                    ? [\"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                    : mapExpand\n                        ? [\"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                        : dataPanelExpand\n                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                            : updatePanelExpand\n                                ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\"]\n                                : globalDailyChartExpand\n                                    ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\"]\n                                    : globalChartExpand\n                                        ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\"]\n                                        : countryChartExpand\n                                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\"]\n                                            : [\"a\", \"a\", \"a\", \"a\"];\n\n    return (\n        <div id=\"app-wrapper\">\n            <div id=\"header\" className={\"row\"}>\n                <img id=\"icon-covid\" src=\"https://www.unmc.edu/_images/check-covid-icon.png\" />\n                <h1> World COVID-19 Dashbord </h1>\n                <p> <span> Desinged and Coded </span> <span>by Shuto.S</span> </p>\n                <div id=\"nav\">\n                    <a href=\"https://github.com/Shuto46490802\" target=\"_blank\" > {github} </a>\n                    <a href=\"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=%22We%20must%20believe%20that%20we%20are%20gifted%20for%20something%2C%20and%20that%20this%20thing%2C%20at%20whatever%20cost%2C%20must%20be%20attained.%22%20Marie%20Curie\" target=\"_blank\" > {twitter} </a>\n                    <a href=\"https://www.tumblr.com/\" target=\"_blank\" > {tumblr} </a>\n                </div>\n            </div>\n            <div id=\"main\">\n                <div id=\"cards-map-wrapper\" >\n                    <div className={`card-wrapper ${classes[0]}`}>\n                        <InfectedCard\n                            classes={classes}\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            formatNumber={formatNumber}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            infectedCardExpand={infectedCardExpand}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                    <div id=\"maps\" className={`${classes[3]}`}>\n                        <Maps\n                            classes={classes}\n                            provincesData={provincesData}\n                            setMapExpand={setMapExpand}\n                            mapExpand={mapExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon} />\n                    </div>\n                    <div className={`card-wrapper ${classes[1]}`}>\n                        <DeathsRecoveredCard\n                            classes={classes}\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            deathsdCardExpand={deathsdCardExpand}\n                            setDeathsCardExpand={setDeathsCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                    <div className={`card-wrapper ${classes[2]}`}>\n                        <ActiveIncidentRateCard\n                            classes={classes}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            activeCardExpand={activeCardExpand}\n                            setActiveCardExpand={setActiveCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                </div>\n                <div className={\"charts-infos\"} >\n                    <div id=\"info-panel\">\n                        <div\n                            className={`row-panel-wrapper ${classes[4]}`}\n                            onMouseEnter={() => setIsDataHover(true)}\n                            onMouseLeave={() => setIsDataHover(false)}\n                            style={dataPanelExpand ? { width: \"1400px\", height: \"738px\", marginLeft: \".8em\" } : {}}\n                        >\n                            <div className={\"expand-shrink-icon-wrapper\"}>\n                                {\n                                    isDataHover\n                                        ? !dataPanelExpand\n                                            ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setDataPanelExpand(!dataPanelExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                            : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setDataPanelExpand(!dataPanelExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                                        : null\n                                }\n                            </div>\n                            <div className={\"row-panel\"}>\n                                <div style={dataPanelExpand ? { padding: \"3.5em .5em 3.5em .5em\" } : { padding: \"1.6em .2em .8em .3em\" }} className={`today-data today-infected-panel`}>\n                                    <span style={dataPanelExpand ? { fontSize: \"2em\" } : { fontSize: \".6em\" }}>Today's Global New Cases</span>\n                                    <h2 style={dataPanelExpand ? { fontSize: \"9em\" } : { fontSize: \"1.5em\" }} className={\"infected-num\"}>\n                                        {formatNumber(globalData[0].newConfirmed)}\n                                    </h2>\n                                </div>\n                                <div style={dataPanelExpand ? { padding: \"3.5em .5em 3.5em .5em\" } : { padding: \"1.6em .2em .8em .3em\" }} className={`today-data`}>\n                                    <span style={dataPanelExpand ? { fontSize: \"2em\" } : { fontSize: \".6em\" }}>Today's Global Deaths</span>\n                                    <h2 style={dataPanelExpand ? { fontSize: \"9em\" } : { fontSize: \"1.5em\" }} className={\"deaths-num\"}>\n                                        {formatNumber(globalData[0].newDeaths)}\n                                    </h2>\n                                </div>\n                            </div>\n                            <div className={\"row-panel\"}>\n                                <div style={dataPanelExpand ? { padding: \"3.5em .5em 3.5em .5em\" } : { padding: \"1.6em .2em .8em .3em\" }} className={`today-data`}>\n                                    <span style={dataPanelExpand ? { fontSize: \"2em\" } : { fontSize: \".6em\" }}>Today's Global Recovered</span>\n                                    <h2 style={dataPanelExpand ? { fontSize: \"9em\" } : { fontSize: \"1.5em\" }} className={\"recovered-num\"}>\n                                        {formatNumber(globalData[0].newRecovered)}\n                                    </h2>\n                                </div>\n                                <div style={dataPanelExpand ? { padding: \"3.5em .5em 3.5em .5em\" } : { padding: \"1.6em .2em .8em .3em\" }} className={`today-data num-of-country-panel`}>\n                                    <span style={dataPanelExpand ? { fontSize: \"2em\" } : { fontSize: \".6em\" }}>Countries/Provinces</span>\n                                    <h2 style={dataPanelExpand ? { fontSize: \"9em\" } : { fontSize: \"1.5em\" }}>\n                                        {\n                                            countriesData\n                                                .map(({ latestData }) => latestData)\n                                                .filter((data) => data.confirmed > 0).length}/{provincesData.flat().length\n                                        }\n                                    </h2>\n                                </div>\n                            </div>\n                        </div>\n                        <div\n                            className={`update-panel ${classes[5]}`}\n                            onMouseEnter={() => setIsUpdateHover(true)}\n                            onMouseLeave={() => setIsUpdateHover(false)}\n                            style={updatePanelExpand ? { width: \"1390px\", height: \"715px\", marginLeft: \".8em\" } : {}}\n                        >\n                            <div className={\"expand-shrink-icon-wrapper\"}>\n                                {\n                                    isUpdateHover\n                                        ? !updatePanelExpand\n                                            ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setUpdatePanelExpand(!updatePanelExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                            : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setUpdatePanelExpand(!updatePanelExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                                        : null\n                                }\n                            </div>\n                            <span style={updatePanelExpand ? { fontSize: \"3em\", top: \"2em\" } : { fontSize: \".6em\" }} >Last Updated at (M/D/YYYY)</span>\n                            <h2 style={updatePanelExpand ? { fontSize: \"9em\" } : { fontSize: \"1.5em\" }}>{getFormattedDate()}</h2>\n                        </div>\n                    </div>\n                    <div id=\"charts\" >\n                        <div\n                            id=\"country-chart\"\n                            className={`${classes[6]}`}\n                            onMouseEnter={() => setIsChartHover(true)}\n                            onMouseLeave={() => setIsChartHover(false)}\n                            style={globalDailyChartExpand ? { top: \"2em\", width: \"1390px\", height: \"725px\", marginRight: \".8em\" } : { width: \"775px\", height: \"307px\" }}\n                        >\n                            <div className={\"expand-shrink-icon-wrapper\"}>\n                                {\n                                    isChartHover\n                                        ? !globalDailyChartExpand\n                                            ? <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setGlobalDailyChartExpand(!globalDailyChartExpand)} className={\"expand-shrink-icon\"}>{expandIcon}</div>\n                                            : <div style={{ top: \"-6px\", right: \"-5px\" }} onClick={() => setGlobalDailyChartExpand(!globalDailyChartExpand)} className={\"expand-shrink-icon\"}>{shrinkIcon}</div>\n                                        : null\n                                }\n                            </div>\n                            <CountryPicker\n                                id=\"picker\"\n                                classes={classes}\n                                toggleCountry={toggleCountry} />\n                            {\n                                country === \"select a country\"\n                                    ? <GlobalTodayCharts\n                                        classes={classes}\n                                        globalData={globalData}\n                                        option={option}\n                                        arrowLeft={arrowLeft}\n                                        arrowRight={arrowRight}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        setGlobalDailyChartExpand={setGlobalDailyChartExpand}\n                                        expandIcon={expandIcon}\n                                        shrinkIcon={shrinkIcon}\n                                    />\n                                    : <CountryCharts\n                                        countriesYearlyData={countriesYearlyData}\n                                        classes={classes}\n                                        globalData={globalData}\n                                        option={option}\n                                        country={country}\n                                        arrowLeft={arrowLeft}\n                                        arrowRight={arrowRight}\n                                        globalDailyChartExpand={globalDailyChartExpand}\n                                        setGlobalDailyChartExpand={setGlobalDailyChartExpand}\n                                        expandIcon={expandIcon}\n                                        shrinkIcon={shrinkIcon}\n                                    />\n                            }\n                        </div>\n                        <div className={`${classes[7]}`}>\n                            <GlobalCharts\n                                classes={classes}\n                                country={country}\n                                option={option}\n                                globalData={globalData}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                globalChartExpand={globalChartExpand}\n                                setGlobalChartExpand={setGlobalChartExpand}\n                                expandIcon={expandIcon}\n                                shrinkIcon={shrinkIcon}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
[{"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/index.js":"1","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/App.js":"2","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/api/index.js":"3","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/Maps.js":"4","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/ActiveMap/ActiveMap.js":"5","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/IncidentRate/IncidentRate.js":"6","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/InfectedCard/InfectedCard.js":"7","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js":"8","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js":"9","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/CountryCharts.js":"10","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalCharts.js":"11","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalTodayCharts.js":"12","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/CountryPicker/CountryPicker.js":"13","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/InfoPanel/InfoPanel.js":"14","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/PopupNavBars/PopupNavBars.js":"15","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/MobileButtonToggler/MobileButtonToggler.js":"16","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/CumulativeMap/CumulativeMap.js":"17"},{"size":432,"mtime":1609278323533,"results":"18","hashOfConfig":"19"},{"size":34811,"mtime":1612671077451,"results":"20","hashOfConfig":"19"},{"size":6626,"mtime":1611265903987,"results":"21","hashOfConfig":"19"},{"size":6503,"mtime":1612565622469,"results":"22","hashOfConfig":"19"},{"size":3843,"mtime":1610078307056,"results":"23","hashOfConfig":"19"},{"size":2981,"mtime":1610056839820,"results":"24","hashOfConfig":"19"},{"size":11695,"mtime":1612669502959,"results":"25","hashOfConfig":"19"},{"size":12136,"mtime":1612670695834,"results":"26","hashOfConfig":"19"},{"size":10121,"mtime":1612671010661,"results":"27","hashOfConfig":"19"},{"size":12603,"mtime":1612560964458,"results":"28","hashOfConfig":"19"},{"size":7696,"mtime":1612498006173,"results":"29","hashOfConfig":"19"},{"size":10576,"mtime":1612498086546,"results":"30","hashOfConfig":"19"},{"size":2641,"mtime":1612564329639,"results":"31","hashOfConfig":"19"},{"size":8633,"mtime":1612495031528,"results":"32","hashOfConfig":"19"},{"size":4770,"mtime":1612582892645,"results":"33","hashOfConfig":"19"},{"size":15600,"mtime":1612671125528,"results":"34","hashOfConfig":"19"},{"size":2871,"mtime":1612565092672,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1lonzwq",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/index.js",[],["76","77"],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/App.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/api/index.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/Maps.js",["78"],"import React, { Fragment, useEffect, useState } from \"react\";\n\n//components\nimport CumulativeMap from \"./CumulativeMap/CumulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.scss\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon, isTablet, isMobile, isMap, setIsMap }) => {\n\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData[0]) {\n        return \"Loading...\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { cumulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    cumulativeStyle = isMap === \"cumulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={`map-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"\"}`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper${mapExpand ? \"-expand\" : isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"\"}`}>\n                <div style={cumulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"cumulative\")}>Cumulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n            <div\n                className={`map-container-tablet${isTablet || isMobile ? \"-hide\" : \"\" }`}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"cumulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"cumulative\"\n                        ? <CumulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={`button-toggler-wrapper-tablet${isTablet || isMobile ? \"-hide\" : \"\" }`}>\n                <div style={cumulativeStyle} className={`button-toggler`} onClick={() => setIsMap(\"cumulative\")}>Cumulative Cases</div>\n                <div style={activeStyle} className={`button-toggler`} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={`button-toggler`} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n        </Fragment>\n    )\n}\n\n\n\nexport default Maps;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/ActiveMap/ActiveMap.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/IncidentRate/IncidentRate.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/InfectedCard/InfectedCard.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/CountryCharts.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalCharts.js",["79","80"],"import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./GlobalCharts.scss\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon, isTablet, isMobile }) => {\n\n  const [isChart, setIsChart] = useState(\"infected\");\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  if (!globalData[0]) {\n    return \"Loading...\"\n  }\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { infectedStyle, deathsStyle, recoveredStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#474747\" };\n  const offStyle = { backgroundColor: \"#777\" }\n  infectedStyle = isChart === \"infected\" ?\n    onStyle :\n    offStyle\n  deathsStyle = isChart === \"deaths\" ?\n    onStyle :\n    offStyle\n  recoveredStyle = isChart === \"recovered\" ?\n    onStyle :\n    offStyle\n\n  return (\n    <Fragment>\n      <div\n        className={`global-chart-container${globalChartExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        {\n          isHover\n            ? !globalChartExpand\n              ? <div className={\"expand-icon\"} onClick={() => setGlobalChartExpand(true)}>{expandIcon}</div>\n              : <div className={\"shrink-icon\"} onClick={() => setGlobalChartExpand(false)}>{shrinkIcon}</div>\n            : null\n        }\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Infected/Deaths/Recovered\n            </p>\n          <div className={`chart`}>\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n          {\n            !globalChartExpand\n              ? <div className={\"arrow-toggler\"}>\n                <div className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</div>\n                <div className={\"toggler-text\"}>\n                  {\n                    isChart === \"infected\"\n                      ? \"Infected\"\n                      : isChart === \"deaths\"\n                        ? \"Deaths\"\n                        : isChart === \"recovered\"\n                          ? \"Recovered\"\n                          : null\n                  }\n                </div>\n                <div className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</div>\n              </div>\n              : null\n          }\n        </div>\n      </div>\n      {\n        globalChartExpand\n          ? <div className={`button-toggler-wrapper-expand`}>\n            <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n            <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n            <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n          </div>\n          : null\n      }\n\n      {/* tablet */}\n      <div\n        className={`global-chart-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\"}`}\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        <div className={`chart-wrapper`}>\n          <p className={`chart-header`} >\n            Gloabl Daily Infected/Deaths/Recovered\n            </p>\n          <div className={`chart`}>\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n        </div>\n      </div>\n      <div className={`button-toggler-wrapper${isTablet ? \"-tablet-version\" : isMobile ? \"-hide\" : \"-tablet\"}`}>\n        <div style={infectedStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"infected\")}>Infected</div>\n        <div style={deathsStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"deaths\")}>Deaths</div>\n        <div style={recoveredStyle} className={\"button-toggler\"} onClick={() => setIsChart(\"recovered\")}>Recovered</div>\n      </div>\n    </Fragment>\n  )\n};\n\nexport default GlobalCharts;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalTodayCharts.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/CountryPicker/CountryPicker.js",["81"],"import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchCountry } from \"../../api\";\n\nimport \"./CountryPicker.scss\";\n\n\nconst CountryPicker = ({ classes, toggleCountry, globalDailyChartExpand, isTablet, isMobile }) => {\n\n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    return (\n        <Fragment>\n            <div className={`country-picker-container${globalDailyChartExpand ? \"-expand\" : isTablet || isMobile ? \"-hide\" : \"\"}`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n\n            <div className={`country-picker-container${isTablet ? \"-tablet-version\" : isMobile ? \"-mobile-version\" : \"-tablet\" }`}>\n                <FormControl id=\"form\">\n                    <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n                    <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                        {\n                            isMobile\n                            ? <option className={\"option\"}>Select A Country</option>\n                            : <option value={\"select a country\"} className={\"option\"}>Global</option>\n                        }\n                        {\n                            modifiedData.map((country, i) =>\n                                <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                        }\n                    </NativeSelect>\n                </FormControl>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default CountryPicker;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/InfoPanel/InfoPanel.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/PopupNavBars/PopupNavBars.js",["82","83","84","85","86"],"import React, { useState, useEffect, Fragment } from \"react\";\n\n//scss\nimport \"./PopupNavBars.scss\"\n\n//Fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons';\n\nconst navBars = < FontAwesomeIcon icon={faBars} />\nconst dropdown = < FontAwesomeIcon icon={faSortDown} />\n\nconst PopupNavBars = ({ isTablet, setIsTablet, isMobile, setIsMobile, setIsMap, setGlobalChartExpand, setGlobalDailyChartExpand, setInfectedCardExpand, setDeathsCardExpand, setActiveCardExpand, setMapExpand, setDataPanelExpand }) => {\n\n    const [popup, setPopup] = useState(false);\n    const [popupDataSource, setPopupDataSource] = useState(false);\n\n    return (\n        <div id=\"popup-nav-container\">\n            <div id=\"nav-icon\" onClick={() => { setPopup(!popup) }}>\n                {navBars}\n            </div>\n            {\n                popup\n                    ? <div id=\"popup-container\">\n                        <div className={\"popup-item\"}\n                            onClick={() => {\n                                setPopupDataSource(!popupDataSource)\n                            }}>\n                            <div>Data Source</div>\n                            <div className={`dropdown-icon${popupDataSource ? \"-up\" : \"\"}`}>{dropdown}</div>\n                        </div>\n                        {\n                            popupDataSource\n                                ? <div id=\"dropdown-items\">\n                                    <div onClick={() => setPopup(!popup) } className={\"dropdown-item\"}>\n                                        <a href=\"https://about-corona.net/documentation\" target=\"_blank\">ABOUT-CORONA.NET</a>\n                                    </div>\n                                    <div onClick={() => setPopup(!popup) } className={\"dropdown-item\"}>\n                                        <a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\">Mathdroid Covid-19 REST API v1.0</a>\n                                    </div>\n                                </div>\n                                : null\n                        }\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsTablet(!isTablet)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"cumulative\"))\n                                setPopup(!popup)\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                            }}\n                        >\n                            {\n                                !isTablet\n                                ? \"Tablet Version\"\n                                : \"Desktop Version\"\n                            }\n                            \n                         </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => {\n                                setIsMobile(!isMobile)\n                                setPopup(!popup)\n                                setIsMap(\"\")\n                                setTimeout(() => setIsMap(\"cumulative\"))\n                                setGlobalChartExpand(false)\n                                setGlobalDailyChartExpand(false)\n                                setInfectedCardExpand(false)\n                                setDeathsCardExpand(false)\n                                setActiveCardExpand(false)\n                                setMapExpand(false)\n                                setDataPanelExpand(false)\n                            }}\n                        >\n                            {\n                                !isMobile\n                                ? \"Mobile Version\"\n                                : \"Desktop Version\"\n                            }\n                        </div>\n                        <div\n                            className={\"popup-item\"}\n                            onClick={() => { setPopup(!popup) }}\n                        >\n                            <a href=\"https://github.com/Shuto46490802\" target=\"_blank\">About</a>\n                        </div>\n                    </div>\n                    : null\n            }\n        </div >\n    )\n};\n\nexport default PopupNavBars;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/MobileButtonToggler/MobileButtonToggler.js",["87"],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/CumulativeMap/CumulativeMap.js",["88","89"],"import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces, mapExpand }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer  center={[23.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"98","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":16},{"ruleId":"94","severity":1,"message":"99","line":26,"column":9,"nodeType":"96","messageId":"97","endLine":26,"endColumn":15},{"ruleId":"94","severity":1,"message":"100","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":20},{"ruleId":"94","severity":1,"message":"95","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"101","line":1,"column":38,"nodeType":"96","messageId":"97","endLine":1,"endColumn":46},{"ruleId":"102","severity":1,"message":"103","line":38,"column":90,"nodeType":"104","endLine":38,"endColumn":105},{"ruleId":"102","severity":1,"message":"103","line":41,"column":93,"nodeType":"104","endLine":41,"endColumn":108},{"ruleId":"102","severity":1,"message":"103","line":95,"column":72,"nodeType":"104","endLine":95,"endColumn":87},{"ruleId":"94","severity":1,"message":"101","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"105","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"95","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'isLoad' is assigned a value but never used.","'loader' is assigned a value but never used.","'makeStyles' is defined but never used.","'Fragment' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]
[{"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/index.js":"1","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/App.js":"2","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Card.js":"3","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/CountryPicker.js":"4","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/api/index.js":"5","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/Maps.js":"6","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/CamulativeMap/CamulativeMap.js":"7","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/ActiveMap/ActiveMap.js":"8","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/IncidentRate/IncidentRate.js":"9","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/InfectedCard/InfectedCard.js":"10","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js":"11","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js":"12","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/CountryCharts.js":"13","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalCharts.js":"14","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalTodayCharts.js":"15","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/InfoPanel.js":"16"},{"size":432,"mtime":1609278323533,"results":"17","hashOfConfig":"18"},{"size":20834,"mtime":1611373659617,"results":"19","hashOfConfig":"18"},{"size":2284,"mtime":1609816977798,"results":"20","hashOfConfig":"18"},{"size":1595,"mtime":1611115185752,"results":"21","hashOfConfig":"18"},{"size":6626,"mtime":1611265903987,"results":"22","hashOfConfig":"18"},{"size":5481,"mtime":1611370242289,"results":"23","hashOfConfig":"18"},{"size":2871,"mtime":1611347129091,"results":"24","hashOfConfig":"18"},{"size":3843,"mtime":1610078307056,"results":"25","hashOfConfig":"18"},{"size":2981,"mtime":1610056839820,"results":"26","hashOfConfig":"18"},{"size":10150,"mtime":1611431121019,"results":"27","hashOfConfig":"18"},{"size":10196,"mtime":1611369876954,"results":"28","hashOfConfig":"18"},{"size":8807,"mtime":1611370010403,"results":"29","hashOfConfig":"18"},{"size":9844,"mtime":1611375267216,"results":"30","hashOfConfig":"18"},{"size":5297,"mtime":1611364449903,"results":"31","hashOfConfig":"18"},{"size":6889,"mtime":1611431097448,"results":"32","hashOfConfig":"18"},{"size":8362,"mtime":1611353264813,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1lonzwq",{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"36"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/index.js",[],["78","79"],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/App.js",["80","81","82","83"],"import React, { useState, useEffect } from \"react\";\n\n//Components \nimport CountryPicker from \"./Components/CountryPicker\";\nimport GlobalCharts from \"./Components/Charts/GlobalCharts\";\nimport CountryCharts from \"./Components/Charts/CountryCharts\";\nimport GlobalTodayCharts from \"./Components/Charts/GlobalTodayCharts\";\nimport Maps from \"./Components/Maps/Maps\";\nimport InfectedCard from \"./Components/Cards/InfectedCard/InfectedCard\";\nimport DeathsRecoveredCard from \"./Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard\";\nimport ActiveIncidentRateCard from \"./Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard\";\nimport InfoPanel from \"./Components/InfoPanel\"\n\nimport \"./css/App.scss\";\n\nimport { fetchProvinceData, fetchCountriesData, fetchGlobaldata, fetchCountriesYearlyData } from \"./api\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithubSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faTumblrSquare } from '@fortawesome/free-brands-svg-icons';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst github = < FontAwesomeIcon icon={faGithubSquare} />\nconst twitter = < FontAwesomeIcon icon={faTwitterSquare} />\nconst tumblr = < FontAwesomeIcon icon={faTumblrSquare} />\nconst arrowLeft = < FontAwesomeIcon icon={faCaretLeft} />\nconst arrowRight = < FontAwesomeIcon icon={faCaretRight} />\nconst expandIcon = < FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst shrinkIcon = < FontAwesomeIcon icon={faCompressArrowsAlt} />\n\nconst App = () => {\n\n    const [globalData, setGlobaldata] = useState({})\n    const [country, setCountry] = useState(\"select a country\");\n    const [countriesData, setCountriesData] = useState({});\n    const [provincesData, setProvincesData] = useState();\n    const [countriesYearlyData, setCountriesYearlyData] = useState({});\n\n    const [infectedCardExpand, setInfectedCardExpand] = useState(false);\n    const [deathsdCardExpand, setDeathsCardExpand] = useState(false);\n    const [activeCardExpand, setActiveCardExpand] = useState(false);\n    const [mapExpand, setMapExpand] = useState(false);\n    const [dataPanelExpand, setDataPanelExpand] = useState(false);\n    const [globalDailyChartExpand, setGlobalDailyChartExpand] = useState(false);\n    const [globalChartExpand, setGlobalChartExpand] = useState(false);\n    const [countryChartExpand, setCountryChartExpand] = useState(false);\n\n    const [isPanelHover, setIsPanelHover] = useState(false);\n    const [isTodayChartHover, setIsTodayChartHover] = useState(false);\n    const [isGlobalChartHover, setIsGlobalChartHover] = useState(false);\n\n    const [isLoad, setIsLoad] = useState(true)\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setProvincesData(await fetchProvinceData());\n            setCountriesData(await fetchCountriesData());\n            setGlobaldata(await fetchGlobaldata());\n        }\n        fetchAPI();\n    }, [setCountriesData]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 2000)\n    })\n\n    const loader = <Loader\n        type=\"Bars\"\n        color=\"#3500D3\"\n        height={100}\n        width={100}\n        timeout={2000}\n    />\n\n    if (isLoad || !globalData[0]) {\n        return (\n            <div className={\"loader-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    }\n\n    //country picker\n    const toggleCountry = async (country) => {\n        setCountry(country);\n        setCountriesYearlyData(await fetchCountriesYearlyData(country));\n    };\n\n    // separate number with separator\n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //format for chart d\n    const option = {\n        maintainAspectRatio: false,\n        legend: { display: false },\n        tooltips: {\n            xPadding: 15,\n            yPadding: 15,\n            yAlign: \"bottom\",\n            callbacks: {\n                title: (items, data) => data['labels'][items[0]['index']],\n                label: (item, data) => formatNumber(data['datasets'][0]['data'][item['index']])\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                },\n                ticks: {\n                    maxTicksLimit: 6,\n                    fontColor: \"#f5f5f5\",\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    maxTicksLimit: 8,\n                    callback: function numFormatter(num) {\n                        if (num > 999 && num < 1000000) {\n                            return (num / 1000).toFixed(1) + 'K';\n                        } else if (num >= 1000000) {\n                            return (num / 1000000).toFixed(1) + 'M';\n                        } else if (num < 900) {\n                            return num;\n                        }\n                    },\n                    fontColor: \"#f5f5f5\",\n                },\n                gridLines: {\n                    color: \"#f5f5f5\",\n                    zeroLineColor: \"#f5f5f5\"\n                }\n            }]\n        }\n    };\n\n    //toggle expand and hide\n    const classes =\n        infectedCardExpand\n            ? [\"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n            : deathsdCardExpand\n                ? [\"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                : activeCardExpand\n                    ? [\"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                    : mapExpand\n                        ? [\"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\", \"hide\"]\n                        : dataPanelExpand\n                            ? [\"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\", \"hide\"]\n                            : globalDailyChartExpand\n                                ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\", \"hide\"]\n                                : globalChartExpand\n                                    ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\", \"hide\"]\n                                    : countryChartExpand\n                                        ? [\"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"hide\", \"expand\"]\n                                        : [];\n\n    return (\n        <div id=\"app\">\n            <header>\n                <img src=\"https://www.tiabc.ca/wp-content/uploads/home/COVID%E2%80%9419.png\" alt=\"covid-19 logo\" />\n                <div id=\"header-title\">\n                    <h1>World COVID-19 Dashboard</h1>\n                    <span id=\"header-border\"></span>\n                    <div id=\"header-footer\">\n                        <span>Desinged and Coded</span>\n                        <span>by Shuto.S</span>\n                    </div>\n                </div>\n                <div id=\"nav\">\n                    <div>\n                        <a src=\"https://github.com/Shuto46490802\" target=\"_blank\">{github}</a>\n                    </div>\n                    <div>\n                        <a src=\"https://twitter.com/\" target=\"_blank\" >{twitter}</a>\n                    </div>\n                    <div>\n                        <a src=\"https://www.tumblr.com/\" target=\"_blank\" >{tumblr}</a>\n                    </div>\n                </div>\n            </header>\n            <main id=\"laptop\">\n                <div className={\"row\"}>\n                    <div\n                        id={\"infected-card\"}\n                        className={classes[0]}\n                        style={infectedCardExpand ? { width: \"100%\", height: \"93vh\" } : {}}\n                    >\n                        <InfectedCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            provincesData={provincesData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            infectedCardExpand={infectedCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            setInfectedCardExpand={setInfectedCardExpand}\n                            formatNumber={formatNumber}\n                        />\n                    </div>\n                    <div\n                        id=\"map\"\n                        className={classes[3]}\n                        style={mapExpand ? { width: \"98%\", height: \"89vh\" } : { width: \"770px\",  }}\n                    >\n                        <Maps\n                            classes={classes}\n                            provincesData={provincesData}\n                            setMapExpand={setMapExpand}\n                            mapExpand={mapExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                    <div\n                        className={`deaths-active-card ${classes[1]}`}\n                        style={deathsdCardExpand ? { width: \"100%\", height: \"93vh\" } : {}}\n                    >\n                        <DeathsRecoveredCard\n                            countriesData={countriesData}\n                            globalData={globalData}\n                            classes={classes}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            deathsdCardExpand={deathsdCardExpand}\n                            setDeathsCardExpand={setDeathsCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                        />\n                    </div>\n                    <div\n                        className={`deaths-active-card ${classes[2]}`}\n                        style={activeCardExpand ? { width: \"100%\", height: \"93vh\" } : {}}\n                    >\n                        <ActiveIncidentRateCard\n                            provincesData={provincesData}\n                            classes={classes}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            activeCardExpand={activeCardExpand}\n                            setActiveCardExpand={setActiveCardExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                            formatNumber={formatNumber}\n                        />\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <div\n                        id=\"info-panel\"\n                        className={classes[4]}\n                        onMouseEnter={() => setIsPanelHover(true)}\n                        onMouseLeave={() => setIsPanelHover(false)}\n                        style={dataPanelExpand ? { width: \"95%\", height: \"91vh\" } : {}}\n                    >\n                        {\n                            isPanelHover\n                                ? !dataPanelExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setDataPanelExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setDataPanelExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <InfoPanel\n                            globalData={globalData}\n                            countriesData={countriesData}\n                            provincesData={provincesData}\n                            formatNumber={formatNumber}\n                            classes={classes}\n                            dataPanelExpand={dataPanelExpand}\n                        />\n                    </div>\n                    <div\n                        id=\"country-picker-chart\"\n                        className={classes[5]}\n                        onMouseEnter={() => setIsTodayChartHover(true)}\n                        onMouseLeave={() => setIsTodayChartHover(false)}\n                        style={globalDailyChartExpand ? { width: \"95%\", height: \"89vh\", top: \"30px\" } : {}}\n                    >\n                        {\n                            isTodayChartHover\n                                ? !globalDailyChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalDailyChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalDailyChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <CountryPicker\n                            classes={classes}\n                            toggleCountry={toggleCountry}\n                        />\n                        {\n                            country === \"select a country\"\n                                ? <GlobalTodayCharts\n                                    globalData={globalData}\n                                    arrowRight={arrowRight}\n                                    arrowLeft={arrowLeft}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                />\n                                : <CountryCharts\n                                    countriesYearlyData={countriesYearlyData}\n                                    arrowLeft={arrowLeft}\n                                    arrowRight={arrowRight}\n                                    option={option}\n                                    classes={classes}\n                                    globalDailyChartExpand={globalDailyChartExpand}\n                                />\n                        }\n                    </div>\n                    <div\n                        id=\"global-chart\"\n                        className={classes[6]}\n                        onMouseEnter={() => setIsGlobalChartHover(true)}\n                        onMouseLeave={() => setIsGlobalChartHover(false)}\n                        style={globalChartExpand ? { width: \"95%\", height: \"89vh\", top: \"30px\" } : {}}\n                    >\n                        {\n                            isGlobalChartHover\n                                ? !globalChartExpand\n                                    ? <div className={\"expand-icon\"} onClick={() => setGlobalChartExpand(true)}>{expandIcon}</div>\n                                    : <div className={\"shrink-icon\"} onClick={() => setGlobalChartExpand(false)}>{shrinkIcon}</div>\n                                : null\n                        }\n                        <GlobalCharts\n                            globalData={globalData}\n                            arrowLeft={arrowLeft}\n                            arrowRight={arrowRight}\n                            option={option}\n                            classes={classes}\n                            globalChartExpand={globalChartExpand}\n                            setGlobalChartExpand={setGlobalChartExpand}\n                            expandIcon={expandIcon}\n                            shrinkIcon={shrinkIcon}\n                        />\n                    </div>\n                </div>\n            </main>\n\n            <main id=\"mobile\">\n                <div id=\"map-mobile\">\n                    <Maps\n                        classes={classes}\n                        provincesData={provincesData}\n                        setMapExpand={setMapExpand}\n                        mapExpand={mapExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                    />\n                </div>\n                <div id={\"infected-card-mobile\"}>\n                    <InfectedCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        provincesData={provincesData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        infectedCardExpand={infectedCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        setInfectedCardExpand={setInfectedCardExpand}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n                <div className={\"deaths-active-card-mobile\"}>\n                    <DeathsRecoveredCard\n                        countriesData={countriesData}\n                        globalData={globalData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        deathsdCardExpand={deathsdCardExpand}\n                        setDeathsCardExpand={setDeathsCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n                <div className={\"deaths-active-card-mobile\"}>\n                    <ActiveIncidentRateCard\n                        provincesData={provincesData}\n                        classes={classes}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        activeCardExpand={activeCardExpand}\n                        setActiveCardExpand={setActiveCardExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n                <div id=\"country-picker-chart-mobile\">\n                    <CountryPicker\n                        classes={classes}\n                        toggleCountry={toggleCountry}\n                    />\n                    {\n                        country === \"select a country\"\n                            ? <GlobalTodayCharts\n                                globalData={globalData}\n                                arrowRight={arrowRight}\n                                arrowLeft={arrowLeft}\n                                option={option}\n                                classes={classes}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                            />\n                            : <CountryCharts\n                                countriesYearlyData={countriesYearlyData}\n                                arrowLeft={arrowLeft}\n                                arrowRight={arrowRight}\n                                option={option}\n                                classes={classes}\n                                globalDailyChartExpand={globalDailyChartExpand}\n                            />\n                    }\n                </div>\n                <div id=\"global-chart-mobile\">\n                    <GlobalCharts\n                        globalData={globalData}\n                        arrowLeft={arrowLeft}\n                        arrowRight={arrowRight}\n                        option={option}\n                        classes={classes}\n                        globalChartExpand={globalChartExpand}\n                        setGlobalChartExpand={setGlobalChartExpand}\n                        expandIcon={expandIcon}\n                        shrinkIcon={shrinkIcon}\n                    />\n                </div>\n                <div id=\"info-panel-mobile\">\n                    <InfoPanel\n                        globalData={globalData}\n                        countriesData={countriesData}\n                        provincesData={provincesData}\n                        formatNumber={formatNumber}\n                    />\n                </div>\n            </main>\n        </div>\n    )\n};\n\nexport default App;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Card.js",[],["84","85"],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/CountryPicker.js",["86"],"import React, { useState, useEffect } from \"react\";\n\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchCountry } from \"../api\";\n\nimport \"../css/CountryPicker.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(.5),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        //   marginTop: theme.spacing(2),\n    }\n}));\n\nconst CountryPicker = ({ classes, toggleCountry }) => {\n\n    const [countries, setCountries] = useState([]);\n    const classStyle = useStyles();\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setCountries(await fetchCountry());\n        }\n        fetchAPI();\n\n    }, [setCountries]);\n\n    const modifiedData = countries\n        .map((data) => data)\n        .filter(({ data }) => data.confirmed > 0)\n        .sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    return (\n        <FormControl className=\"form\"  id=\"form\">\n            <InputLabel shrink id=\"label\">Select a Country</InputLabel>\n            <NativeSelect id=\"select\" onChange={(e) => { toggleCountry(e.target.value) }} className={classes.selectEmpty}>\n                <option value={\"select a country\"} className={\"option\"}>Global</option>\n                {\n                    modifiedData.map((country, i) =>\n                        <option key={i} value={country.code} className={\"option\"} > {country.name} </option>)\n                }\n            </NativeSelect>\n        </FormControl>\n    )\n};\n\nexport default CountryPicker;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/api/index.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/Maps.js",["87"],"import React, { Fragment, useEffect, useState } from \"react\";\n\n//components\nimport CamulativeMap from \"./CamulativeMap/CamulativeMap\";\nimport ActiveMap from \"./ActiveMap/ActiveMap\";\nimport IncidentRate from \"./IncidentRate/IncidentRate\";\n\nimport \"./Maps.scss\";\n\nconst Maps = ({ classes, provincesData, setMapExpand, mapExpand, expandIcon, shrinkIcon }) => {\n\n    const [isMap, setIsMap] = useState(\"calmulative\");\n    const [isHover, setIsHover] = useState(false);\n\n    //check if data has been asinged to countries\n    if (!provincesData) {\n        return \"Loading...\"\n    };\n\n    //data from country without province\n    const noProvince = provincesData\n        .filter((data) => data.length === 1)\n        .map((data) => data[0])\n        .filter((data) => data)\n        .filter(({ lat, confirmed }) => lat !== null && confirmed > 50000);\n\n    //data from countries with provinces\n    const provinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country !== \"US\" && confirmed > 10000));\n    //data from US    \n    const usProvinces = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .filter(({ lat, confirmed, country }) => lat !== null && country === \"US\" && confirmed > 50000));\n\n    //format number with separator \n    const formatNumber = inputNumber => {\n        let formetedNumber = (Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n        let splitArray = formetedNumber.split('.');\n        if (splitArray.length > 1) {\n            formetedNumber = splitArray[0];\n        }\n        return (formetedNumber);\n    };\n\n    //toggle map togglers border bottom\n    let { calmulativeStyle, activeStyle, incidentRateStyle } = {};\n    const onStyle = { borderBottom: \"3px solid #d9e4f4\", backgroundColor: \"#295897\" };\n    calmulativeStyle = isMap === \"calmulative\" ?\n        onStyle :\n        {}\n    activeStyle = isMap === \"active\" ?\n        onStyle :\n        {}\n    incidentRateStyle = isMap === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                id=\"map-container\"\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n            >\n                {\n                    isHover\n                        ? !mapExpand\n                            ? <div className={\"expand-icon\"}\n                                onClick={() => {\n                                    setMapExpand(true)\n                                    setIsMap(\"\")\n                                    setTimeout(() => { setIsMap(\"calmulative\") })\n                                }}>\n                                {expandIcon}\n                            </div>\n                            : <div className={\"shrink-icon\"} onClick={() => setMapExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                {\n                    isMap === \"calmulative\"\n                        ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n            <div className={\"button-toggler-wrapper\"}>\n                <div style={calmulativeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"calmulative\")}>Calmulative Cases</div>\n                <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n\n\n            <div id=\"map-container-mobile\">\n                {\n                    isMap === \"calmulative\"\n                        ? <CamulativeMap mapExpand={mapExpand} classes={classes} noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                        : isMap === \"active\"\n                            ? <ActiveMap noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                            : isMap === \"incidentRate\"\n                                ? <IncidentRate noProvince={noProvince} provinces={provinces} usProvinces={usProvinces} formatNumber={formatNumber} />\n                                : null\n                }\n\n            </div>\n\n            <div className={\"button-toggler-wrapper-mobile\"}>\n                <div style={calmulativeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"calmulative\")}>Calmulative Cases</div>\n                <div style={activeStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"active\")}>Active Cases</div>\n                <div style={incidentRateStyle} className={\"button-toggler\"} onClick={() => setIsMap(\"incidentRate\")}>Incident Rate</div>\n            </div>\n        </Fragment>\n    )\n}\n\n\n\nexport default Maps;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/CamulativeMap/CamulativeMap.js",["88","89"],"import React, { useState, useEffect } from \"react\";\n\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n\nimport L from \"leaflet\";\n\nconst CamulativeMap = ({ noProvince, formatNumber, usProvinces, provinces, mapExpand }) => {\n\n  const toggleIconSize = (confirmed) => {\n    let iconSize = [];\n\n    if (confirmed > 700000) {\n      iconSize = [20, 20]\n    } else if (confirmed > 500000) {\n      iconSize = [15, 15]\n    } else if (confirmed > 300000) {\n      iconSize = [10, 10]\n    } else {\n      iconSize = [5, 5]\n    }\n    return new L.Icon({\n      iconUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Red_Circle%28small%29.svg/1024px-Red_Circle%28small%29.svg.png\",\n      iconSize: iconSize\n    });\n  };\n\n  return (\n    <MapContainer  center={[23.45835, 10.07813]} zoom={1} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        noProvince.map((data, i) =>\n          <Marker\n            key={i}\n            position={[data.lat, data.long]}\n            icon={toggleIconSize(data.confirmed)}\n          >\n            <Popup>\n              <h3>{data.key}</h3>\n              <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n              <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n              <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n            </Popup>\n          </Marker>\n        )\n      }\n      {\n        provinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n      {\n        usProvinces.map((data) =>\n          data.map((data, i) =>\n            <Marker\n              key={i}\n              position={[data.lat, data.long]}\n              icon={toggleIconSize(data.confirmed)}\n            >\n              <Popup position={[data.lat, data.long]}>\n                <h3>{data.key}</h3>\n                <p>Cases: <strong>{formatNumber(data.confirmed)}</strong></p>\n                <p>Recovered: <strong>{formatNumber(data.recovered)}</strong></p>\n                <p>Deaths: <strong>{formatNumber(data.deaths)}</strong></p>\n              </Popup>\n            </Marker>\n          )\n        )\n      }\n    </MapContainer>\n  )\n};\n\n\n\nexport default CamulativeMap;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/ActiveMap/ActiveMap.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Maps/IncidentRate/IncidentRate.js",[],"/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/InfectedCard/InfectedCard.js",["90","91","92"],"import React, { Fragment, useState } from \"react\";\n\nimport \"./InfectedCard.scss\";\n\nconst InfectedCard = ({ countriesData, globalData, provincesData, arrowLeft, arrowRight, infectedCardExpand, expandIcon, shrinkIcon, setInfectedCardExpand, formatNumber }) => {\n\n    const [isCard, setIsCard] = useState(\"admin0\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading...\"\n    }\n\n    //modify global datas\n    const modifiedGlobalCasesData = countriesData\n        .map(({ country, latestData }) => [country, latestData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    //modify provinces data\n    const modifiedProvincesData = provincesData\n        .filter((data) => data.length > 1)\n        .map((data) => data\n            .map(({ confirmed, key }) => [confirmed, key])\n            .filter((data) => data[0] > 30000))\n        .filter((data) => data.length > 0)\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    //modify today's data \n    const modifiedTodayData = countriesData\n        .map(({ country, todayData }) => [country, todayData])\n        .sort((a, b) => b[1].confirmed - a[1].confirmed);\n\n    const toggleAdminInfectedRight = () => {\n        if (isCard === \"admin0\") {\n            setIsCard(\"admin2\")\n        } else if (isCard === \"admin2\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"admin0\")\n        }\n    };\n    const toggleAdminInfectedLeft = () => {\n        if (isCard === \"admin0\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"admin2\")\n        } else if (isCard === \"admin2\") {\n            setIsCard(\"admin0\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = isCard === \"admin0\"\n        ? onStyle\n        : {}\n    admin2Style = isCard === \"admin2\"\n        ? onStyle\n        : {}\n    todayStyle = isCard === \"today\"\n        ? onStyle\n        : {}\n\n    return (\n        <Fragment>\n            <div\n                className={\"infected-card-container\"}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={infectedCardExpand ? { width: \"95%\", height: \"93%\" } : { }}\n            >\n                {\n                    isHover\n                        ? !infectedCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setInfectedCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setInfectedCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? \"Global Cases\"\n                                : \"Global Today's Cases\"\n                        }\n                    </span>\n                    <h1 className={\"card-header-num infected-num\"} >\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? formatNumber(globalData[0].confirmed)\n                                : formatNumber(globalData[0].newConfirmed)\n                        }\n                    </h1>\n                </div>\n                {\n                    isCard === \"admin0\" || isCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <span>Cases by Country</span>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <span>Cases by</span>\n                            <span>Province/State/Dpendency</span>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <span className={\"list-num infected-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                        <span className={\"province-list-place\"}>{data[1]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            <div className={\"arrow-toggler\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleAdminInfectedLeft()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? \"Admin0\"\n                            : isCard === \"admin2\"\n                                ? \"Admin2\"\n                                : isCard === \"today\"\n                                    ? \"Global Today's Cases\"\n                                    : null\n                    }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleAdminInfectedRight()}>{arrowRight}</span>\n            </div>\n\n\n            <div\n                className={\"infected-card-container-mobile\"}>\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? \"Global Cases\"\n                                : \"Global Today's Cases\"\n                        }\n                    </span>\n                    <h1 className={\"card-header-num infected-num\"} >\n                        {\n                            isCard === \"admin0\" || isCard === \"admin2\"\n                                ? formatNumber(globalData[0].confirmed)\n                                : formatNumber(globalData[0].newConfirmed)\n                        }\n                    </h1>\n                </div>\n                {\n                    isCard === \"admin0\" || isCard === \"today\"\n                        ? <div className={\"country-card-note\"} >\n                            <span>Cases by Country</span>\n                        </div>\n                        : <div className={\"province-card-note\"} >\n                            <span>Cases by</span>\n                            <span>Province/State/Dpendency</span>\n                        </div>\n                }\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? modifiedGlobalCasesData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"admin2\"\n                                ? modifiedProvincesData.map((data, i) =>\n                                    <div className={\"province-list\"} key={i}>\n                                        <span className={\"list-num infected-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                        <span className={\"province-list-place\"}>{data[1]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num infected-num\"} >{formatNumber(data[1].confirmed)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            <div className={\"arrow-toggler-mobile\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleAdminInfectedLeft()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                    {\n                        isCard === \"admin0\"\n                            ? \"Admin0\"\n                            : isCard === \"admin2\"\n                                ? \"Admin2\"\n                                : isCard === \"today\"\n                                    ? \"Global Today's Cases\"\n                                    : null\n                    }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleAdminInfectedRight()}>{arrowRight}</span>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default InfectedCard;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/DeathsRecoveredCard/DeathsRecoveredCard.js",["93","94","95"],"import React, { useState, Fragment } from \"react\";\nimport \"./DeathsRecoveredCard.scss\"\n\nconst DeathsRecoveredCard = ({ countriesData, globalData, classes, arrowLeft, arrowRight, deathsdCardExpand, setDeathsCardExpand, expandIcon, shrinkIcon, formatNumber }) => {\n\n    const [isCard, setIsCard] = useState(\"deaths\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!countriesData[0] || !globalData[0]) {\n        return \"Loading ...\"\n    }\n\n    //modify deaths datas\n    const modifiedGlobalDeathsData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].deaths - a[1].deaths);\n\n    //modify recovered datas\n    const modifiedGlobalRecoveredData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[1].recovered - a[1].recovered);\n\n    //modify today's deaths data \n    const modifiedTodayData = countriesData\n        .map(({ country, latestData, todayData }) => [country, latestData, todayData])\n        .sort((a, b) => b[2].deaths - a[2].deaths);\n\n    //toggle cards\n    const toggleDeathsRecoveredRight = () => {\n        if (isCard === \"deaths\") {\n            setIsCard(\"recovered\")\n        } else if (isCard === \"recovered\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"deaths\")\n        }\n    };\n    const toggleDeathsRecoveredLeft = () => {\n        if (isCard === \"deaths\") {\n            setIsCard(\"today\")\n        } else if (isCard === \"today\") {\n            setIsCard(\"recovered\")\n        } else if (isCard === \"recovered\") {\n            setIsCard(\"deaths\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = isCard === \"deaths\" ?\n        onStyle :\n        {}\n    admin2Style = isCard === \"recovered\" ?\n        onStyle :\n        {}\n    todayStyle = isCard === \"today\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={\"deaths-card-container\"}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={deathsdCardExpand ? { width: \"95%\", height: \"93%\" } : { }}\n            >\n                {\n                    isHover\n                        ? !deathsdCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setDeathsCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setDeathsCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"deaths\"\n                                ? \"Global Deaths\"\n                                : isCard === \"recovered\"\n                                    ? \"Global Recovered\"\n                                    : isCard === \"today\"\n                                        ? \"Global Todays's Deaths\"\n                                        : null\n                        }\n                    </span>\n\n                    {\n                        isCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <span className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</span>\n                                        <span>{data[0]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            <div className={\"arrow-toggler\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredLeft()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? \"Deaths\"\n                            : isCard === \"recovered\"\n                                ? \"Recovered\"\n                                : isCard === \"today\"\n                                    ? \"Global Today's Deaths\"\n                                    : null\n                    }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredRight()}>{arrowRight}</span>\n            </div>\n\n\n            <div className={\"deaths-card-container-mobile\"}>\n                <div className={\"card-header\"} >\n                    <span className={\"card-header-text\"}>\n                        {\n                            isCard === \"deaths\"\n                                ? \"Global Deaths\"\n                                : isCard === \"recovered\"\n                                    ? \"Global Recovered\"\n                                    : isCard === \"today\"\n                                        ? \"Global Todays's Deaths\"\n                                        : null\n                        }\n                    </span>\n\n                    {\n                        isCard === \"deaths\"\n                            ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].deaths)}</h1>\n                            : isCard === \"recovered\"\n                                ? <h1 className={\"card-header-num recovered-num\"} >{formatNumber(globalData[0].recovered)}</h1>\n                                : isCard === \"today\"\n                                    ? <h1 className={\"card-header-num deaths-num\"} >{formatNumber(globalData[0].newDeaths)}</h1>\n                                    : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? modifiedGlobalDeathsData.map((data, i) =>\n                                <div className={\"country-list\"} key={i}>\n                                    <span className={\"list-num deaths-num\"} >{formatNumber(data[1].deaths)}</span>\n                                    <span>{data[0]}</span>\n                                </div>\n                            )\n                            : isCard === \"recovered\"\n                                ? modifiedGlobalRecoveredData.map((data, i) =>\n                                    <div className={\"country-list\"} key={i}>\n                                        <span className={\"list-num recovered-num\"} >{formatNumber(data[1].recovered)}</span>\n                                        <span>{data[0]}</span>\n                                    </div>\n                                )\n                                : isCard === \"today\"\n                                    ? modifiedTodayData.map((data, i) =>\n                                        <div className={\"country-list\"} key={i}>\n                                            <span className={\"list-num deaths-num\"} >{formatNumber(data[2].deaths)}</span>\n                                            <span>{data[0]}</span>\n                                        </div>\n                                    )\n                                    : null\n                    }\n                </div>\n            </div>\n            <div className={\"arrow-toggler-mobile\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredLeft()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                    {\n                        isCard === \"deaths\"\n                            ? \"Deaths\"\n                            : isCard === \"recovered\"\n                                ? \"Recovered\"\n                                : isCard === \"today\"\n                                    ? \"Global Today's Deaths\"\n                                    : null\n                    }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredRight()}>{arrowRight}</span>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default DeathsRecoveredCard;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Cards/ActiveIncidentRateCard/ActiveIncidentRateCard.js",["96","97"],"import React, { useState, Fragment } from \"react\";\nimport \"./ActiveIncidentRateCard.scss\";\n\nconst ActiveIncidentRateCard = ({ provincesData, classes, arrowLeft, arrowRight, activeCardExpand, setActiveCardExpand, expandIcon, shrinkIcon, formatNumber }) => {\n\n    const [isCard, setIscard] = useState(\"active\");\n    const [isHover, setIsHover] = useState(false);\n\n    if (!provincesData) {\n        return \"Loading...\"\n    };\n\n    const modifiedActiveData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active, key }) => [active, key])\n            .filter((data) => data[0] > 30000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const activeDataSum = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b);\n\n    const modifiedIncidentRateData = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ incidentRate, key }) => [incidentRate, key])\n            .filter((data) => data[0] > 12000)\n        )\n        .flat()\n        .sort((a, b) => b[0] - a[0]);\n\n    const numberOfProvinces = provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat().length;\n\n    const incidentRateAvarage = Math.floor((provincesData\n        .filter((data) => data.length > 0)\n        .map((data) => data\n            .map(({ active }) => active))\n        .flat()\n        .reduce((a, b) => a + b)) / numberOfProvinces);\n\n    const toggleActiveIncidentRateCard = () => {\n        if (isCard === \"active\") {\n            setIscard(\"incidentRate\")\n        } else {\n            setIscard(\"active\")\n        }\n    }\n\n    let { admin0Style, admin2Style } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = isCard === \"active\" ?\n        onStyle :\n        {}\n    admin2Style = isCard === \"incidentRate\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div\n                className={\"active-card-container\"}\n                onMouseEnter={() => setIsHover(true)}\n                onMouseLeave={() => setIsHover(false)}\n                style={activeCardExpand ? { width: \"95%\", height: \"93%\" } : { }}\n            >\n                {\n                    isHover\n                        ? !activeCardExpand\n                            ? <div className={\"expand-icon\"} onClick={() => setActiveCardExpand(true)}>{expandIcon}</div>\n                            : <div className={\"shrink-icon\"} onClick={() => setActiveCardExpand(false)}>{shrinkIcon}</div>\n                        : null\n                }\n                <div className={\"card-header\"} style={isCard === \"incidentRate\" ? { padding: \"0.85em 0 0 0\" } : {}} >\n                    {\n                        isCard === \"active\"\n                            ? <span className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                    </span>\n                            : isCard === \"incidentRate\"\n                                ? <span className={\"card-header-text\"}>Global Incident Rate<span id=\"percentage\">(per 100,000 people)</span></span>\n                                : null\n                    }\n\n\n                    {\n                        isCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num active-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                    }\n                </div>\n            </div>\n            <div className={\"arrow-toggler\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                    {\n                        isCard === \"active\"\n                            ? \"Active Cases\"\n                            : isCard === \"incidentRate\"\n                                ? \"Incident Rate\"\n                                : null\n                    }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowRight}</span>\n            </div>\n\n            <div className={\"active-card-container-mobile\"}>\n                <div className={\"card-header\"} style={isCard === \"incidentRate\" ? { padding: \"0.85em 0 0 0\" } : {}} >\n                    {\n                        isCard === \"active\"\n                            ? <span className={\"card-header-text\"}>\n                                Gloabl Active Cases\n                                    </span>\n                            : isCard === \"incidentRate\"\n                                ? <span className={\"card-header-text\"}>Global Incident Rate<span id=\"percentage\">(per 100,000 people)</span></span>\n                                : null\n                    }\n\n\n                    {\n                        isCard === \"active\"\n                            ? <h1 className={\"card-header-num active-num\"} >{formatNumber(activeDataSum)}</h1>\n                            : isCard === \"incidentRate\"\n                                ? <h1 className={\"card-header-num incidentRate-num\"} >{formatNumber(incidentRateAvarage)}</h1>\n                                : null\n                    }\n\n                </div>\n                <div className={\"country-card-note\"} >\n                    <span>Cases by Country</span>\n                </div>\n                <div className={\"ul\"}>\n                    {\n                        isCard === \"active\"\n                            ? modifiedActiveData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num active-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                            : modifiedIncidentRateData.map((data, i) =>\n                                <div className={\"province-list\"} key={i}>\n                                    <span className={\"list-num incidentRate-num\"} >{formatNumber(data[0])} <span className={\"province-list-cases\"}>Cases</span></span>\n                                    <span className={\"province-list-place\"}>{data[1]}</span>\n                                </div>\n                            )\n                    }\n                </div>\n            </div>\n            <div className={\"arrow-toggler-mobile\"}>\n                <span className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowLeft}</span>\n                <span className={\"card-toggler-text\"}>\n                    {\n                        isCard === \"active\"\n                            ? \"Active Cases\"\n                            : isCard === \"incidentRate\"\n                                ? \"Incident Rate\"\n                                : null\n                    }\n                </span>\n                <span className={\"arrow-icon\"} onClick={() => toggleActiveIncidentRateCard()}>{arrowRight}</span>\n            </div>\n        </Fragment>\n    )\n}\nexport default ActiveIncidentRateCard;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/CountryCharts.js",["98","99","100"],"import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar, Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.scss\"\n\nconst CountryCharts = ({ countriesYearlyData: { latest_data, timeline }, arrowLeft, arrowRight, option, classes, globalDailyChartExpand }) => {\n\n    const [isChart, setIsChart] = useState(\"infected\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    if (!latest_data) {\n        return \"Loadning\"\n    }\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad || !timeline || !latest_data) {\n        return (\n            <div className={\"loader-country-chart-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedTimeLine = timeline.map((data) => data).reverse();\n    //infected chart\n    const infectedLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ confirmed }) => confirmed),\n                            label: \"Infected\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(222, 53, 76, 1)\",\n                            backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(222, 53, 76, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n                            pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ deaths }) => deaths),\n                            label: \"Deaths\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(92, 95, 88, 1)\",\n                            backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(92, 95, 88, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n                            pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredLineChart = (\n        latest_data.length !== 0\n            ? <Line\n                data={{\n                    labels: modifiedTimeLine.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: modifiedTimeLine.map(({ recovered }) => recovered),\n                            label: \"Recovered\",\n                            fill: true,\n                            lineTension: 0.4,\n                            borderColor: \"rgba(0, 255, 0, 1)\",\n                            backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n                            pointRadius: 1,\n                            pointBorderColor: \"rgba(0, 255, 0, 1)\",\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n                            pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n                        }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const barChart = (\n        latest_data.length !== 0\n            ? <Bar\n                data={{\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                    datasets: [{\n                        data: [latest_data.confirmed, latest_data.recovered, latest_data.deaths],\n                        backgroundColor: [\"rgba(222, 53, 76, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(92, 95, 88, 0.5)\"]\n                    }]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: { display: false },\n                    title: { display: false },\n                    scales: {\n                        xAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                maxTicksLimit: 12,\n                                fontColor: \"white\"\n                            }\n                        }],\n                        yAxes: [{\n                            gridLines: {\n                                color: \"white\",\n                                zeroLineColor: \"white\"\n                            },\n                            ticks: {\n                                fontColor: \"white\",\n                                maxTicksLimit: 8,\n                                callback: function numFormatter(num) {\n                                    if (num > 999 && num < 1000000) {\n                                        return (num / 1000).toFixed(1) + 'K';\n                                    } else if (num >= 1000000) {\n                                        return (num / 1000000).toFixed(1) + 'M';\n                                    } else if (num < 900) {\n                                        return num;\n                                    }\n\n                                }\n                            }\n                        }\n                        ]\n                    }\n                }}\n            />\n            : null\n    );\n\n    const toggleToRight = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"infected\")\n        }\n    };\n    const toggleToLeft = () => {\n        if (isChart === \"infected\") {\n            setIsChart(\"recovered\")\n        } else if (isChart === \"recovered\") {\n            setIsChart(\"deaths\")\n        } else if (isChart === \"deaths\") {\n            setIsChart(\"infected\")\n        }\n    };\n\n    //toggle map togglers border bottom\n    let { admin0Style, admin2Style, todayStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    admin0Style = isChart === \"infected\" ?\n        onStyle :\n        {}\n    admin2Style = isChart === \"deaths\" ?\n        onStyle :\n        {}\n    todayStyle = isChart === \"recoverd\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div className={\"chart-container\"}>\n                <div className={\"chart-wrapper\"}>\n                    <p className={\"chart-header\"}>Daily Infected/Deaths/Recovered by Country</p>\n                    <div\n                        className={\"chart\"}\n                        style={globalDailyChartExpand ? { height: \"70vh\" } : {}}\n                    >\n                        {\n                            isChart === \"infected\"\n                                ? infectedLineChart\n                                : isChart === \"deaths\"\n                                    ? deathsLineChart\n                                    : isChart === \"recovered\"\n                                        ? recoveredLineChart\n                                        : null\n                        }\n                    </div>\n                    <div className={\"arrow-toggler\"}>\n                        <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n                        <span className={\"card-toggler-text\"}>\n                            {\n                                isChart === \"infected\"\n                                    ? \"Infected\"\n                                    : isChart === \"deaths\"\n                                        ? \"Deaths\"\n                                        : isChart === \"recovered\"\n                                            ? \"Recovered\"\n                                            : null\n                            }\n                        </span>\n                        <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n                    </div>\n                </div>\n                <div\n                    className={\"border\"}\n                    style={globalDailyChartExpand ? { height: \"75vh\" } : {}}\n                />\n                <div className={\"chart-wrapper bar-chart-wrapper\"}>\n                    <p className={\"chart-header\"}>Latest Infected/Deaths/Recovered by Country</p>\n                    <div\n                        className={\"chart \"}\n                        style={globalDailyChartExpand ? { height: \"70vh\" } : {}}\n                    >\n                        {barChart}\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CountryCharts","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalCharts.js",["101","102","103","104","105","106","107"],"import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Line } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.scss\"\n\n\nconst GlobalCharts = ({ globalData, arrowLeft, arrowRight, option, classes, globalChartExpand, setGlobalChartExpand, expandIcon, shrinkIcon }) => {\n\n  const [isChart, setIsChart] = useState(\"infected\");\n  const [isHover, setIsHover] = useState(false);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoad(false)\n    }, 1000)\n  })\n\n  if (!globalData[0]) {\n    return \"Loading...\"\n  }\n\n  const loader = <Loader\n    type=\"Oval\"\n    color=\"#3500D3\"\n    height={50}\n    width={50}\n    timeout={1000}\n  />\n\n  const modifiedData = globalData\n    .filter(({ date }) => date !== \"2020-08-17\")\n    .reverse();\n\n  const infectedLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ confirmed }) => confirmed),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(222, 53, 76, 1)\",\n              backgroundColor: \"rgba(222, 53, 76, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(222, 53, 76, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(222, 53, 76, 1)\",\n              pointHoverBorderColor: \"rgba(222, 53, 76, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const deathsLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ deaths }) => deaths),\n              fill: true,\n              lineTension: 0.1,\n              borderColor: \"rgba(92, 95, 88, 1)\",\n              backgroundColor: \"rgba(92, 95, 88, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(92, 95, 88, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(92, 95, 88, 1)\",\n              pointHoverBorderColor: \"rgba(92, 95, 88, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const recoveredLineChart = (\n    modifiedData.length !== 0\n      ? <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData.map(({ recovered }) => recovered),\n              fill: true,\n              lineTension: 0.4,\n              borderColor: \"rgba(0, 255, 0, 1)\",\n              backgroundColor: \"rgba(0, 255, 0, 0.4)\",\n              pointRadius: 1,\n              pointBorderColor: \"rgba(0, 255, 0, 1)\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(0, 255, 0, 1)\",\n              pointHoverBorderColor: \"rgba(0, 255, 0, 1)\"\n            }]\n        }}\n        options={option}\n      />\n      : null\n  );\n\n  const toggleToRight = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"infected\")\n    }\n  };\n  const toggleToLeft = () => {\n    if (isChart === \"infected\") {\n      setIsChart(\"recovered\")\n    } else if (isChart === \"recovered\") {\n      setIsChart(\"deaths\")\n    } else if (isChart === \"deaths\") {\n      setIsChart(\"infected\")\n    }\n  };\n\n  //toggle map togglers border bottom\n  let { admin0Style, admin2Style, todayStyle } = {};\n  const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n  admin0Style = isChart === \"infected\" ?\n    onStyle :\n    {}\n  admin2Style = isChart === \"deaths\" ?\n    onStyle :\n    {}\n  todayStyle = isChart === \"recovered\" ?\n    onStyle :\n    {}\n\n  return (\n    <Fragment>\n      <div className={\"global-chart-container\"}>\n        <div className={\"chart-wrapper\"}>\n          <p className={\"chart-header\"}>Daily Infected/Deaths/Recovered by Country</p>\n          <div\n            className={\"chart\"}\n            style={globalChartExpand ? { height: \"70vh\" } : {}}\n          >\n            {\n              isChart === \"infected\"\n                ? infectedLineChart\n                : isChart === \"deaths\"\n                  ? deathsLineChart\n                  : isChart === \"recovered\"\n                    ? recoveredLineChart\n                    : null\n            }\n          </div>\n          <div className={\"arrow-toggler\"}>\n            <span className={\"arrow-icon\"} onClick={() => toggleToLeft()}>{arrowLeft}</span>\n            <span className={\"card-toggler-text\"}>\n              {\n                isChart === \"infected\"\n                  ? \"Infected\"\n                  : isChart === \"deaths\"\n                    ? \"Deaths\"\n                    : isChart === \"recovered\"\n                      ? \"Recovered\"\n                      : null\n              }\n            </span>\n            <span className={\"arrow-icon\"} onClick={() => toggleToRight()}>{arrowRight}</span>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n};\n\nexport default GlobalCharts;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/Charts/GlobalTodayCharts.js",["108","109","110","111"],"import React, { useState, useEffect, Fragment } from \"react\";\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Loader from 'react-loader-spinner';\n\nimport \"./Charts.scss\"\n\nconst GlobalTodayCharts = ({ globalData, arrowRight, arrowLeft, option, classes, globalDailyChartExpand }) => {\n\n    const [isInfectedActiveChart, setIsInfectedActiveChart] = useState(\"infected\");\n    const [isDeathsRecoveredChart, setIsDeathsRecoveredChart] = useState(\"deaths\");\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoad(false)\n        }, 1000)\n    })\n\n    if (!globalData[0]) {\n        return \"Loading...\"\n    }\n\n    const loader = <Loader\n        type=\"Oval\"\n        color=\"#3500D3\"\n        height={50}\n        width={50}\n        timeout={1000}\n    />\n\n    if (isLoad) {\n        return (\n            <div className={\"loader-country-chart-wrapper\"}>\n                <div className={\"loader\"}>\n                    {loader}\n                </div>\n                <div className={\"loading\"}>\n                    Loading ...\n                </div>\n            </div>\n        )\n    };\n\n    const modifiedData = globalData.map((data) => data).reverse().filter(({ newConfirmed }) => newConfirmed < 3000000);\n\n    const toggleInfectedActiveChart = () => {\n        if (isInfectedActiveChart === \"infected\") {\n            setIsInfectedActiveChart(\"active\")\n        } else {\n            setIsInfectedActiveChart(\"infected\")\n        }\n    };\n\n    const toggleDeathsRecoveredChart = () => {\n        if (isDeathsRecoveredChart === \"deaths\") {\n            setIsDeathsRecoveredChart(\"recovered\")\n        } else {\n            setIsDeathsRecoveredChart(\"deaths\")\n        }\n    };\n\n    const infectedBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newConfirmed }) => newConfirmed),\n                        backgroundColor: \"red\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const activeBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ active }) => active),\n                        backgroundColor: \"rgba(241, 178, 74, 1)\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const recoveredBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newRecovered }) => newRecovered),\n                        backgroundColor: \"#4D774E\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    const deathsBarChart = (\n        modifiedData.length !== 0\n            ? <Bar\n                data={{\n                    labels: modifiedData.map(({ date }) => date),\n                    datasets: [{\n                        data: modifiedData.map(({ newDeaths }) => newDeaths),\n                        backgroundColor: \"#999\"\n                    }]\n                }}\n                options={option}\n            />\n            : null\n    );\n\n    //toggle map togglers border bottom\n    let { infectedStyle, activeStyle } = {};\n    const onStyle = { borderBottom: \"3px solid white\", backgroundColor: \"#240090\" };\n    infectedStyle = isInfectedActiveChart === \"infected\" ?\n        onStyle :\n        {}\n    activeStyle = isInfectedActiveChart === \"active\" ?\n        onStyle :\n        {}\n\n    let { deathsStyle, recoveredStyle } = {};\n    deathsStyle = isDeathsRecoveredChart === \"deaths\" ?\n        onStyle :\n        {}\n    recoveredStyle = isDeathsRecoveredChart === \"recovered\" ?\n        onStyle :\n        {}\n\n    return (\n        <Fragment>\n            <div className={\"chart-container\"}>\n                <div className={\"chart-wrapper\"}>\n                    <p className={\"chart-header\"}>Global Daily Infected/Active Cases</p>\n                    <div\n                        className={\"chart\"}\n                        style={globalDailyChartExpand ? { height: \"70vh\" } : {}}\n                    >\n                        {\n                            isInfectedActiveChart === \"infected\"\n                                ? infectedBarChart\n                                : activeBarChart\n                        }\n                    </div>\n                    <div className={\"arrow-toggler\"}>\n                        <span className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowLeft}</span>\n                        <span className={\"card-toggler-text\"}>\n                            {\n                                isInfectedActiveChart === \"infected\"\n                                    ? \"Daily Infected Cases\"\n                                    : \"Daily Active Cases\"\n\n                            }\n                        </span>\n                        <span className={\"arrow-icon\"} onClick={() => toggleInfectedActiveChart()}>{arrowRight}</span>\n                    </div>\n                </div>\n                <div\n                    className={\"border\"}\n                    style={globalDailyChartExpand ? { height: \"75vh\" } : {}}\n                />\n                <div className={\"chart-wrapper\"}>\n                    <p className={\"chart-header\"}>Global Daily Deaths/Recovered</p>\n                    <div\n                        className={\"chart\"}\n                        style={globalDailyChartExpand ? { height: \"70vh\" } : {}}\n                    >\n                        {\n                            isDeathsRecoveredChart === \"deaths\"\n                                ? deathsBarChart\n                                : recoveredBarChart\n                        }\n                    </div>\n                    <div className={\"arrow-toggler\"}>\n                        <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowLeft}</span>\n                        <span className={\"card-toggler-text\"}>\n                            {\n                                isDeathsRecoveredChart === \"deaths\"\n                                    ? \"Daily Deaths\"\n                                    : \"Daily Recovered\"\n                            }\n                        </span>\n                        <span className={\"arrow-icon\"} onClick={() => toggleDeathsRecoveredChart()}>{arrowRight}</span>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default GlobalTodayCharts;","/Users/shuto/Desktop/ReactProject/covid-19-tracker/covid-19-tracker/src/Components/InfoPanel.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":53,"column":32,"nodeType":"118","messageId":"119","endLine":53,"endColumn":53},{"ruleId":"120","severity":1,"message":"121","line":194,"column":25,"nodeType":"122","endLine":194,"endColumn":83},{"ruleId":"120","severity":1,"message":"121","line":197,"column":25,"nodeType":"122","endLine":197,"endColumn":72},{"ruleId":"120","severity":1,"message":"121","line":200,"column":25,"nodeType":"122","endLine":200,"endColumn":75},{"ruleId":"112","replacedBy":"123"},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","severity":1,"message":"125","line":23,"column":11,"nodeType":"118","messageId":"119","endLine":23,"endColumn":21},{"ruleId":"116","severity":1,"message":"126","line":1,"column":27,"nodeType":"118","messageId":"119","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"127","line":1,"column":17,"nodeType":"118","messageId":"119","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"126","line":1,"column":27,"nodeType":"118","messageId":"119","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"128","line":56,"column":5,"nodeType":"118","messageId":"119","endLine":56,"endColumn":16},{"ruleId":"116","severity":1,"message":"129","line":59,"column":5,"nodeType":"118","messageId":"119","endLine":59,"endColumn":16},{"ruleId":"116","severity":1,"message":"130","line":62,"column":5,"nodeType":"118","messageId":"119","endLine":62,"endColumn":15},{"ruleId":"116","severity":1,"message":"128","line":51,"column":5,"nodeType":"118","messageId":"119","endLine":51,"endColumn":16},{"ruleId":"116","severity":1,"message":"129","line":54,"column":5,"nodeType":"118","messageId":"119","endLine":54,"endColumn":16},{"ruleId":"116","severity":1,"message":"130","line":57,"column":5,"nodeType":"118","messageId":"119","endLine":57,"endColumn":15},{"ruleId":"116","severity":1,"message":"128","line":61,"column":5,"nodeType":"118","messageId":"119","endLine":61,"endColumn":16},{"ruleId":"116","severity":1,"message":"129","line":64,"column":5,"nodeType":"118","messageId":"119","endLine":64,"endColumn":16},{"ruleId":"116","severity":1,"message":"128","line":199,"column":5,"nodeType":"118","messageId":"119","endLine":199,"endColumn":16},{"ruleId":"116","severity":1,"message":"129","line":202,"column":5,"nodeType":"118","messageId":"119","endLine":202,"endColumn":16},{"ruleId":"116","severity":1,"message":"130","line":205,"column":5,"nodeType":"118","messageId":"119","endLine":205,"endColumn":15},{"ruleId":"116","severity":1,"message":"131","line":13,"column":10,"nodeType":"118","messageId":"119","endLine":13,"endColumn":17},{"ruleId":"116","severity":1,"message":"132","line":13,"column":19,"nodeType":"118","messageId":"119","endLine":13,"endColumn":29},{"ruleId":"116","severity":1,"message":"133","line":14,"column":10,"nodeType":"118","messageId":"119","endLine":14,"endColumn":16},{"ruleId":"116","severity":1,"message":"134","line":26,"column":9,"nodeType":"118","messageId":"119","endLine":26,"endColumn":15},{"ruleId":"116","severity":1,"message":"128","line":135,"column":3,"nodeType":"118","messageId":"119","endLine":135,"endColumn":14},{"ruleId":"116","severity":1,"message":"129","line":138,"column":3,"nodeType":"118","messageId":"119","endLine":138,"endColumn":14},{"ruleId":"116","severity":1,"message":"130","line":141,"column":3,"nodeType":"118","messageId":"119","endLine":141,"endColumn":13},{"ruleId":"116","severity":1,"message":"135","line":127,"column":5,"nodeType":"118","messageId":"119","endLine":127,"endColumn":18},{"ruleId":"116","severity":1,"message":"136","line":130,"column":5,"nodeType":"118","messageId":"119","endLine":130,"endColumn":16},{"ruleId":"116","severity":1,"message":"137","line":135,"column":5,"nodeType":"118","messageId":"119","endLine":135,"endColumn":16},{"ruleId":"116","severity":1,"message":"138","line":138,"column":5,"nodeType":"118","messageId":"119","endLine":138,"endColumn":19},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'setCountryChartExpand' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["139"],["140"],"'classStyle' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'admin0Style' is assigned a value but never used.","'admin2Style' is assigned a value but never used.","'todayStyle' is assigned a value but never used.","'isHover' is assigned a value but never used.","'setIsHover' is assigned a value but never used.","'isLoad' is assigned a value but never used.","'loader' is assigned a value but never used.","'infectedStyle' is assigned a value but never used.","'activeStyle' is assigned a value but never used.","'deathsStyle' is assigned a value but never used.","'recoveredStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]